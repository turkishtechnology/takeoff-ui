{"file":"tk-textarea.js","mappings":"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","names":["TkTextarea","__stencil_proxyCustomElement","HTMLElement","uuidv4"],"sources":["src/components/tk-textarea/tk-textarea.scss?tag=tk-textarea&encapsulation=shadow","src/components/tk-textarea/tk-textarea.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.tk-textarea-container {\n  display: flex;\n  align-items: flex-start;\n  flex-direction: column;\n  gap: var(--input-external-label-large-container-gap);\n  width: 100%;\n\n  .label {\n    color: var(--text-darkest);\n    font-weight: 400;\n\n    .asterisk {\n      color: var(--states-danger-base);\n      font-size: var(--desktop-label-s-size);\n      font-weight: 300;\n      line-height: var(--desktop-label-s-line-height);\n    }\n  }\n\n  .tk-textarea {\n    display: flex;\n    gap: var(--spacing-xs);\n    position: relative;\n    align-items: center;\n    border: 1px solid var(--border-light);\n    border-radius: var(--spacing-m-base);\n    background-color: var(--static-light);\n    // width: 100%;\n    width: -webkit-fill-available;\n\n    textarea {\n      outline: none;\n      border: none;\n      background-color: transparent;\n      color: var(--text-darkest);\n      padding: 0px;\n      width: 100%;\n      line-height: var(--desktop-body-m-base-line-height);\n      resize: vertical;\n\n      &::placeholder {\n        color: var(--text-sub-base);\n      }\n    }\n\n    &:hover:not(.tk-textarea-container[aria-disabled] .tk-textarea) {\n      background-color: var(--background-lightest);\n    }\n\n    .counter {\n      position: absolute;\n      right: 28px;\n      bottom: 6px;\n      color: var(--text-base);\n      line-height: var(--desktop-label-s-line-height);\n      font-size: var(--desktop-label-s-size);\n      font-weight: 400;\n\n      &.maxed {\n        color: var(--states-danger-base);\n      }\n    }\n  }\n\n  .hint {\n    color: var(--text-base);\n    line-height: var(--desktop-label-s-line-height);\n    font-size: var(--desktop-label-s-size);\n    font-weight: 300;\n    display: flex;\n    align-items: center;\n    gap: var(--spacing-m-base);\n\n    & i {\n      font-size: var(--size-base);\n      width: var(--size-base);\n      height: var(--size-base);\n      color: var(--icon-base);\n    }\n    &.error {\n      color: var(--states-danger-base);\n      i {\n        color: var(--states-danger-base);\n      }\n    }\n  }\n\n  &.large {\n    & .label {\n      font-size: var(--desktop-label-l-size);\n      line-height: var(--desktop-label-l-line-height);\n      padding: var(--input-external-label-large-label-v-padding) var(--input-external-label-large-label-h-padding);\n    }\n\n    & .tk-textarea {\n      padding: var(--input-external-label-large-input-v-padding) var(--input-external-label-large-input-h-padding);\n\n      & textarea {\n        font-family: var(--desktop-body-m-base-font);\n        font-size: var(--desktop-body-m-base-size);\n        line-height: var(--desktop-body-m-base-line-height);\n      }\n    }\n  }\n\n  &.base {\n    & .label {\n      font-size: var(--desktop-label-m-base-size);\n      line-height: var(--desktop-label-m-base-line-height);\n      padding: var(--input-external-label-base-label-v-padding) var(--input-external-label-base-label-h-padding);\n    }\n\n    & .tk-textarea {\n      padding: var(--input-external-label-base-input-v-padding) var(--input-external-label-base-input-h-padding);\n\n      & textarea {\n        font-family: var(--desktop-body-s-font);\n        font-size: var(--desktop-body-s-size);\n        line-height: var(--desktop-body-s-line-height);\n      }\n    }\n  }\n\n  &.small {\n    & .label {\n      font-size: var(--desktop-label-s-size);\n      line-height: var(--desktop-label-s-line-height);\n      padding: var(--input-external-label-small-label-v-padding) var(--input-external-label-small-label-h-padding);\n    }\n\n    & .tk-textarea {\n      padding: var(--input-external-label-small-input-v-padding) var(--input-external-label-small-input-h-padding);\n\n      & textarea {\n        font-family: var(--desktop-body-xs-font);\n        font-size: var(--desktop-body-xs-size);\n        line-height: var(--desktop-body-xs-line-height);\n      }\n    }\n  }\n\n  &.focus .tk-textarea {\n    border: var(--spacing-px) solid var(--states-info-base);\n  }\n\n  &[aria-disabled] {\n    & .label,\n    & .hint,\n    .tk-textarea textarea {\n      color: var(--text-sub-base);\n      pointer-events: none;\n      &.error {\n        color: var(--states-danger-base);\n      }\n    }\n\n    .tk-textarea {\n      background-color: var(--background-lightest);\n    }\n  }\n\n  &[aria-readonly] {\n    & .label,\n    & .hint {\n      color: var(--text-sub-base);\n      &.error {\n        color: var(--states-danger-base);\n      }\n    }\n\n    .tk-textarea {\n      background-color: var(--background-lightest);\n    }\n  }\n\n  &[aria-invalid] {\n    & .tk-textarea {\n      border-color: var(--states-danger-base);\n      background-color: var(--background-lightest);\n    }\n\n    & .hint,\n    & .hint i {\n      color: var(--states-danger-base);\n    }\n  }\n}\n","import { AttachInternals, Component, ComponentInterface, Element, Event, EventEmitter, Method, Prop, State, Watch, h } from '@stencil/core';\nimport classNames from 'classnames';\nimport { v4 as uuidv4 } from 'uuid';\n\n/**\n * The TkTextarea component enables multi-line text input with customizable size, validation, and styling options.\n * @react `import { TkTextarea } from '@takeoff-ui/react'`\n * @vue `import { TkTextarea } from '@takeoff-ui/vue'`\n * @angular `import { TkTextarea } from '@takeoff-ui/angular'`\n */\n@Component({\n  tag: 'tk-textarea',\n  styleUrl: 'tk-textarea.scss',\n  shadow: true,\n  formAssociated: true,\n})\nexport class TkTextarea implements ComponentInterface {\n  private nativeInput?: HTMLTextAreaElement;\n  private tabindex?: string | number;\n  private uniqueId = uuidv4();\n\n  @Element() el!: HTMLTkTextareaElement;\n\n  @AttachInternals() internals: ElementInternals;\n\n  @State() hasFocus = false;\n  @State() passwordStrength: number = 0;\n  @State() charCount: number = 0;\n\n  /**\n   * If `true`, the user cannot interact with the input.\n   */\n  @Prop() disabled = false;\n\n  /**\n   * Indicates whether the input is in an invalid state\n   * @defaultValue false\n   */\n  @Prop() invalid: boolean = false;\n\n  /**\n   * This is the error message that will be displayed.\n   */\n  @Prop() error: string;\n\n  /**\n   * Provided a hint or additional information about the input.\n   */\n  @Prop() hint: string;\n\n  /**\n   * Defines the label for the element.\n   */\n  @Prop() label: string;\n\n  /**\n   * The name of the control, which is submitted with the form data.\n   */\n  @Prop() name: string;\n\n  /**\n   * Placeholder text displayed when the input is empty.\n   */\n  @Prop() placeholder?: string | null;\n\n  /**\n   * Represents the rows value of the component\n   * @defaultValue 3\n   */\n  @Prop() rows = 3;\n\n  /**\n   * If `true`, the user cannot modify the value.\n   */\n  @Prop() readonly: boolean = false;\n\n  /**\n   * Sets size for the component.\n   */\n  @Prop() size: 'large' | 'base' | 'small' = 'base';\n\n  /**\n   * Displays a red asterisk (*) next to the label for visual emphasis.\n   */\n  @Prop() showAsterisk: boolean = false;\n\n  /**\n   * Limits the number of characters.\n   */\n  @Prop() maxLength?: number;\n  /**\n   * The value of the input.\n   */\n  @Prop({ mutable: true }) value?: string | number | null = '';\n\n  /**\n   * Update the native input element when the value changes\n   */\n  @Watch('value')\n  protected valueChanged() {\n    this.tkChange.emit(this.value);\n    this.updateCharCount();\n  }\n\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event({ eventName: 'tk-input' }) tkInput!: EventEmitter<KeyboardEvent>;\n\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event({ eventName: 'tk-change' }) tkChange!: EventEmitter<string | number | undefined | null>;\n\n  /**\n   * Emitted when the input loses focus.\n   */\n  @Event({ eventName: 'tk-blur' }) tkBlur!: EventEmitter<void>;\n\n  /**\n   * Emitted when the input has focus.\n   */\n  @Event({ eventName: 'tk-focus' }) tkFocus!: EventEmitter<void>;\n\n  componentWillLoad() {\n    // If the tk-input has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // tk-input to avoid causing tabbing twice on the same element\n    if (this.el.hasAttribute('tabindex')) {\n      const tabindex = this.el.getAttribute('tabindex');\n      this.tabindex = tabindex !== null ? tabindex : undefined;\n      this.el.removeAttribute('tabindex');\n    }\n  }\n\n  componentDidLoad(): void {\n    this.nativeInput = this.el.shadowRoot.querySelector('textarea');\n  }\n\n  formResetCallback() {\n    this.handleFormReset();\n  }\n\n  /**\n   * Sets focus on the specified `tk-input`. Use this method instead of the global\n   * `input.focus()`.\n   */\n  @Method()\n  async setFocus() {\n    this.nativeInput?.focus();\n  }\n\n  private updateCharCount = () => {\n    if (this.maxLength) {\n      this.charCount = this.value.toString().trim().length;\n    }\n  };\n\n  private handleFormReset() {\n    this.value = null;\n    this.nativeInput.value = null;\n    this.tkChange.emit(this.value);\n  }\n\n  private handleInput = (ev: Event) => {\n    const input = ev.target as HTMLTextAreaElement | null;\n\n    this.value = input?.value || '';\n    this.tkInput.emit(ev as KeyboardEvent);\n  };\n\n  private handleBlur = () => {\n    this.hasFocus = false;\n    this.tkBlur.emit();\n  };\n\n  private handleFocus = () => {\n    this.hasFocus = true;\n\n    this.tkFocus.emit();\n  };\n\n  private renderLabel(): HTMLLabelElement {\n    let label: HTMLLabelElement;\n\n    if (this.label?.length > 0) {\n      const asterisk = <span class=\"asterisk\">*</span>;\n      label = (\n        <label class=\"label\">\n          {this.label}\n          {this.showAsterisk ? asterisk : ''}\n        </label>\n      );\n    }\n    return label;\n  }\n\n  private renderHintError(): HTMLSpanElement {\n    let hint;\n    if (this.hint?.length > 0) {\n      hint = (\n        <span class=\"hint\">\n          <i class=\"material-symbols-outlined\">info</i>\n          {this.hint}\n        </span>\n      );\n    }\n\n    if (this.error?.length > 0) {\n      hint = (\n        <span class=\"hint error\">\n          <i class=\"material-symbols-outlined\">info</i>\n          {this.error}\n        </span>\n      );\n    }\n    return hint;\n  }\n\n  render() {\n    const rootClasses = classNames('tk-textarea-container', this.size, { focus: this.hasFocus });\n\n    let counter: HTMLSpanElement;\n    const counterClasses = classNames('counter', this.charCount == this.maxLength && 'maxed');\n    if (this.maxLength) {\n      counter = (\n        <span class={counterClasses}>\n          {this.charCount}/{this.maxLength}\n        </span>\n      );\n    }\n\n    return (\n      <div aria-readonly={this.readonly} aria-disabled={this.disabled} aria-invalid={this.invalid} class={rootClasses}>\n        {this.renderLabel()}\n        <label class=\"tk-textarea\" htmlFor={this.uniqueId}>\n          <textarea\n            id={this.uniqueId}\n            ref={el => (this.nativeInput = el)}\n            disabled={this.disabled}\n            autoComplete=\"off\"\n            name={this.name}\n            rows={this.rows}\n            maxLength={this.maxLength}\n            placeholder={this.placeholder || ''}\n            readOnly={this.readonly}\n            tabindex={this.tabindex}\n            onInput={this.handleInput}\n            onBlur={this.handleBlur}\n            onFocus={this.handleFocus}\n            value={this.value}\n          />\n          {counter}\n        </label>\n        {this.renderHintError()}\n      </div>\n    );\n  }\n}\n"],"version":3}