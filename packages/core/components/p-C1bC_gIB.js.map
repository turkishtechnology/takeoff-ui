{"file":"p-C1bC_gIB.js","mappings":";;AAAA,MAAM,aAAa,GAAG,42DAA42D;;MCSr3D,UAAU,iBAAAA,kBAAA,CAAA,MAAA,UAAA,SAAAC,CAAA,CAAA;AALvB,IAAA,WAAA,GAAA;;;;AAmCE;;;AAGG;AACK,QAAA,IAAM,CAAA,MAAA,GAAa,KAAK;AA4DjC;IAtFC,WAAW,GAAA;QACT,IAAI,CAAC,UAAU,EAAE;;IAQnB,YAAY,GAAA;QACV,IAAI,CAAC,UAAU,EAAE;;IAQnB,eAAe,GAAA;QACb,IAAI,CAAC,UAAU,EAAE;;IASnB,aAAa,GAAA;QACX,IAAI,CAAC,UAAU,EAAE;;IASnB,iBAAiB,GAAA;QACf,IAAI,CAAC,UAAU,EAAE;;IAQnB,iBAAiB,GAAA;QACf,IAAI,CAAC,UAAU,EAAE;;IAQnB,qBAAqB,GAAA;QACnB,IAAI,CAAC,UAAU,EAAE;;;IAIX,UAAU,GAAA;QAChB,IAAI,CAAC,EAAE,CAAC,aAAa,CACnB,IAAI,WAAW,CAAC,WAAW,EAAE;AAC3B,YAAA,OAAO,EAAE,IAAI;AACb,YAAA,QAAQ,EAAE,IAAI;AACd,YAAA,MAAM,EAAE;gBACN,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,cAAc,EAAE,IAAI,CAAC,cAAc;AACpC,aAAA;AACF,SAAA,CAAC,CACH;;IAGH,MAAM,GAAA;QACJ,QACE,EAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EACH,CAAa,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,CAAA,CACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/tk-tabs/tk-tabs-item.scss?tag=tk-tabs-item&encapsulation=shadow","src/components/tk-tabs/tk-tabs-item.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Element, Component, Prop, Host, h, ComponentInterface, Watch } from '@stencil/core';\nimport { IIconOptions } from '../../global/interfaces/IIconOptions';\nimport { ITooltipOptions } from '../../global/interfaces/ITooltipOptions';\n\n@Component({\n  tag: 'tk-tabs-item',\n  styleUrl: 'tk-tabs-item.scss',\n  shadow: true,\n})\nexport class TkTabsItem implements ComponentInterface {\n  @Element() el: HTMLTkTabsItemElement;\n\n  /**\n   * Icon for tabs item component.\n   */\n  @Prop() icon?: string | IIconOptions;\n  @Watch('icon')\n  iconChanged() {\n    this.emitUpdate();\n  }\n\n  /**\n   * Label for the tab item.\n   */\n  @Prop() label: string;\n  @Watch('label')\n  labelChanged() {\n    this.emitUpdate();\n  }\n\n  /**\n   * Whether the tab item is disabled.\n   */\n  @Prop() disabled: boolean;\n  @Watch('disabled')\n  disabledChanged() {\n    this.emitUpdate();\n  }\n\n  /**\n   * Checks if tab item has badge component or not.\n   * @defaultValue false\n   */\n  @Prop() badged?: boolean = false;\n  @Watch('badged')\n  badgedChanged() {\n    this.emitUpdate();\n  }\n\n  /**\n   * Sets badge component's label.\n   * @deprecated since version 0.0.40. Use 'badgeCount' instead.\n   */\n  @Prop() badgeLabel?: string;\n  @Watch('badgeLabel')\n  badgeLabelChanged() {\n    this.emitUpdate();\n  }\n\n  /**\n   * Sets badge component's count.\n   */\n  @Prop() badgeCount?: number | string;\n  @Watch('badgeCount')\n  badgeCountChanged() {\n    this.emitUpdate();\n  }\n\n  /**\n   * Sets tooltip options for the tab item.\n   */\n  @Prop() tooltipOptions?: ITooltipOptions;\n  @Watch('tooltipOptions')\n  tooltipOptionsChanged() {\n    this.emitUpdate();\n  }\n\n  // Dispatch a custom event that the parent component can listen for\n  private emitUpdate() {\n    this.el.dispatchEvent(\n      new CustomEvent('tk-update', {\n        bubbles: true,\n        composed: true,\n        detail: {\n          label: this.label,\n          icon: this.icon,\n          disabled: this.disabled,\n          badged: this.badged,\n          badgeCount: this.badgeCount,\n          badgeLabel: this.badgeLabel,\n          tooltipOptions: this.tooltipOptions,\n        },\n      }),\n    );\n  }\n\n  render() {\n    return (\n      <Host>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}