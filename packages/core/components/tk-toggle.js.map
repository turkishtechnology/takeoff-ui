{"file":"tk-toggle.js","mappings":"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","names":["TkToggle","__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/tk-toggle/tk-toggle.scss?tag=tk-toggle&encapsulation=shadow","src/components/tk-toggle/tk-toggle.tsx"],"sourcesContent":[":host {\n  display: inline-block;\n  user-select: none;\n}\n\n.tk-toggle {\n  label {\n    display: flex;\n    align-items: center;\n    gap: var(--basic-radio-container-gap);\n  }\n\n  &.tk-toggle-xlarge {\n    .tk-toggle-input-container {\n      width: 60px;\n      height: 32px;\n\n      .tk-toggle-thumb {\n        width: 28px;\n        height: 28px;\n\n        .tk-toggle-thumb-icon {\n          font-size: 20px;\n          width: 20px;\n          height: 20px;\n        }\n      }\n\n      .tk-toggle-input:checked + .tk-toggle-thumb {\n        transform: translateX(28px);\n      }\n    }\n  }\n\n  &.tk-toggle-large {\n    .tk-toggle-input-container {\n      width: 52px;\n      height: 28px;\n\n      .tk-toggle-thumb {\n        width: 24px;\n        height: 24px;\n\n        .tk-toggle-thumb-icon {\n          font-size: 20px;\n          width: 20px;\n          height: 20px;\n        }\n      }\n\n      .tk-toggle-input:checked + .tk-toggle-thumb {\n        transform: translateX(24px);\n      }\n    }\n  }\n\n  &.tk-toggle-base {\n    .tk-toggle-input-container {\n      width: 44px;\n      height: 24px;\n\n      .tk-toggle-thumb {\n        width: 20px;\n        height: 20px;\n\n        .tk-toggle-thumb-icon {\n          font-size: 16px;\n          width: 16px;\n          height: 16px;\n        }\n      }\n\n      .tk-toggle-input:checked + .tk-toggle-thumb {\n        transform: translateX(20px);\n      }\n    }\n  }\n\n  &.tk-toggle-small {\n    .tk-toggle-input-container {\n      width: 36px;\n      height: 20px;\n\n      .tk-toggle-thumb {\n        width: 16px;\n        height: 16px;\n\n        .tk-toggle-thumb-icon {\n          font-size: 12px;\n          width: 12px;\n          height: 12px;\n        }\n      }\n\n      .tk-toggle-input:checked + .tk-toggle-thumb {\n        transform: translateX(16px);\n      }\n    }\n  }\n\n  &.tk-toggle-xsmall {\n    .tk-toggle-input-container {\n      width: 28px;\n      height: 16px;\n\n      .tk-toggle-thumb {\n        width: 12px;\n        height: 12px;\n\n        .tk-toggle-thumb-icon {\n          font-size: 8px;\n          width: 8px;\n          height: 8px;\n        }\n      }\n\n      .tk-toggle-input:checked + .tk-toggle-thumb {\n        transform: translateX(12px);\n      }\n    }\n  }\n\n  .tk-toggle-input-container {\n    position: relative;\n    background: var(--background-light);\n    border-radius: 30px;\n    transition: background-color 0.3s ease;\n    cursor: pointer;\n\n    &:has(.tk-toggle-input:disabled) {\n      border: 1px solid var(--border-light);\n      background: var(--static-light);\n\n      .tk-toggle-input {\n        cursor: not-allowed;\n      }\n\n      .tk-toggle-thumb {\n        background: var(--background-light);\n        box-shadow: none;\n      }\n    }\n\n    &:has(.tk-toggle-input:hover:not(.tk-toggle-input:disabled):not(.tk-toggle-input:checked)) {\n      background: var(--background-sub-base);\n    }\n  }\n\n  .tk-toggle-input {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    opacity: 0;\n    cursor: pointer;\n    margin: 0;\n    z-index: 200;\n\n    &:checked + .tk-toggle-thumb {\n      transform: translateX(28px);\n\n      .tk-toggle-thumb-icon {\n        display: flex;\n      }\n    }\n\n    &:disabled + .tk-toggle-thumb {\n      background-color: var(--background-light);\n\n      .tk-toggle-thumb-icon {\n        color: var(--icon-lightest);\n      }\n    }\n  }\n\n  .tk-toggle-thumb {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    transition:\n      transform 0.3s ease,\n      background-color 0.3s ease;\n    border-radius: var(--radius-full);\n    background: var(--background-lightest);\n    box-shadow: var(--effect-1-default-base);\n\n    .tk-toggle-thumb-icon {\n      display: none;\n    }\n  }\n\n  &:not(.tk-toggle-disabled) {\n    &.tk-toggle-info {\n      .tk-toggle-input-container:has(.tk-toggle-input:checked) {\n        background-color: var(--states-info-base);\n\n        .tk-toggle-thumb-icon {\n          color: var(--states-info-dark);\n        }\n      }\n\n      .tk-toggle-input:hover:checked + .tk-toggle-thumb {\n        background-color: var(--states-info-lightest);\n      }\n    }\n\n    &.tk-toggle-success {\n      .tk-toggle-input-container:has(.tk-toggle-input:checked) {\n        background-color: var(--states-success-base);\n\n        .tk-toggle-thumb-icon {\n          color: var(--states-success-dark);\n        }\n      }\n\n      .tk-toggle-input:hover:checked + .tk-toggle-thumb {\n        background-color: var(--states-success-lightest);\n      }\n    }\n\n    .tk-toggle-input-container:has(.tk-toggle-input:focus-visible) {\n      outline: 2px solid var(--states-info-base);\n      outline-offset: 2px;\n    }\n\n    &.tk-toggle-invalid {\n      .tk-toggle-input-container {\n        border: 1px solid var(--states-danger-base);\n\n        &:has(.tk-toggle-input:checked) {\n          background-color: var(--states-danger-base);\n\n          .tk-toggle-thumb {\n            background: var(--background-lightest);\n          }\n\n          .tk-toggle-thumb-icon {\n            color: var(--states-danger-base);\n          }\n        }\n      }\n    }\n  }\n\n  .tk-toggle-label {\n    color: var(--text-darkest);\n\n    font-family: var(--desktop-body-s-font);\n    font-size: var(--desktop-body-s-size);\n    font-style: normal;\n    font-weight: 400;\n    line-height: var(--desktop-body-s-line-height);\n    /* 142.857% */\n  }\n\n  &.tk-toggle-disabled {\n    .tk-toggle-label {\n      color: var(--text-sub-base);\n    }\n  }\n}\n","import { AttachInternals, Component, ComponentInterface, Element, Event, EventEmitter, Method, Prop, State, Watch, h } from '@stencil/core';\nimport classNames from 'classnames';\n\n/**\n * The TkToggle component is another basic element for user input. You can use this for turning settings, features or true/false inputs on and off.\n * @react `import { TkToggle } from '@takeoff-ui/react'`\n * @vue `import { TkToggle } from '@takeoff-ui/vue'`\n * @angular `import { TkToggle } from '@takeoff-ui/angular'`\n */\n@Component({\n  tag: 'tk-toggle',\n  styleUrl: 'tk-toggle.scss',\n  formAssociated: true,\n  shadow: true,\n})\nexport class TkToggle implements ComponentInterface {\n  private tabindex?: number;\n  private nativeInput?: HTMLInputElement;\n\n  @Element() el: HTMLTkToggleElement;\n\n  @AttachInternals() internals: ElementInternals;\n\n  @State() hasDefaultSlot: boolean;\n\n  /**\n   * The internal checked state of the toggle.\n   * @defaultValue false\n   */\n  @State() checked: boolean = false;\n\n  /**\n   * The aria-labelledby attribute of the toggle.\n   * @defaultValue null\n   */\n  @Prop() ariaLabelledby: string = null;\n\n  /**\n   * Whether the toggle is disabled.\n   * @defaultValue false\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * Specifies a material icon name to be displayed.\n   * @defaultValue check\n   */\n  @Prop() icon: string = 'check';\n\n  /**\n   * The ID of the input element.\n   * @defaultValue ''\n   */\n  @Prop() inputId: string = '';\n\n  /**\n   * The name attribute of the toggle.\n   * @defaultValue null\n   */\n  @Prop() name: string = null;\n\n  /**\n   * The label for the toggle.\n   */\n  @Prop() label?: string;\n\n  /**\n   * Whether to show the icon in the toggle.\n   * @defaultValue true\n   */\n  @Prop() showIcon: boolean = true;\n\n  /**\n   * Sets size for the component.\n   * @defaultValue base\n   */\n  @Prop() size: 'xlarge' | 'large' | 'base' | 'small' | 'xsmall' = 'base';\n\n  /**\n   * The type of the toggle.\n   * @defaultValue info\n   */\n  @Prop() variant: 'info' | 'success' = 'info';\n\n  /**\n   * Whether the toggle is in an invalid state.\n   * @defaultValue false\n   */\n  @Prop() invalid: boolean = false;\n\n  /**\n   * The current state of the toggle.\n   * @defaultValue false\n   */\n  @Prop({ mutable: true }) value: boolean = false;\n  @Watch('value')\n  valueChanged(newValue: boolean, oldValue: boolean) {\n    if (newValue !== oldValue) {\n      this.checked = newValue;\n    }\n  }\n\n  /**\n   * Event emitted when the toggle value changes.\n   * @event onChange\n   */\n  @Event({ eventName: 'tk-change' }) tkChange: EventEmitter<boolean>;\n\n  componentWillLoad() {\n    this.checked = this.value;\n\n    // If the tk-toggle has a tabindex attribute we get the value\n    // and pass it down to the native input, then remove it from the\n    // tk-toggle to avoid causing tabbing twice on the same element\n    if (this.el.hasAttribute('tabindex')) {\n      const tabindex = Number(this.el.getAttribute('tabindex'));\n      this.tabindex = tabindex !== null ? tabindex : undefined;\n      this.el.removeAttribute('tabindex');\n    }\n\n    this.hasDefaultSlot = Array.from(this.el.childNodes).some(\n      node => (node.nodeType === Node.ELEMENT_NODE && !(node as HTMLElement).hasAttribute('slot')) || (node.nodeType === Node.TEXT_NODE && node.textContent?.trim().length > 0),\n    );\n  }\n\n  formResetCallback() {\n    this.handleFormReset();\n  }\n\n  /**\n   * Returns the native `<input>` element used under the hood.\n   */\n  @Method()\n  getInputElement(): Promise<HTMLInputElement> {\n    return Promise.resolve(this.nativeInput);\n  }\n  private handleFormReset() {\n    this.value = false;\n    this.checked = false;\n    this.invalid = false;\n    this.tkChange.emit(this.value);\n  }\n\n  private handleInputChange = (event: Event) => {\n    if (!this.disabled) {\n      const target = event.target as HTMLInputElement;\n      this.value = target.checked;\n      this.checked = target.checked;\n      this.tkChange.emit(this.checked);\n    }\n  };\n\n  private renderInput(): HTMLInputElement {\n    return (\n      <input\n        id={this.inputId}\n        ref={input => (this.nativeInput = input)}\n        class=\"tk-toggle-input\"\n        type=\"checkbox\"\n        role=\"switch\"\n        disabled={this.disabled}\n        checked={this.checked}\n        onChange={this.handleInputChange}\n        tabIndex={this.tabindex}\n        aria-checked={this.checked.toString()}\n        aria-disabled={this.disabled}\n        aria-invalid={this.invalid || undefined}\n        aria-label={this.name}\n        aria-labelledby={this.ariaLabelledby}\n      />\n    );\n  }\n\n  render() {\n    const rootClasses = classNames('tk-toggle', `tk-toggle-${this.size}`, `tk-toggle-${this.variant}`, {\n      'tk-toggle-disabled': this.disabled,\n      'tk-toggle-invalid': this.invalid,\n    });\n\n    return (\n      <div class={rootClasses}>\n        <label htmlFor={this.inputId}>\n          <div class=\"tk-toggle-input-container\">\n            {this.renderInput()}\n            <span class=\"tk-toggle-thumb\">{this.showIcon && <span class=\"material-symbols-outlined tk-toggle-thumb-icon\">{this.icon}</span>}</span>\n          </div>\n          {this.hasDefaultSlot ? <slot></slot> : this.label && <span class=\"tk-toggle-label\">{this.label}</span>}\n        </label>\n      </div>\n    );\n  }\n}\n"],"version":3}