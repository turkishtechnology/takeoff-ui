{"file":"p-C4O4GV07.js","mappings":";;;AAAA,MAAM,WAAW,GAAG,irMAAirM;;MCaxrM,QAAQ,iBAAAA,kBAAA,CAAA,MAAA,QAAA,SAAAC,CAAA,CAAA;AAJrB,IAAA,WAAA,GAAA;;;AAOE;;AAEG;AACK,QAAA,IAAc,CAAA,cAAA,GAAY,IAAI;AAEtC;;;AAGG;AACK,QAAA,IAAU,CAAA,UAAA,GAAuB,OAAO;AAEhD;;;AAGG;AACK,QAAA,IAAK,CAAA,KAAA,GAAa,KAAK;AAE/B;;;AAGG;AACK,QAAA,IAAW,CAAA,WAAA,GAA+C,SAAS;AAE3E;;AAEG;AACK,QAAA,IAAK,CAAA,KAAA,GAAY,IAAI;AAE7B;;AAEG;AACK,QAAA,IAAK,CAAA,KAAA,GAAY,IAAI;AAE7B;;AAEG;AACK,QAAA,IAAI,CAAA,IAAA,GAAY,IAAI;AAE5B;;;AAGG;AACK,QAAA,IAAO,CAAA,OAAA,GAAa,KAAK;AAEjC;;;AAGG;AACK,QAAA,IAAO,CAAA,OAAA,GAAqE,SAAS;AAE7F;;;AAGG;AACK,QAAA,IAAI,CAAA,IAAA,GAAsD,MAAM;AA8BzE;IA5BS,gBAAgB,GAAA;QACtB,QACE,CAAA,CAAA,KAAA,EAAA,EAAK,KAAK,EAAC,4BAA4B,EAAC,OAAO,EAAC,WAAW,EAAC,IAAI,EAAC,cAAc,EAAA,EAC7E,CAAA,CAAA,QAAA,EAAA,EAAQ,EAAE,EAAC,SAAS,EAAC,EAAE,EAAC,SAAS,EAAC,CAAC,EAAC,SAAS,EAAC,IAAI,EAAC,cAAc,EAAG,CAAA,EACpE,CACE,CAAA,MAAA,EAAA,EAAA,CAAC,EAAC,gNAAgN,EAClN,IAAI,EAAC,cAAc,EAAA,CACnB,CACE;;IAIV,MAAM,GAAA;AACJ,QAAA,MAAM,gBAAgB,GAAG,UAAU,CAAC,qBAAqB,EAAE,CAAa,UAAA,EAAA,IAAI,CAAC,IAAI,CAAE,CAAA,CAAC;AACpF,QAAA,MAAM,WAAW,GAAG,UAAU,CAAC,WAAW,EAAE,CAAa,UAAA,EAAA,IAAI,CAAC,OAAO,EAAE,EAAE,CAAA,UAAA,EAAa,IAAI,CAAC,UAAU,EAAE,EAAE;YACvG,mBAAmB,EAAE,IAAI,CAAC,OAAO;AAClC,SAAA,CAAC;AACF,QAAA,QACE,CAAA,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAK,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAU,OAAA,EAAA,IAAI,CAAC,IAAI,EAAE,EAAA,EACvD,CAAA,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAK,KAAK,EAAE,WAAW,EAAE,IAAI,EAAC,QAAQ,EAAa,YAAA,EAAA,IAAI,CAAC,IAAI,EAAmB,iBAAA,EAAA,IAAI,CAAC,cAAc,EAAA,EAC/F,IAAI,CAAC,KAAK,IAAI,CAAM,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAC,iBAAiB,EAAE,EAAA,IAAI,CAAC,KAAK,CAAQ,EAC/D,IAAI,CAAC,KAAK,IAAI,4DAAK,KAAK,EAAC,iBAAiB,EAAC,GAAG,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,IAAI,EAAI,CAAA,EAC9E,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAClD,EACL,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,IAAI,CAAM,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,IAAI,EAAC,OAAO,EAAC,KAAK,EAAE,UAAU,CAAC,iBAAiB,EAAE,CAAA,uBAAA,EAA0B,IAAI,CAAC,WAAW,CAAE,CAAA,CAAC,EAAA,CAAS,CACzI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/tk-avatar/tk-avatar.scss?tag=tk-avatar","src/components/tk-avatar/tk-avatar.tsx"],"sourcesContent":[":host {\n  display: inline-block;\n}\n\n.tk-avatar-container {\n  position: relative;\n}\n\n:has(.tk-avatar-badge) {\n  .tk-avatar {\n    box-shadow: var(--effect-1-default-sm);\n  }\n}\n\n.tk-avatar {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n  border: 1px solid var(--static-light);\n  border-radius: 8px;\n  flex-shrink: 0;\n  gap: 10px;\n\n  .tk-avatar-label {\n    font-family: var(--desktop-title-h5-font, Geologica);\n    /* Title/H5-24 */\n    font-style: normal;\n    font-weight: 400;\n    line-height: var(--desktop-title-h5-line-height, 30px);\n    /* 125% */\n  }\n\n  > svg {\n    display: block;\n    fill: currentColor;\n    pointer-events: none;\n    width: 100%;\n    height: 100%;\n  }\n\n  &.tk-avatar-rounded {\n    border-radius: var(--radius-full);\n\n    .tk-avatar-image {\n      border-radius: var(--radius-full);\n    }\n  }\n}\n\n.tk-avatar-image {\n  width: 100%;\n  height: 100%;\n  vertical-align: bottom;\n  object-fit: cover;\n}\n\n.tk-avatar-xlarge {\n  .tk-avatar {\n    width: var(--spacing-16xl);\n    height: var(--spacing-16xl);\n    border: 2px solid var(--static-light);\n\n    .tk-avatar-label {\n      font-size: var(--desktop-title-h5-size, 24px);\n    }\n\n    > svg {\n      transform: translateY(12px);\n    }\n  }\n\n  .tk-avatar-badge {\n    width: 18px;\n    height: 18px;\n  }\n}\n\n.tk-avatar-large {\n  .tk-avatar {\n    width: 48px;\n    height: 48px;\n    border: 2px solid var(--static-light);\n\n    .tk-avatar-label {\n      font-size: var(--desktop-title-h6-size, 20px);\n    }\n\n    > svg {\n      transform: translateY(10px);\n    }\n  }\n\n  .tk-avatar-badge {\n    width: 14px;\n    height: 14px;\n  }\n}\n\n.tk-avatar-base {\n  .tk-avatar {\n    width: 32px;\n    height: 32px;\n\n    .tk-avatar-label {\n      font-size: var(--desktop-body-m-base-size, 16px);\n    }\n\n    > svg {\n      transform: translateY(8px);\n    }\n  }\n\n  .tk-avatar-badge {\n    width: 10px;\n    height: 10px;\n  }\n}\n\n.tk-avatar-small {\n  .tk-avatar {\n    width: 24px;\n    height: 24px;\n\n    .tk-avatar-label {\n      font-size: var(--desktop-body-xs-size, 12px);\n    }\n\n    > svg {\n      transform: translateY(6px);\n    }\n  }\n\n  .tk-avatar-badge {\n    width: 8px;\n    height: 8px;\n  }\n}\n\n.tk-avatar-xsmall {\n  .tk-avatar {\n    width: 20px;\n    height: 20px;\n\n    &:not(.tk-avatar-rounded) {\n      border-radius: 4px;\n    }\n\n    .tk-avatar-label {\n      font-size: var(--desktop-body-2xs-size, 11px);\n      line-height: var(--line-height-xxs-normal, 16px);\n      /* 145.455% */\n    }\n\n    > svg {\n      transform: translateY(4px);\n    }\n  }\n\n  .tk-avatar-badge {\n    width: 6px;\n    height: 6px;\n  }\n}\n\n.tk-avatar-base,\n.tk-avatar-small,\n.tk-avatar-xsmall {\n  .tk-avatar-badge {\n    border-width: 1px;\n  }\n}\n\n.tk-avatar-brand {\n  background: var(--primary-base);\n\n  .tk-avatar-label {\n    color: var(--text-lightest, #f9fafc);\n  }\n\n  &:has(.tk-avatar-image) {\n    background: transparent;\n  }\n}\n\n.tk-avatar-solid {\n  &.tk-avatar-primary {\n    background: var(--primary-light);\n\n    .tk-avatar-label {\n      color: var(--primary-darkest);\n    }\n  }\n\n  &.tk-avatar-light {\n    background: var(--background-light);\n\n    .tk-avatar-label {\n      color: var(--text-darkest);\n    }\n  }\n\n  &.tk-avatar-success {\n    background: var(--states-success-sub-base);\n\n    .tk-avatar-label {\n      color: var(--states-success-darkest);\n    }\n  }\n\n  &.tk-avatar-info {\n    background: var(--states-info-sub-base);\n\n    .tk-avatar-label {\n      color: var(--states-info-darkest);\n    }\n  }\n\n  &.tk-avatar-warning {\n    background: var(--states-warning-light);\n\n    .tk-avatar-label {\n      color: var(--states-warning-darkest);\n    }\n  }\n\n  &.tk-avatar-danger {\n    background: var(--states-danger-sub-base);\n\n    .tk-avatar-label {\n      color: var(--states-danger-darkest);\n    }\n  }\n}\n\n.tk-avatar-primary > svg {\n  color: var(--primary-lightest);\n}\n\n.tk-avatar-light > svg {\n  color: var(--frames-lightest);\n}\n\n.tk-avatar-success > svg {\n  color: var(--states-success-light);\n}\n\n.tk-avatar-info > svg {\n  color: var(--states-info-light);\n}\n\n.tk-avatar-warning > svg {\n  color: var(--states-warning-light);\n}\n\n.tk-avatar-danger > svg {\n  color: var(--states-danger-light);\n}\n\n.tk-avatar-badge {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  border-radius: var(--radius-full);\n  border: 2px solid var(--static-light);\n  border-width: 2px;\n  box-shadow: var(--effect-1-hover-sm);\n\n  &.tk-avatar-badge-status-success {\n    background: var(--states-success-base, #22c55e);\n  }\n\n  &.tk-avatar-badge-status-info {\n    background: var(--states-info-base, #3b82f6);\n  }\n\n  &.tk-avatar-badge-status-warning {\n    background: var(--states-warning-base, #eab308);\n  }\n\n  &.tk-avatar-badge-status-danger {\n    background: var(--states-danger-base, #ff3d32);\n  }\n}\n\n.tk-avatar-group-compact .tk-avatar-badge {\n  display: none;\n}\n","import { Component, ComponentInterface, Element, Prop, h } from '@stencil/core';\nimport classNames from 'classnames';\n\n/**\n * The `TkAvatar` represents a user, labels, and display the images or a brand.\n * @react `import { TkAvatar, TkAvatarGroup } from '@takeoff-ui/react'`\n * @vue `import { TkAvatar, TkAvatarGroup } from '@takeoff-ui/vue'`\n * @angular `import { TkAvatar, TkAvatarGroup } from '@takeoff-ui/angular'`\n */\n@Component({\n  tag: 'tk-avatar',\n  styleUrl: 'tk-avatar.scss',\n})\nexport class TkAvatar implements ComponentInterface {\n  @Element() el: HTMLTkAvatarElement;\n\n  /**\n   * ID of the element that labels the avatar - accessibility\n   */\n  @Prop() ariaLabelledby?: string = null;\n\n  /**\n   * Background style of the avatar\n   * @defaultValue 'brand'\n   */\n  @Prop() background?: 'brand' | 'solid' = 'brand';\n\n  /**\n   * The badge to be displayed in the avatar\n   * @defaultValue false\n   */\n  @Prop() badge?: boolean = false;\n\n  /**\n   * The status of the badge\n   * @defaultValue success\n   */\n  @Prop() badgeStatus?: 'success' | 'warning' | 'info' | 'danger' = 'success';\n\n  /**\n   * URL of the image to be displayed in the avatar\n   */\n  @Prop() image?: string = null;\n\n  /**\n   * Text label to be displayed in the avatar\n   */\n  @Prop() label?: string = null;\n\n  /**\n   * Name associated with the avatar - accessibility\n   */\n  @Prop() name?: string = null;\n\n  /**\n   * Whether the avatar should have rounded corners\n   * @defaultValue false\n   */\n  @Prop() rounded?: boolean = false;\n\n  /**\n   * Appearance of the avatar\n   * @defaultValue 'primary'\n   */\n  @Prop() variant?: 'primary' | 'light' | 'success' | 'info' | 'warning' | 'danger' = 'primary';\n\n  /**\n   * Size of the avatar\n   * @defaultValue 'base'\n   */\n  @Prop() size?: 'xsmall' | 'small' | 'base' | 'large' | 'xlarge' = 'base';\n\n  private renderDefaultSvg() {\n    return (\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 64 52\" fill=\"currentColor\">\n        <circle cx=\"32.3068\" cy=\"12.0212\" r=\"12.0212\" fill=\"currentColor\" />\n        <path\n          d=\"M64 54.0952C64 46.9218 60.6286 40.0421 54.6274 34.9697C48.6263 29.8973 40.4869 27.0476 32 27.0476C23.5131 27.0476 15.3737 29.8973 9.37259 34.9697C3.37142 40.0421 1.28149e-06 46.9217 0 54.0952L32 54.0952H64Z\"\n          fill=\"currentColor\"\n        />\n      </svg>\n    );\n  }\n\n  render() {\n    const containerClasses = classNames('tk-avatar-container', `tk-avatar-${this.size}`);\n    const rootClasses = classNames('tk-avatar', `tk-avatar-${this.variant}`, `tk-avatar-${this.background}`, {\n      'tk-avatar-rounded': this.rounded,\n    });\n    return (\n      <div class={containerClasses} part={`avatar ${this.size}`}>\n        <div class={rootClasses} part=\"avatar\" aria-label={this.name} aria-labelledby={this.ariaLabelledby}>\n          {this.label && <span class=\"tk-avatar-label\">{this.label}</span>}\n          {this.image && <img class=\"tk-avatar-image\" src={this.image} alt={this.name} />}\n          {!this.label && !this.image && this.renderDefaultSvg()}\n        </div>\n        {this.badge && this.rounded && <span part=\"badge\" class={classNames('tk-avatar-badge', `tk-avatar-badge-status-${this.badgeStatus}`)}></span>}\n      </div>\n    );\n  }\n}\n"],"version":3}