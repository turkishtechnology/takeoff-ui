{"file":"tk-tree-view.js","mappings":"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","names":["TkTreeView","__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/tk-treeview/tk-tree-view.scss?tag=tk-tree-view","src/components/tk-treeview/tk-tree-view.tsx"],"sourcesContent":[".tk-tree-view {\n  display: inline-flex;\n  flex-direction: column;\n  align-items: flex-start;\n  background: transparent;\n\n  &.stepper {\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    gap: var(--tree-gap, 12px);\n\n    .column .node .tk-tree-view.pointer {\n      height: 100%;\n    }\n  }\n\n  &.divided {\n    padding: var(--tree-v-padding, 8px) var(--tree-h-padding, 10px);\n    border-radius: 8px;\n    border: 1px solid var(--border-light, #e1e4ea);\n  }\n\n  &.light {\n    padding: var(--tree-v-padding, 8px) var(--tree-h-padding, 10px);\n    border-radius: 8px;\n    border: 1px solid var(--border-light, #e1e4ea);\n    background: var(--background-lightest, #f9fafc);\n  }\n\n  &.content {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: var(--tree-gap, 2px);\n  }\n\n  &.node {\n    display: flex;\n    align-items: flex-start;\n    border-radius: 4px;\n    flex-direction: column;\n    position: relative;\n\n    &.expanded {\n      font-weight: 500;\n      gap: var(--tree-gap, 4px);\n    }\n\n    &.directory {\n      font-weight: 500;\n    }\n\n    &.file {\n      font-weight: 400;\n    }\n\n    .tk-tree-view.pointer {\n      background-color: var(--primary-base);\n      width: 4px;\n      border-radius: 0 4px 4px 0;\n      position: absolute;\n      left: 0;\n      top: 0;\n      z-index: 1;\n\n      &.base {\n        height: 32px;\n      }\n\n      &.small {\n        height: 24px;\n      }\n\n      &.large {\n        height: 44px;\n      }\n    }\n  }\n\n  &.label {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    cursor: pointer;\n    color: var(--text-dark, #525866);\n    user-select: none;\n    border-radius: 4px;\n\n    &.large {\n      gap: var(--items-tree-large-gap, 10px);\n      padding: var(--items-tree-large-v-padding, 10px) var(--items-tree-large-h-padding, 12px);\n\n      & .tk-icon {\n        font-size: 20px;\n      }\n    }\n\n    &.base {\n      gap: var(--items-tree-base-gap, 8px);\n      padding: var(--items-tree-base-v-padding, 6px) var(--items-tree-base-h-padding, 8px);\n\n      & .tk-icon {\n        font-size: 20px;\n      }\n    }\n\n    &.small {\n      gap: var(--items-tree-small-gap, 4px);\n      padding: var(--items-tree-small-v-padding, 4px) var(--items-tree-small-h-padding, 6px);\n\n      & .tk-icon {\n        font-size: 16px;\n      }\n    }\n\n    &.selected {\n      background: var(--primary-lightest, #fae6e8);\n      color: var(--text-darkest, #222530);\n    }\n\n    &.disabled {\n      color: var(--text-sub-base, #99a0ae);\n      cursor: not-allowed;\n    }\n\n    &:not(.disabled, .selected):hover {\n      color: var(--text-darkest, #222530);\n      background: var(--background-lightest, #f9fafc);\n    }\n  }\n\n  &.text {\n    font-family: var(--body-s-font, Geologica);\n    font-style: normal;\n    font-weight: 400;\n\n    &.base {\n      font-size: var(--body-s-size, 14px);\n      line-height: var(--body-s-line-height, 20px);\n    }\n\n    &.small {\n      font-size: var(--body-2xs-size, 11px);\n      line-height: var(--line-height-xxs-normal, 16px);\n    }\n\n    &.large {\n      font-size: var(--body-m-base-size, 16px);\n      line-height: var(--body-m-base-line-height, 24px);\n    }\n  }\n\n  &.children {\n    margin-left: 18px;\n    border-left: 1px solid var(--border-light, #e1e4ea);\n    padding-left: 10px;\n    gap: 2px;\n  }\n}\n","import { Component, ComponentInterface, Prop, h, State, Element, Event, EventEmitter } from '@stencil/core';\nimport classNames from 'classnames';\nimport { ITreeItem } from './interfaces';\nimport { IBadgeOptions } from '../../global/interfaces/IBadgeOptions';\n\n/**\n * The `TkTreeview` component displays hierarchical data in a tree structure with expandable/collapsible nodes.\n * Uses array-based data structure for better performance and easier data management.\n * @react `import { TkTreeView } from '@takeoff-ui/react'`\n * @vue `import { TkTreeView } from '@takeoff-ui/vue'`\n * @angular `import { TkTreeView } from '@takeoff-ui/angular'`\n */\n@Component({\n  tag: 'tk-tree-view',\n  styleUrl: 'tk-tree-view.scss',\n  shadow: false,\n})\nexport class TkTreeView implements ComponentInterface {\n  @Element() el: HTMLElement;\n\n  @State() expandedPaths: Set<string> = new Set();\n  @State() selectedPath: string | null = null;\n\n  /**\n   * Array of tree items data. This is the primary way to provide data to the tree view.\n   */\n  @Prop() items: ITreeItem[] = [];\n\n  /**\n   * Tree view mode: 'basic' or 'stepper'.\n   */\n  @Prop() mode: 'basic' | 'stepper' = 'basic';\n\n  /**\n   * Tree view type: 'basic', 'divided', or 'light'.\n   */\n  @Prop() type: 'basic' | 'divided' | 'light' = 'basic';\n\n  /**\n   * Tree view size: 'large', 'base' or 'small'.\n   */\n  @Prop() size: 'large' | 'base' | 'small' = 'base';\n\n  /**\n   * If true, disables all interaction with the tree view.\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * Icon for branch items (items with children). When empty, no icon is shown.\n   */\n  @Prop() branchIcon: string = '';\n\n  /**\n   * Icon for leaf items (items without children). When empty, no icon is shown.\n   */\n  @Prop() leafIcon: string = '';\n\n  /**\n   * Show/hide the badge for children count on directories.\n   */\n  @Prop() showBadge: boolean = true;\n\n  /**\n   * Badge customization options for children count display.\n   */\n  @Prop() badgeOptions?: IBadgeOptions;\n\n  /**\n   * The value of the selected tree item.\n   */\n  @Prop() value?: string[];\n\n  /**\n   * If true, enables checkbox selection for tree items.\n   */\n  @Prop() selectable: boolean = false;\n\n  /**\n   * Show/hide the pointer icon for selected items.\n   */\n  @Prop() showPointer: boolean = true;\n\n  /**\n   * Event emitted when a tree item is clicked.\n   */\n  @Event({ eventName: 'tk-item-click' }) tkItemClick: EventEmitter<ITreeItem>;\n\n  /**\n   * Event emitted when the selected value changes.\n   */\n  @Event({ eventName: 'tk-change' }) tkChange: EventEmitter<string[]>;\n\n  /**\n   * Collect all descendant paths recursively\n   */\n  private collectDescendantPaths(pathStr: string, item: ITreeItem): string[] {\n    const paths: string[] = [];\n\n    if (item.children && item.children.length > 0) {\n      item.children.forEach((child, index) => {\n        const childPath = `${pathStr}-${index}`;\n        paths.push(childPath);\n        paths.push(...this.collectDescendantPaths(childPath, child));\n      });\n    }\n\n    return paths;\n  }\n\n  /**\n   * Get stepper columns for stepper mode display.\n   */\n  private getStepperColumns(): { items: ITreeItem[]; basePath: string }[] {\n    const columns: { items: ITreeItem[]; basePath: string }[] = [];\n    let currentLevel = this.items;\n    let currentBasePath = '';\n\n    while (currentLevel && currentLevel.length > 0) {\n      columns.push({ items: currentLevel, basePath: currentBasePath });\n\n      const expandedItem = currentLevel.find((_, index) => {\n        const itemPath = currentBasePath ? `${currentBasePath}-${index}` : `${index}`;\n        return this.expandedPaths.has(itemPath);\n      });\n\n      if (expandedItem && expandedItem.children && expandedItem.children.length > 0) {\n        const expandedIndex = currentLevel.indexOf(expandedItem);\n        currentBasePath = currentBasePath ? `${currentBasePath}-${expandedIndex}` : `${expandedIndex}`;\n        currentLevel = expandedItem.children;\n      } else {\n        break;\n      }\n    }\n\n    return columns;\n  }\n\n  private handleToggleUnified = (pathStr: string, item: ITreeItem) => {\n    const descendants = this.collectDescendantPaths(pathStr, item);\n\n    if (this.mode === 'stepper') {\n      // Generate ancestor paths inline: \"0-1-2\" -> [\"0\", \"0-1\", \"0-1-2\"]\n      const pathParts = pathStr.split('-');\n      const ancestors: string[] = [];\n      for (let i = 1; i <= pathParts.length; i++) {\n        ancestors.push(pathParts.slice(0, i).join('-'));\n      }\n\n      const isExpanded = this.expandedPaths.has(pathStr);\n\n      if (isExpanded) {\n        // Stepper: Close self and descendants\n        this.expandedPaths.delete(pathStr);\n        descendants.forEach(descPath => this.expandedPaths.delete(descPath));\n        if (pathStr === this.selectedPath || descendants.includes(this.selectedPath)) {\n          this.selectedPath = null;\n        }\n      } else {\n        // Stepper: Open path to this item\n        this.expandedPaths = new Set(ancestors);\n        this.handleSelect(pathStr, item);\n        return;\n      }\n    } else {\n      if (this.expandedPaths.has(pathStr)) {\n        // Basic: Close self and descendants\n        this.expandedPaths.delete(pathStr);\n        descendants.forEach(descPath => this.expandedPaths.delete(descPath));\n        if (this.selectedPath === pathStr || descendants.includes(this.selectedPath)) {\n          this.selectedPath = null;\n        }\n      } else {\n        // Basic: Open only self\n        this.expandedPaths.add(pathStr);\n        this.handleSelect(pathStr, item);\n      }\n    }\n  };\n\n  private handleSelect = (pathStr: string, item: ITreeItem) => {\n    this.selectedPath = pathStr;\n    this.tkItemClick.emit(item);\n  };\n\n  /**\n   * Get all child keys recursively\n   */\n  private getAllChildKeys = (item: ITreeItem): string[] => {\n    const keys: string[] = [];\n    if (item.children && item.children.length > 0) {\n      item.children.forEach(child => {\n        keys.push(child.key);\n        keys.push(...this.getAllChildKeys(child));\n      });\n    }\n    return keys;\n  };\n\n  /**\n   * Handle checkbox change events.\n   */\n  private handleCheckboxChange = (checked: boolean, item: ITreeItem) => {\n    const childKeys = this.getAllChildKeys(item);\n\n    if (checked) {\n      // Add current item and all children\n      this.value = [...(this.value || []), item.key, ...childKeys];\n    } else {\n      // Remove current item and all children\n      this.value = this.value?.filter(key => key !== item.key && !childKeys.includes(key));\n    }\n    this.tkChange.emit(this.value);\n  };\n\n  /**\n   * Check if all child nodes are selected and return checkbox state\n   */\n  private getCheckboxState = (item: ITreeItem): { checked: boolean; indeterminate: boolean } => {\n    const isDirectlySelected = this.value?.includes(item.key) || false;\n\n    if (!item.children || item.children.length === 0) {\n      return { checked: isDirectlySelected, indeterminate: false };\n    }\n\n    const childStates = item.children.map(child => this.getCheckboxState(child));\n    const checkedChildren = childStates.filter(state => state.checked || state.indeterminate);\n    const allChecked = childStates.every(state => state.checked);\n\n    if (allChecked && checkedChildren.length === item.children.length) {\n      return { checked: true, indeterminate: false };\n    } else if (checkedChildren.length > 0) {\n      return { checked: false, indeterminate: true };\n    } else {\n      return { checked: isDirectlySelected, indeterminate: false };\n    }\n  };\n\n  /**\n   * Handle item click events.\n   */\n  private handleItemClick = (pathStr: string, item: ITreeItem, isDirectory: boolean, isDisabled: boolean) => {\n    if (this.disabled || isDisabled) return;\n    if (isDirectory) {\n      this.handleToggleUnified(pathStr, item);\n    } else {\n      this.handleSelect(pathStr, item);\n    }\n  };\n\n  private renderItem = (item: ITreeItem, basePath: string = '', index: number, depth: number = 0) => {\n    const pathStr = basePath ? `${basePath}-${index}` : `${index}`;\n    const isDirectory = !!(item.children && item.children.length > 0);\n    const isExpanded = this.expandedPaths.has(pathStr);\n    const isSelected = this.selectedPath === pathStr;\n    const isDisabled = this.disabled || item.disabled;\n\n    const nodeClass = classNames('tk-tree-view', 'node', {\n      directory: isDirectory,\n      file: !isDirectory,\n      expanded: isExpanded,\n      selected: isSelected,\n      disabled: isDisabled,\n    });\n\n    return (\n      <div class={nodeClass}>\n        {this.showPointer && (isExpanded || isSelected) && <span class={classNames('tk-tree-view', 'pointer', this.size)}></span>}\n        <span\n          class={classNames(\n            'tk-tree-view',\n            'label',\n            {\n              selected: isSelected,\n              disabled: isDisabled,\n            },\n            this.size,\n          )}\n          onClick={() => {\n            this.handleItemClick(pathStr, item, isDirectory, isDisabled);\n          }}\n        >\n          {isDirectory && this.mode === 'basic' && <tk-icon variant={isSelected ? 'primary' : 'neutral'} icon={isExpanded ? 'arrow_drop_down' : 'arrow_right'} size={this.size} />}\n          {this.selectable && (\n            <tk-checkbox\n              value={this.getCheckboxState(item).checked}\n              indeterminate={this.getCheckboxState(item).indeterminate}\n              disabled={isDisabled}\n              onTk-change={e => {\n                e.stopPropagation();\n                this.handleCheckboxChange(e.detail, item);\n              }}\n            />\n          )}\n          {isDirectory && this.branchIcon && <tk-icon icon={this.branchIcon} variant={isSelected ? 'primary' : 'neutral'} size={this.size} />}\n          {!isDirectory && this.leafIcon && <tk-icon icon={this.leafIcon} variant={isSelected ? 'primary' : 'neutral'} size={this.size} />}\n          <span class={classNames('tk-tree-view', 'text', this.size)}>{item.label}</span>\n          {isDirectory && this.showBadge && (\n            <tk-badge\n              count={item.children?.length ?? 0}\n              size={this.size}\n              type={this.badgeOptions?.type ?? 'filledlight'}\n              variant={this.badgeOptions?.variant ?? 'neutral'}\n              rounded={this.badgeOptions?.rounded ?? true}\n              icon={this.badgeOptions?.icon}\n              iconPosition={this.badgeOptions?.iconPosition}\n            />\n          )}\n          {this.mode === 'stepper' && isDirectory && item.children && item.children.length > 0 && (\n            <tk-icon variant={isSelected ? 'primary' : 'neutral'} icon={!isExpanded ? 'keyboard_arrow_down' : 'keyboard_arrow_right'} size={this.size} />\n          )}\n        </span>\n        {this.mode === 'basic' && isDirectory && isExpanded && item.children && item.children.length > 0 && (\n          <div class={classNames('tk-tree-view', 'children')}>{item.children.map((child, childIndex) => this.renderItem(child, pathStr, childIndex, depth + 1))}</div>\n        )}\n      </div>\n    );\n  };\n\n  render() {\n    if (!this.items || !this.items.length) return null;\n\n    if (this.mode === 'stepper') {\n      const columns = this.getStepperColumns();\n      return (\n        <div class={classNames('tk-tree-view', 'stepper')}>\n          {columns.map((column, idx) => (\n            <div class={classNames('tk-tree-view', 'column', 'divided')} key={idx}>\n              {column.items.map((item, itemIndex) => this.renderItem(item, column.basePath, itemIndex))}\n            </div>\n          ))}\n        </div>\n      );\n    } else {\n      const rootClasses = classNames('tk-tree-view', this.type, { disabled: this.disabled });\n      return (\n        <div class={rootClasses}>\n          <div class={classNames('tk-tree-view', 'content')}>{this.items.map((item, index) => this.renderItem(item, '', index))}</div>\n        </div>\n      );\n    }\n  }\n}\n"],"version":3}