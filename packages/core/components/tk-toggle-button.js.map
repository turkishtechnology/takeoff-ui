{"file":"tk-toggle-button.js","mappings":";;;;;AAAA,MAAM,kBAAkB,GAAG,2yHAA2yH;;MCUzzHA,gBAAc,iBAAAC,kBAAA,CAAA,MAAA,cAAA,SAAAC,CAAA,CAAA;AAL3B,IAAA,WAAA,GAAA;;;;;AAiBE;;;AAGG;AACK,QAAA,IAAY,CAAA,YAAA,GAAqB,MAAM;AAE/C;;AAEG;AACK,QAAA,IAAK,CAAA,KAAA,GAAW,EAAE;AAO1B;;;AAGG;AACK,QAAA,IAAI,CAAA,IAAA,GAA+B,MAAM;AAEjD;;AAEG;AACK,QAAA,IAAO,CAAA,OAAA,GAA0B,SAAS;AAElD;;AAEG;AACK,QAAA,IAAI,CAAA,IAAA,GAA+D,QAAQ;AAOnF;;AAEG;AACqC,QAAA,IAAQ,CAAA,QAAA,GAAY,KAAK;AAMzD,QAAA,IAAA,CAAA,WAAW,GAAG,CAAC,CAAa,KAAI;AACtC,YAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,CAAC,CAAC,cAAc,EAAE;gBAClB,CAAC,CAAC,eAAe,EAAE;gBACnB;;YAEF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;AACrE,SAAC;AAiCF;IA/BS,UAAU,GAAA;AAChB,QAAA,MAAM,SAAS,GAAG,CAAA,sBAAA,EAAyB,IAAI,CAAC,IAAI,EAAE;AACtD,QAAA,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,MAAM,SAAS,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AACtG,YAAA,OAAO,CAAA,CAAA,SAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAa,SAAS,CAAA,CAAI;;AAEnC,QAAA,OAAO,IAAI;;IAGL,WAAW,GAAA;;AACjB,QAAA,IAAI,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,0CAAE,MAAM,IAAG,CAAC,EAAE;YAC1B,OAAO,YAAM,KAAK,EAAE,UAAU,CAAC,wBAAwB,EAAE,IAAI,CAAC,IAAI,CAAC,EAAG,EAAA,IAAI,CAAC,KAAK,CAAQ;;AAE1F,QAAA,OAAO,IAAI;;IAGb,MAAM,GAAA;AACJ,QAAA,MAAM,WAAW,GAAG,UAAU,CAAC,kBAAkB,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE;YACrF,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ;YACzC,QAAQ,EAAE,IAAI,CAAC,QAAQ;AACxB,SAAA,CAAC;QAEF,QACE,CAAQ,CAAA,QAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,WAAW,EAAA,EAC3E,IAAI,CAAC,YAAY,KAAK,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE,EACjD,IAAI,CAAC,WAAW,EAAE,EAClB,IAAI,CAAC,YAAY,KAAK,OAAO,IAAI,IAAI,CAAC,UAAU,EAAE,CAC5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["TkToggleButton","__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/tk-toggle-button/tk-toggle-button.scss?tag=tk-toggle-button&encapsulation=shadow","src/components/tk-toggle-button/tk-toggle-button.tsx"],"sourcesContent":[":host {\n  display: flex;\n  width: 100%;\n}\n\n.tk-toggle-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 1 0 auto;\n\n  border: 0px;\n  height: 32px;\n  padding: 10px 12px;\n  gap: 6px;\n  cursor: pointer;\n  border-radius: var(--radius-m-base, 8px);\n\n  background-color: transparent;\n\n  &.neutral {\n    &.filled {\n      &.selected {\n        background-color: var(--neutral-800);\n      }\n    }\n\n    &.outlined {\n      &.selected {\n        background-color: var(--neutral-50);\n        border: 1px solid var(--neutral-300);\n      }\n    }\n\n    &.text {\n      &.selected {\n        background-color: var(--static-light);\n      }\n    }\n\n    &.raised {\n      &.selected {\n        background-color: var(--neutral-800);\n        border: 1px solid var(--static-black);\n      }\n    }\n\n    &.filled-light {\n      &.selected {\n        background-color: var(--neutral-200);\n      }\n    }\n\n    &.filled.selected,\n    &.raised.selected {\n      .tk-toggle-button-label {\n        color: var(--neutral-50);\n      }\n      .tk-toggle-button-icon {\n        color: var(--neutral-50);\n      }\n    }\n\n    &.outlined.selected,\n    &.text.selected,\n    &.filled-light.selected {\n      .tk-toggle-button-label {\n        color: var(--neutral-800);\n      }\n      .tk-toggle-button-icon {\n        color: var(--neutral-800);\n      }\n    }\n  }\n\n  &.primary {\n    &.filled {\n      &.selected {\n        background-color: var(--primary-500);\n      }\n    }\n\n    &.outlined {\n      &.selected {\n        background-color: var(--neutral-50);\n        border: 1px solid var(--primary-300);\n      }\n    }\n\n    &.text {\n      &.selected {\n        background-color: var(--static-light);\n      }\n    }\n\n    &.raised {\n      &.selected {\n        background-color: var(--primary-500);\n        border: 1px solid var(--primary-sub-base);\n      }\n    }\n\n    &.filled-light {\n      &.selected {\n        background-color: var(--primary-50);\n      }\n    }\n\n    &.filled.selected,\n    &.raised.selected {\n      .tk-toggle-button-label {\n        color: var(--static-white);\n      }\n      .tk-toggle-button-icon {\n        color: var(--static-white);\n      }\n    }\n\n    &.outlined.selected,\n    &.text.selected,\n    &.filled-light.selected {\n      .tk-toggle-button-label {\n        color: var(--primary-500);\n      }\n      .tk-toggle-button-icon {\n        color: var(--primary-500);\n      }\n    }\n  }\n\n  .tk-toggle-button-label {\n    color: var(--text-base);\n    font-family: var(--body-m-base-font, 'Geologica', sans-serif);\n    font-weight: 400;\n    font-style: normal;\n\n    &.large {\n      line-height: var(--body-m-base-line-height, 24px);\n      font-size: var(--body-m-base-size, 16px);\n    }\n\n    &.base {\n      line-height: var(--body-m-base-line-height, 20px);\n      font-size: var(--body-m-base-size, 14px);\n    }\n\n    &.small {\n      line-height: var(--body-m-base-line-height, 28px);\n      font-size: var(--body-m-base-size, 12px);\n    }\n  }\n\n  .tk-toggle-button-icon {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    justify-content: center;\n    color: var(--text-base);\n\n    &.small {\n      width: 20px;\n      height: 20px;\n    }\n\n    &.base {\n      width: 24px;\n      height: 24px;\n    }\n\n    &.large {\n      width: 24px;\n      height: 24px;\n    }\n  }\n\n  &.small {\n    height: 24px;\n  }\n\n  &.base {\n    height: 32px;\n  }\n\n  &.large {\n    height: 40px;\n    padding: 12px 14px;\n    gap: 8px;\n  }\n\n  &.rounded {\n    border-radius: 999px;\n  }\n\n  &:hover {\n    .tk-toggle-button-icon,\n    .tk-toggle-button-label {\n      color: var(--text-darkest);\n    }\n  }\n  &.disabled {\n    .tk-toggle-button-icon,\n    .tk-toggle-button-label {\n      color: var(--text-sub-base);\n    }\n  }\n}\n","import { Component, ComponentInterface, Element, Prop, h, Event, EventEmitter } from '@stencil/core';\nimport classNames from 'classnames';\nimport { IIconOptions } from '../../global/interfaces/IIconOptions';\nimport { getIconElementProps } from '../../utils/icon-props';\n\n@Component({\n  tag: 'tk-toggle-button',\n  styleUrl: 'tk-toggle-button.scss',\n  shadow: true,\n})\nexport class TkToggleButton implements ComponentInterface {\n  @Element() el: HTMLTkToggleButtonElement;\n\n  /**\n   * Disables the button, preventing user interaction.\n   */\n  @Prop() disabled: boolean;\n  /**\n   * Specifies a material icon name to be displayed.\n   */\n  @Prop() icon?: string | IIconOptions;\n\n  /**\n   * Defines the position of the icon.\n   * @defaultValue 'left'\n   */\n  @Prop() iconPosition: 'left' | 'right' = 'left';\n\n  /**\n   * Label text displayed inside the button.\n   */\n  @Prop() label: string = '';\n\n  /**\n   * Makes the button round with an icon-only style.\n   */\n  @Prop() rounded: boolean;\n\n  /**\n   * Sets size for the component.\n   * @defaultValue 'base'\n   */\n  @Prop() size: 'large' | 'base' | 'small' = 'base';\n\n  /**\n   * Determines the button's variant for different styles.\n   */\n  @Prop() variant: 'primary' | 'neutral' = 'neutral';\n\n  /**\n   * The value of the type toggle button.\n   */\n  @Prop() type: 'filled' | 'outlined' | 'text' | 'raised' | 'filled-light' = 'filled';\n\n  /**\n   * The value of the toggle button.\n   */\n  @Prop() value?: any;\n\n  /**\n   * Whether the button is selected.\n   */\n  @Prop({ mutable: true, reflect: true }) selected: boolean = false;\n  /**\n   * Emitted when the toggle button is toggled.\n   */\n  @Event({ eventName: 'tk-toggle' }) tkToggle!: EventEmitter<any>;\n\n  private handleClick = (e: MouseEvent) => {\n    if (this.disabled) {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n    this.tkToggle.emit({ value: this.value, selected: !this.selected });\n  };\n\n  private renderIcon() {\n    const iconClass = `tk-toggle-button-icon ${this.size}`;\n    if (this.icon) {\n      const iconProps = getIconElementProps(this.icon, { size: this.size, class: iconClass, variant: null });\n      return <tk-icon {...iconProps} />;\n    }\n    return null;\n  }\n\n  private renderLabel() {\n    if (this.label?.length > 0) {\n      return <span class={classNames('tk-toggle-button-label', this.size)}>{this.label}</span>;\n    }\n    return null;\n  }\n\n  render() {\n    const rootClasses = classNames('tk-toggle-button', this.variant, this.type, this.size, {\n      rounded: this.rounded,\n      selected: this.selected && !this.disabled,\n      disabled: this.disabled,\n    });\n\n    return (\n      <button class={rootClasses} disabled={this.disabled} onClick={this.handleClick}>\n        {this.iconPosition === 'left' && this.renderIcon()}\n        {this.renderLabel()}\n        {this.iconPosition === 'right' && this.renderIcon()}\n      </button>\n    );\n  }\n}\n"],"version":3}