{"file":"tk-toggle-button-group.js","mappings":";;;AAAA,MAAM,uBAAuB,GAAG,gnBAAgnB;;MCcnoBA,qBAAmB,iBAAAC,kBAAA,CAAA,MAAA,mBAAA,SAAAC,CAAA,CAAA;AALhC,IAAA,WAAA,GAAA;;;;;AASE;;AAEG;AACK,QAAA,IAAI,CAAA,IAAA,GAAkC,OAAO;AACrD;;AAEG;AACK,QAAA,IAAO,CAAA,OAAA,GAAa,KAAK;AAejC;;AAEG;AACK,QAAA,IAAS,CAAA,SAAA,GAA8B,YAAY;AAuD5D;IAvEC,cAAc,GAAA;QACZ,IAAI,CAAC,kBAAkB,EAAE;;IAO3B,YAAY,GAAA;QACV,IAAI,CAAC,cAAc,EAAE;QACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;;IAahC,iBAAiB,GAAA;QACf,IAAI,CAAC,kBAAkB,EAAE;;IAGnB,kBAAkB,GAAA;QACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,kBAAkB,CAAC;QAChE,IAAI,CAAC,cAAc,EAAE;AAErB,QAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,IAAG;AAC/B,YAAA,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO;AAC3B,YAAA,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClE,SAAC,CAAC;;IAGI,cAAc,GAAA;;AACpB,QAAA,IAAI,CAAA,CAAA,EAAA,GAAA,IAAI,CAAC,YAAY,0CAAE,MAAM,IAAG,CAAC,EAAE;AACjC,YAAA,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,IAAG;AAC/B,gBAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,oBAAA,IAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,wBAAA,IAAI,CAAC,QAAQ,GAAG,KAAK;AACrB,wBAAA,IAAI,CAAC,KAAK,GAAG,SAAS;;oBAExB;;gBAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK;AAC1C,aAAC,CAAC;;;AAIE,IAAA,YAAY,CAAC,CAAC,EAAA;AACpB,QAAA,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,MAAM;AAC1B,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK;QAClB,IAAI,CAAC,cAAc,EAAE;;IAGvB,MAAM,GAAA;QACJ,MAAM,YAAY,GAAG,UAAU,CAAC,wBAAwB,EAAE,IAAI,CAAC,IAAI,EAAE;YACnE,OAAO,EAAE,IAAI,CAAC,OAAO;AACrB,YAAA,QAAQ,EAAE,IAAI,CAAC,SAAS,KAAK,UAAU;AACvC,YAAA,UAAU,EAAE,IAAI,CAAC,SAAS,KAAK,YAAY;AAC5C,SAAA,CAAC;AAEF,QAAA,QACE,CAAA,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAK,KAAK,EAAE,YAAY,EAAA,EACtB,CAAA,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAM,YAAY,EAAE,MAAM,IAAI,CAAC,kBAAkB,EAAE,EAAA,CAAS,CACxD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["TkToggleButtonGroup","__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/tk-toggle-button/tk-toggle-button-group.scss?tag=tk-toggle-button-group&encapsulation=shadow","src/components/tk-toggle-button/tk-toggle-button-group.tsx"],"sourcesContent":[".tk-toggle-button-group {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  padding: 4px;\n  align-self: stretch;\n  background: var(--static-Light, #fff);\n  border-radius: 12px;\n\n  &.light {\n    border: 1px solid var(--border-light, #e1e4ea);\n    background: var(--background-lightest, #f9fafc);\n  }\n\n  &.divided {\n    border: 1px solid var(--border-light, #e1e4ea);\n  }\n\n  &.horizontal {\n    flex-direction: row;\n\n    &.rounded {\n      border-radius: 999px;\n    }\n  }\n\n  &.vertical {\n    flex-direction: column;\n\n    &.rounded {\n      border-radius: 24px;\n    }\n  }\n}\n","import { Component, ComponentInterface, Element, Prop, State, Watch, Event, EventEmitter, h } from '@stencil/core';\nimport classNames from 'classnames';\n\n/**\n * TkToggleButtonGroup is a component that allows you to create a group of toggle buttons.\n * @react `import { TkToggleButtonGroup, TkToggleButton } from '@takeoff-ui/react'`\n * @vue `import { TkToggleButtonGroup, TkToggleButton } from '@takeoff-ui/vue'`\n * @angular `import { TkToggleButtonGroup, TkToggleButton } from '@takeoff-ui/angular'`\n */\n@Component({\n  tag: 'tk-toggle-button-group',\n  styleUrl: 'tk-toggle-button-group.scss',\n  shadow: true,\n})\nexport class TkToggleButtonGroup implements ComponentInterface {\n  @Element() el: HTMLTkToggleButtonGroupElement;\n  @State() slottedItems: NodeListOf<HTMLTkToggleButtonElement>;\n\n  /**\n   * The value type of the toggle button group.\n   */\n  @Prop() type: 'basic' | 'divided' | 'light' = 'basic';\n  /**\n   * The value of the rounded toggle button group.\n   */\n  @Prop() rounded?: boolean = false;\n  @Watch('rounded')\n  roundedChanged() {\n    this.updateSlottedItems();\n  }\n  /**\n   * The value of the selected toggle button.\n   */\n  @Prop({ mutable: true }) value?: any;\n  @Watch('value')\n  valueChanged() {\n    this.updateSelected();\n    this.tkChange.emit(this.value);\n  }\n\n  /**\n   * The direction of the toggle button group.\n   */\n  @Prop() direction: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Emitted when the selected value changes.\n   */\n  @Event({ eventName: 'tk-change' }) tkChange!: EventEmitter<any>;\n\n  componentWillLoad() {\n    this.updateSlottedItems();\n  }\n\n  private updateSlottedItems() {\n    this.slottedItems = this.el.querySelectorAll('tk-toggle-button');\n    this.updateSelected();\n\n    this.slottedItems.forEach(item => {\n      item.rounded = this.rounded;\n      item.addEventListener('tk-toggle', this.handleToggle.bind(this));\n    });\n  }\n\n  private updateSelected() {\n    if (this.slottedItems?.length > 0) {\n      this.slottedItems.forEach(item => {\n        if (item.disabled) {\n          if (item.selected) {\n            item.selected = false;\n            item.value = undefined;\n          }\n          return;\n        }\n        item.selected = this.value == item.value;\n      });\n    }\n  }\n\n  private handleToggle(e) {\n    const { value } = e.detail;\n    this.value = value;\n    this.updateSelected();\n  }\n\n  render() {\n    const groupClasses = classNames('tk-toggle-button-group', this.type, {\n      rounded: this.rounded,\n      vertical: this.direction === 'vertical',\n      horizontal: this.direction === 'horizontal',\n    });\n\n    return (\n      <div class={groupClasses}>\n        <slot onSlotchange={() => this.updateSlottedItems()}></slot>\n      </div>\n    );\n  }\n}\n"],"version":3}