{"file":"tk-step.js","mappings":";;AAAA,MAAM,UAAU,GAAG,sBAAsB;;MCW5BA,QAAM,iBAAAC,kBAAA,CAAA,MAAA,MAAA,SAAAC,CAAA,CAAA;AALnB,IAAA,WAAA,GAAA;;;AA2CE;;AAEG;AACK,QAAA,IAAQ,CAAA,QAAA,GAAY,KAAK;AAEjC;;AAEG;AACK,QAAA,IAAK,CAAA,KAAA,GAAY,KAAK;AAE9B;;AAEG;AACK,QAAA,IAAQ,CAAA,QAAA,GAAY,KAAK;AAOjC;;AAEG;AACK,QAAA,IAAW,CAAA,WAAA,GAAY,IAAI;AAEnC;;;AAGG;AACK,QAAA,IAAa,CAAA,aAAA,GAAwB,UAAU;AAEvD;;;AAGG;AACK,QAAA,IAAQ,CAAA,QAAA,GAAuB,OAAO;AAE9C;;AAEG;AACK,QAAA,IAAQ,CAAA,QAAA,GAAY,KAAK;AASlC;IAPC,MAAM,GAAA;QACJ,QACE,EAAC,IAAI,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,EACH,CAAa,CAAA,MAAA,EAAA,EAAA,GAAA,EAAA,0CAAA,EAAA,CAAA,CACR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["TkStep","__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/tk-stepper/tk-step.scss?tag=tk-step","src/components/tk-stepper/tk-step.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, ComponentInterface, h, Prop, Host, Element } from '@stencil/core';\nimport { IIconOptions } from '../../global/interfaces/IIconOptions';\n\n/**\n * TkStep sub-component for individual steps in TkStepper.\n */\n@Component({\n  tag: 'tk-step',\n  styleUrl: 'tk-step.scss',\n  shadow: false,\n})\nexport class TkStep implements ComponentInterface {\n  @Element() el: HTMLTkStepElement;\n\n  /**\n   * The header text to be displayed for the step.\n   */\n  @Prop() header: string;\n\n  /**\n   * Optional subheader text to provide additional context for the step.\n   */\n  @Prop() subheader?: string;\n\n  /**\n   * Icon to be displayed for the step. Can be either a string (icon name) or an IIconOptions object.\n   */\n  @Prop() icon?: string | IIconOptions;\n\n  /**\n   * Specifies a material icon or icon options for completed steps.\n   */\n  @Prop() completeIcon?: string | IIconOptions;\n\n  /**\n   * Specifies a material icon or icon options for active steps.\n   */\n  @Prop() activeIcon?: string | IIconOptions;\n\n  /**\n   * Specifies a material icon or icon options for inactive steps.\n   */\n  @Prop() inactiveIcon?: string | IIconOptions;\n\n  /**\n   * Specifies a material icon or icon options for error steps.\n   */\n  @Prop() errorIcon?: string | IIconOptions;\n\n  /**\n   * Indicates if the step has been completed.\n   */\n  @Prop() complete: boolean = false;\n\n  /**\n   * Indicates if the step has encountered an error.\n   */\n  @Prop() error: boolean = false;\n\n  /**\n   * Indicates if the step is currently active.\n   */\n  @Prop() isActive: boolean = false;\n\n  /**\n   * The index of the step in the stepper.\n   */\n  @Prop() index: number;\n\n  /**\n   * Whether the step is clickable.\n   */\n  @Prop() isClickable: boolean = true;\n\n  /**\n   * Controls the label position of the step.\n   * @defaultValue 'non-flip'\n   */\n  @Prop() labelPosition: 'flip' | 'non-flip' = 'non-flip';\n\n  /**\n   * Controls the step mode of the stepper component.\n   * @defaultValue 'basic'\n   */\n  @Prop() stepMode: 'basic' | 'number' = 'basic';\n\n  /**\n   * Indicates if the step is disabled (cannot be selected or interacted with).\n   */\n  @Prop() disabled: boolean = false;\n\n  render() {\n    return (\n      <Host>\n        <slot></slot>\n      </Host>\n    );\n  }\n}\n"],"version":3}