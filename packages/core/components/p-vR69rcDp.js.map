{"file":"p-vR69rcDp.js","mappings":";;;AAAA,MAAM,SAAS,GAAG,qiIAAqiI;;MCc1iI,MAAM,iBAAAA,kBAAA,CAAA,MAAA,MAAA,SAAAC,CAAA,CAAA;AAJnB,IAAA,WAAA,GAAA;;;AAOE;;;AAGG;AACK,QAAA,IAAI,CAAA,IAAA,GAAY,KAAK;AAE7B;;;AAGG;AACK,QAAA,IAAO,CAAA,OAAA,GAA8F,SAAS;AAEtH;;;AAGG;AACK,QAAA,IAAI,CAAA,IAAA,GAA4E,MAAM;AAgC9F;;AAEG;AACK,QAAA,IAAQ,CAAA,QAAA,GAAqC,UAAU;AAE/D;;;AAGG;AACK,QAAA,IAAO,CAAA,OAAA,GAAiB,GAAG;AAE3B,QAAA,IAAa,CAAA,aAAA,GAAG,MAAK;YAC3B,MAAM,KAAK,GAA2B,EAAE;AACxC,YAAA,IAAI,IAAI,CAAC,KAAK,EAAE;AACd,gBAAA,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK;;AACnB,iBAAA,IAAI,IAAI,CAAC,SAAS,EAAE;AACzB,gBAAA,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS;;AAE9B,YAAA,IAAI,IAAI,CAAC,IAAI,EAAE;AACb,gBAAA,IAAI,IAAI,CAAC,WAAW,EAAE;AACpB,oBAAA,KAAK,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW;;AAEtC,gBAAA,IAAI,IAAI,CAAC,eAAe,EAAE;AACxB,oBAAA,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe;;;YAGhD,OAAO,EAAE,KAAK,EAAE;AAClB,SAAC;AA+BF;IA7BC,MAAM,GAAA;QACJ,MAAM,WAAW,GAAG,UAAU,CAAC,CAAA,iBAAA,EAAoB,IAAI,CAAC,QAAQ,CAAA,CAAE,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,IAAI,CAAA,QAAA,EAAW,IAAI,CAAC,OAAO,CAAA,CAAE,EAAE,CAAA,QAAA,EAAW,IAAI,CAAC,IAAI,CAAA,CAAE,EAAE;YAChJ,cAAc,EAAE,IAAI,CAAC,IAAI;YACzB,MAAM,EAAE,IAAI,CAAC,IAAI;AAClB,SAAA,CAAC;AAEF,QAAA,MAAM,SAAS,GACb,MAAA,CAAA,MAAA,CAAA,EAAA,KAAK,EAAE,WAAW,EACf,EAAA,IAAI,CAAC,aAAa,EAAE,CACxB;AAED,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO;AAE5B,QAAA,MAAM,WAAW,GAAG,CAAA,CAAC,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAK,SAAS,CAAA,EAAG,IAAI,CAAC,IAAI,CAAW;AAEjE,QAAA,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,QACE,CACE,CAAA,KAAA,EAAA,EAAA,KAAK,EAAC,wBAAwB,EAC9B,KAAK,EAAE;oBACL,WAAW,EAAE,IAAI,CAAC,WAAW;AAC9B,iBAAA,EAEA,EAAA,WAAW,CACR;;AAGV,QAAA,OAAO,WAAW;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["__stencil_proxyCustomElement","HTMLElement"],"sources":["src/components/tk-icon/tk-icon.scss?tag=tk-icon","src/components/tk-icon/tk-icon.tsx"],"sourcesContent":["tk-icon {\n  display: inline-flex;\n}\n\n.tk-icon {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n\n  &.tk-icon-xsmall {\n    font-size: var(--size-xs);\n  }\n\n  &.tk-icon-small {\n    font-size: var(--size-sm);\n  }\n\n  &.tk-icon-base {\n    font-size: var(--size-base);\n  }\n\n  &.tk-icon-medium {\n    font-size: var(--size-xl);\n  }\n\n  &.tk-icon-large {\n    font-size: var(--size-2xl);\n  }\n\n  &.tk-icon-xlarge {\n    font-size: var(--size-3xl);\n  }\n\n  &.tk-icon-xxlarge {\n    font-size: var(--size-4xl);\n  }\n\n  &.tk-icon-primary {\n    color: var(--primary-dark);\n  }\n\n  &.tk-icon-secondary {\n    color: var(--secondary-dark);\n  }\n\n  &.tk-icon-neutral {\n    color: var(--background-dark);\n  }\n\n  &.tk-icon-info {\n    color: var(--states-info-dark);\n  }\n\n  &.tk-icon-success {\n    color: var(--states-success-dark);\n  }\n\n  &.tk-icon-danger {\n    color: var(--states-danger-dark);\n  }\n\n  &.tk-icon-warning {\n    color: var(--states-warning-dark);\n  }\n\n  &.tk-icon-white {\n    color: var(--secondary-sub-base);\n  }\n\n  &.tk-icon-sign {\n    background-color: var(--background-lightest);\n\n    &.tk-icon-xsmall {\n      border: 1px solid;\n      border-radius: var(--radius-xs);\n      padding: 1px;\n    }\n\n    &.tk-icon-small {\n      border: 1px solid;\n      border-radius: var(--radius-s);\n      padding: 2px;\n    }\n\n    &.tk-icon-base {\n      border: 1px solid;\n      border-radius: var(--radius-m-base);\n      padding: 4px;\n    }\n\n    &.tk-icon-medium {\n      border: 1px solid;\n      border-radius: var(--radius-m-base);\n      padding: 4px;\n    }\n\n    &.tk-icon-large {\n      border: 1px solid;\n      border-radius: var(--radius-l);\n      padding: 6px;\n    }\n\n    &.tk-icon-xlarge {\n      border: 1px solid;\n      border-radius: var(--radius-l);\n      padding: 6px;\n    }\n\n    &.tk-icon-xxlarge {\n      border: 1px solid;\n      border-radius: var(--radius-l);\n      padding: 8px;\n    }\n\n    &.tk-icon-primary {\n      border-color: var(--primary-sub-base);\n    }\n\n    &.tk-icon-secondary {\n      border-color: var(--secondary-sub-base);\n    }\n\n    &.tk-icon-neutral {\n      border-color: var(--background-sub-base);\n    }\n\n    &.tk-icon-info {\n      border-color: var(--states-info-sub-base);\n    }\n\n    &.tk-icon-success {\n      border-color: var(--states-success-sub-base);\n    }\n\n    &.tk-icon-danger {\n      border-color: var(--states-danger-sub-base);\n    }\n\n    &.tk-icon-warning {\n      border-color: var(--states-warning-sub-base);\n    }\n\n    &.tk-icon-white {\n      border-color: var(--secondary-light);\n    }\n  }\n}\n","import { Component, Prop, Element, h, ComponentInterface } from '@stencil/core';\nimport classNames from 'classnames';\n/**\n * The TkIcon component allows you to create a icon for adding visual information. It is also often useful in combination with other elements.\n * This component uses Google's Material Symbols icons. For a complete list of available icon names, please visit:\n * https://fonts.google.com/icons?icon.set=Material+Symbols\n * @react `import { TkIcon } from '@takeoff-ui/react'`\n * @vue `import { TkIcon } from '@takeoff-ui/vue'`\n * @angular `import { TkIcon } from '@takeoff-ui/angular'`\n */\n@Component({\n  tag: 'tk-icon',\n  styleUrl: 'tk-icon.scss',\n})\nexport class TkIcon implements ComponentInterface {\n  @Element() el: HTMLTkIconElement;\n\n  /**\n   * Controls whether the icon is shown as a sign (previously 'card' type)\n   * @defaultValue false\n   */\n  @Prop() sign: boolean = false;\n\n  /**\n   * The variant of the icon.\n   * @defaultValue 'primary'\n   */\n  @Prop() variant: 'primary' | 'secondary' | 'neutral' | 'info' | 'success' | 'danger' | 'warning' | 'white' = 'primary';\n\n  /**\n   * Sets size for the component.\n   * @defaultValue 'base'\n   */\n  @Prop() size: 'xxlarge' | 'xlarge' | 'large' | 'medium' | 'base' | 'small' | 'xsmall' = 'base';\n\n  /**\n   * Indicates whether the icon should be filled\n   */\n  @Prop() fill?: boolean;\n\n  /**\n   * The color of the icon\n   */\n  @Prop() color?: string;\n\n  /**\n   * The color of the icon (custom variant)\n   */\n  @Prop() iconColor?: string;\n\n  /**\n   * The border color of the sign (custom variant)\n   */\n  @Prop() borderColor?: string;\n\n  /**\n   * The background color of the sign (custom variant)\n   */\n  @Prop() backgroundColor?: string;\n\n  /**\n   * Specifies a material icon.\n   */\n  @Prop() icon: string;\n\n  /**\n   * Specifies the type of the icon to be displayed.\n   */\n  @Prop() iconType: 'rounded' | 'outlined' | 'sharp' = 'outlined';\n\n  /**\n   * The HTML tag to use for the icon element.\n   * @defaultValue 'i'\n   */\n  @Prop() iconTag: 'i' | 'span' = 'i';\n\n  private getIconStyles = () => {\n    const style: Record<string, string> = {};\n    if (this.color) {\n      style.color = this.color;\n    } else if (this.iconColor) {\n      style.color = this.iconColor;\n    }\n    if (this.sign) {\n      if (this.borderColor) {\n        style.borderColor = this.borderColor;\n      }\n      if (this.backgroundColor) {\n        style.backgroundColor = this.backgroundColor;\n      }\n    }\n    return { style };\n  };\n\n  render() {\n    const iconClasses = classNames(`material-symbols-${this.iconType}`, 'tk-icon', this.variant && `tk-icon-${this.variant}`, `tk-icon-${this.size}`, {\n      'tk-icon-sign': this.sign,\n      'fill': this.fill,\n    });\n\n    const iconProps = {\n      class: iconClasses,\n      ...this.getIconStyles(),\n    };\n\n    const IconTag = this.iconTag;\n\n    const iconElement = <IconTag {...iconProps}>{this.icon}</IconTag>;\n\n    if (this.sign) {\n      return (\n        <div\n          class=\"tk-icon-sign-container\"\n          style={{\n            borderColor: this.borderColor,\n          }}\n        >\n          {iconElement}\n        </div>\n      );\n    }\n    return iconElement;\n  }\n}\n"],"version":3}