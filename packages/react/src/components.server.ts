/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 * Do __not__ import components from this file as server side rendered components
 * may not hydrate due to missing Stencil runtime. Instead, import these components through the generated 'components.ts'
 * file that re-exports all components with the 'use client' directive.
 */

/* eslint-disable */

import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent, createSSRComponent } from '@stencil/react-output-target/runtime';
import {
  type IAccordionItemSelect,
  type IDateSelection,
  type IStepClickDetail,
  type ITableCellEdit,
  type ITableRequest,
  type ITreeItem,
  type TkAccordionCustomEvent,
  type TkButtonCustomEvent,
  type TkDatepickerCustomEvent,
  type TkStepperCustomEvent,
  type TkTableCustomEvent,
  type TkTextareaCustomEvent,
  type TkTreeViewCustomEvent,
  type TkUploadCustomEvent,
} from '@takeoff-ui/core';
import { TkAccordionItem as TkAccordionItemElement, defineCustomElement as defineTkAccordionItem } from '@takeoff-ui/core/components/tk-accordion-item.js';
import { TkAccordion as TkAccordionElement, defineCustomElement as defineTkAccordion } from '@takeoff-ui/core/components/tk-accordion.js';
import { TkAlert as TkAlertElement, defineCustomElement as defineTkAlert } from '@takeoff-ui/core/components/tk-alert.js';
import { TkAvatarGroup as TkAvatarGroupElement, defineCustomElement as defineTkAvatarGroup } from '@takeoff-ui/core/components/tk-avatar-group.js';
import { TkAvatar as TkAvatarElement, defineCustomElement as defineTkAvatar } from '@takeoff-ui/core/components/tk-avatar.js';
import { TkBadge as TkBadgeElement, defineCustomElement as defineTkBadge } from '@takeoff-ui/core/components/tk-badge.js';
import { TkBreadcrumbItem as TkBreadcrumbItemElement, defineCustomElement as defineTkBreadcrumbItem } from '@takeoff-ui/core/components/tk-breadcrumb-item.js';
import { TkBreadcrumb as TkBreadcrumbElement, defineCustomElement as defineTkBreadcrumb } from '@takeoff-ui/core/components/tk-breadcrumb.js';
import { TkButton as TkButtonElement, defineCustomElement as defineTkButton } from '@takeoff-ui/core/components/tk-button.js';
import { TkCard as TkCardElement, defineCustomElement as defineTkCard } from '@takeoff-ui/core/components/tk-card.js';
import { TkChart as TkChartElement, defineCustomElement as defineTkChart } from '@takeoff-ui/core/components/tk-chart.js';
import { TkCheckbox as TkCheckboxElement, defineCustomElement as defineTkCheckbox } from '@takeoff-ui/core/components/tk-checkbox.js';
import { TkChips as TkChipsElement, defineCustomElement as defineTkChips } from '@takeoff-ui/core/components/tk-chips.js';
import { TkCurrencyInput as TkCurrencyInputElement, defineCustomElement as defineTkCurrencyInput } from '@takeoff-ui/core/components/tk-currency-input.js';
import { TkDatepicker as TkDatepickerElement, defineCustomElement as defineTkDatepicker } from '@takeoff-ui/core/components/tk-datepicker.js';
import { TkDialog as TkDialogElement, defineCustomElement as defineTkDialog } from '@takeoff-ui/core/components/tk-dialog.js';
import { TkDivider as TkDividerElement, defineCustomElement as defineTkDivider } from '@takeoff-ui/core/components/tk-divider.js';
import { TkDrawer as TkDrawerElement, defineCustomElement as defineTkDrawer } from '@takeoff-ui/core/components/tk-drawer.js';
import { TkDropdown as TkDropdownElement, defineCustomElement as defineTkDropdown } from '@takeoff-ui/core/components/tk-dropdown.js';
import { TkEditor as TkEditorElement, defineCustomElement as defineTkEditor } from '@takeoff-ui/core/components/tk-editor.js';
import { TkIcon as TkIconElement, defineCustomElement as defineTkIcon } from '@takeoff-ui/core/components/tk-icon.js';
import { TkInput as TkInputElement, defineCustomElement as defineTkInput } from '@takeoff-ui/core/components/tk-input.js';
import { TkOrgChart as TkOrgChartElement, defineCustomElement as defineTkOrgChart } from '@takeoff-ui/core/components/tk-org-chart.js';
import { TkPagination as TkPaginationElement, defineCustomElement as defineTkPagination } from '@takeoff-ui/core/components/tk-pagination.js';
import { TkPhoneInput as TkPhoneInputElement, defineCustomElement as defineTkPhoneInput } from '@takeoff-ui/core/components/tk-phone-input.js';
import { TkPopover as TkPopoverElement, defineCustomElement as defineTkPopover } from '@takeoff-ui/core/components/tk-popover.js';
import { TkRadioGroup as TkRadioGroupElement, defineCustomElement as defineTkRadioGroup } from '@takeoff-ui/core/components/tk-radio-group.js';
import { TkRadio as TkRadioElement, defineCustomElement as defineTkRadio } from '@takeoff-ui/core/components/tk-radio.js';
import { TkRating as TkRatingElement, defineCustomElement as defineTkRating } from '@takeoff-ui/core/components/tk-rating.js';
import { TkSelect as TkSelectElement, defineCustomElement as defineTkSelect } from '@takeoff-ui/core/components/tk-select.js';
import { TkSlider as TkSliderElement, defineCustomElement as defineTkSlider } from '@takeoff-ui/core/components/tk-slider.js';
import { TkSpinner as TkSpinnerElement, defineCustomElement as defineTkSpinner } from '@takeoff-ui/core/components/tk-spinner.js';
import { TkStep as TkStepElement, defineCustomElement as defineTkStep } from '@takeoff-ui/core/components/tk-step.js';
import { TkStepper as TkStepperElement, defineCustomElement as defineTkStepper } from '@takeoff-ui/core/components/tk-stepper.js';
import { TkTable as TkTableElement, defineCustomElement as defineTkTable } from '@takeoff-ui/core/components/tk-table.js';
import { TkTabsItem as TkTabsItemElement, defineCustomElement as defineTkTabsItem } from '@takeoff-ui/core/components/tk-tabs-item.js';
import { TkTabs as TkTabsElement, defineCustomElement as defineTkTabs } from '@takeoff-ui/core/components/tk-tabs.js';
import { TkTextarea as TkTextareaElement, defineCustomElement as defineTkTextarea } from '@takeoff-ui/core/components/tk-textarea.js';
import { TkTimelineItem as TkTimelineItemElement, defineCustomElement as defineTkTimelineItem } from '@takeoff-ui/core/components/tk-timeline-item.js';
import { TkTimeline as TkTimelineElement, defineCustomElement as defineTkTimeline } from '@takeoff-ui/core/components/tk-timeline.js';
import { TkToggleButtonGroup as TkToggleButtonGroupElement, defineCustomElement as defineTkToggleButtonGroup } from '@takeoff-ui/core/components/tk-toggle-button-group.js';
import { TkToggleButton as TkToggleButtonElement, defineCustomElement as defineTkToggleButton } from '@takeoff-ui/core/components/tk-toggle-button.js';
import { TkToggle as TkToggleElement, defineCustomElement as defineTkToggle } from '@takeoff-ui/core/components/tk-toggle.js';
import { TkTooltip as TkTooltipElement, defineCustomElement as defineTkTooltip } from '@takeoff-ui/core/components/tk-tooltip.js';
import { TkTreeView as TkTreeViewElement, defineCustomElement as defineTkTreeView } from '@takeoff-ui/core/components/tk-tree-view.js';
import { TkUpload as TkUploadElement, defineCustomElement as defineTkUpload } from '@takeoff-ui/core/components/tk-upload.js';
import React from 'react';

type TkAccordionEvents = { onTkAccordionItemSelected: EventName<TkAccordionCustomEvent<IAccordionItemSelect>> };

export const TkAccordion: StencilReactComponent<TkAccordionElement, TkAccordionEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkAccordionElement, TkAccordionEvents>({
        tagName: 'tk-accordion',
        elementClass: TkAccordionElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkAccordionItemSelected: 'tkAccordionItemSelected' } as TkAccordionEvents,
        defineCustomElement: defineTkAccordion,
      })
    : /*@__PURE__*/ createSSRComponent<TkAccordionElement, TkAccordionEvents>({
        tagName: 'tk-accordion',
        properties: {
          activeIndex: 'active-index',
          allowMultiple: 'allow-multiple',
          arrowPosition: 'arrow-position',
          expandIcon: 'expand-icon',
          collapseIcon: 'collapse-icon',
          hideArrows: 'hide-arrows',
          type: 'type',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkAccordionItemEvents = NonNullable<unknown>;

export const TkAccordionItem: StencilReactComponent<TkAccordionItemElement, TkAccordionItemEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkAccordionItemElement, TkAccordionItemEvents>({
        tagName: 'tk-accordion-item',
        elementClass: TkAccordionItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkAccordionItemEvents,
        defineCustomElement: defineTkAccordionItem,
      })
    : /*@__PURE__*/ createSSRComponent<TkAccordionItemElement, TkAccordionItemEvents>({
        tagName: 'tk-accordion-item',
        properties: {
          active: 'active',
          itemKey: 'item-key',
          header: 'header',
          toggleItem: 'toggle-item',
          size: 'size',
          icon: 'icon',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkAlertEvents = NonNullable<unknown>;

export const TkAlert: StencilReactComponent<TkAlertElement, TkAlertEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkAlertElement, TkAlertEvents>({
        tagName: 'tk-alert',
        elementClass: TkAlertElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkAlertEvents,
        defineCustomElement: defineTkAlert,
      })
    : /*@__PURE__*/ createSSRComponent<TkAlertElement, TkAlertEvents>({
        tagName: 'tk-alert',
        properties: {
          variant: 'variant',
          header: 'header',
          message: 'message',
          icon: 'icon',
          iconSize: 'icon-size',
          alignItems: 'align-items',
          type: 'type',
          removable: 'removable',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkAvatarEvents = NonNullable<unknown>;

export const TkAvatar: StencilReactComponent<TkAvatarElement, TkAvatarEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkAvatarElement, TkAvatarEvents>({
        tagName: 'tk-avatar',
        elementClass: TkAvatarElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkAvatarEvents,
        defineCustomElement: defineTkAvatar,
      })
    : /*@__PURE__*/ createSSRComponent<TkAvatarElement, TkAvatarEvents>({
        tagName: 'tk-avatar',
        properties: {
          ariaLabelledby: 'aria-labelledby',
          background: 'background',
          badge: 'badge',
          badgeStatus: 'badge-status',
          image: 'image',
          label: 'label',
          name: 'name',
          rounded: 'rounded',
          variant: 'variant',
          size: 'size',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkAvatarGroupEvents = NonNullable<unknown>;

export const TkAvatarGroup: StencilReactComponent<TkAvatarGroupElement, TkAvatarGroupEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkAvatarGroupElement, TkAvatarGroupEvents>({
        tagName: 'tk-avatar-group',
        elementClass: TkAvatarGroupElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkAvatarGroupEvents,
        defineCustomElement: defineTkAvatarGroup,
      })
    : /*@__PURE__*/ createSSRComponent<TkAvatarGroupElement, TkAvatarGroupEvents>({
        tagName: 'tk-avatar-group',
        properties: { compact: 'compact' },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkBadgeEvents = NonNullable<unknown>;

export const TkBadge: StencilReactComponent<TkBadgeElement, TkBadgeEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkBadgeElement, TkBadgeEvents>({
        tagName: 'tk-badge',
        elementClass: TkBadgeElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkBadgeEvents,
        defineCustomElement: defineTkBadge,
      })
    : /*@__PURE__*/ createSSRComponent<TkBadgeElement, TkBadgeEvents>({
        tagName: 'tk-badge',
        properties: {
          dot: 'dot',
          type: 'type',
          icon: 'icon',
          iconPosition: 'icon-position',
          label: 'label',
          count: 'count',
          rounded: 'rounded',
          size: 'size',
          variant: 'variant',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkBreadcrumbEvents = NonNullable<unknown>;

export const TkBreadcrumb: StencilReactComponent<TkBreadcrumbElement, TkBreadcrumbEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkBreadcrumbElement, TkBreadcrumbEvents>({
        tagName: 'tk-breadcrumb',
        elementClass: TkBreadcrumbElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkBreadcrumbEvents,
        defineCustomElement: defineTkBreadcrumb,
      })
    : /*@__PURE__*/ createSSRComponent<TkBreadcrumbElement, TkBreadcrumbEvents>({
        tagName: 'tk-breadcrumb',
        properties: {
          model: 'model',
          separator: 'separator',
          separatorIcon: 'separator-icon',
          type: 'type',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkBreadcrumbItemEvents = NonNullable<unknown>;

export const TkBreadcrumbItem: StencilReactComponent<TkBreadcrumbItemElement, TkBreadcrumbItemEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkBreadcrumbItemElement, TkBreadcrumbItemEvents>({
        tagName: 'tk-breadcrumb-item',
        elementClass: TkBreadcrumbItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkBreadcrumbItemEvents,
        defineCustomElement: defineTkBreadcrumbItem,
      })
    : /*@__PURE__*/ createSSRComponent<TkBreadcrumbItemElement, TkBreadcrumbItemEvents>({
        tagName: 'tk-breadcrumb-item',
        properties: {
          href: 'href',
          icon: 'icon',
          label: 'label',
          isExternal: 'is-external',
          isCurrent: 'is-current',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkButtonEvents = { onTkClick: EventName<TkButtonCustomEvent<MouseEvent>> };

export const TkButton: StencilReactComponent<TkButtonElement, TkButtonEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkButtonElement, TkButtonEvents>({
        tagName: 'tk-button',
        elementClass: TkButtonElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkClick: 'tk-click' } as TkButtonEvents,
        defineCustomElement: defineTkButton,
      })
    : /*@__PURE__*/ createSSRComponent<TkButtonElement, TkButtonEvents>({
        tagName: 'tk-button',
        properties: {
          disabled: 'disabled',
          fullWidth: 'full-width',
          type: 'type',
          icon: 'icon',
          iconPosition: 'icon-position',
          href: 'href',
          target: 'target',
          underline: 'underline',
          label: 'label',
          loading: 'loading',
          rounded: 'rounded',
          size: 'size',
          mode: 'mode',
          variant: 'variant',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkCardEvents = NonNullable<unknown>;

export const TkCard: StencilReactComponent<TkCardElement, TkCardEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkCardElement, TkCardEvents>({
        tagName: 'tk-card',
        elementClass: TkCardElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkCardEvents,
        defineCustomElement: defineTkCard,
      })
    : /*@__PURE__*/ createSSRComponent<TkCardElement, TkCardEvents>({
        tagName: 'tk-card',
        properties: {
          imageOptions: 'image-options',
          showAvatar: 'show-avatar',
          avatarProps: 'avatar-props',
          hideHeader: 'hide-header',
          showMenuButton: 'show-menu-button',
          image: 'image',
          headerPosition: 'header-position',
          header: 'header',
          subheader: 'subheader',
          headerType: 'header-type',
          horizontal: 'horizontal',
          footerType: 'footer-type',
          enableHoverShadow: 'enable-hover-shadow',
          containerStyle: 'container-style',
          contentStyle: 'content-style',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkChartEvents = NonNullable<unknown>;

export const TkChart: StencilReactComponent<TkChartElement, TkChartEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkChartElement, TkChartEvents>({
        tagName: 'tk-chart',
        elementClass: TkChartElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkChartEvents,
        defineCustomElement: defineTkChart,
      })
    : /*@__PURE__*/ createSSRComponent<TkChartElement, TkChartEvents>({
        tagName: 'tk-chart',
        properties: {
          type: 'type',
          data: 'data',
          options: 'options',
          width: 'width',
          height: 'height',
          plugins: 'plugins',
          accessibilityLabel: 'accessibility-label',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkCheckboxEvents = { onTkChange: EventName<CustomEvent<boolean>> };

export const TkCheckbox: StencilReactComponent<TkCheckboxElement, TkCheckboxEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkCheckboxElement, TkCheckboxEvents>({
        tagName: 'tk-checkbox',
        elementClass: TkCheckboxElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkChange: 'tk-change' } as TkCheckboxEvents,
        defineCustomElement: defineTkCheckbox,
      })
    : /*@__PURE__*/ createSSRComponent<TkCheckboxElement, TkCheckboxEvents>({
        tagName: 'tk-checkbox',
        properties: {
          disabled: 'disabled',
          description: 'description',
          invalid: 'invalid',
          label: 'label',
          name: 'name',
          type: 'type',
          indeterminate: 'indeterminate',
          value: 'value',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkChipsEvents = { onTkRemove: EventName<CustomEvent<any>> };

export const TkChips: StencilReactComponent<TkChipsElement, TkChipsEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkChipsElement, TkChipsEvents>({
        tagName: 'tk-chips',
        elementClass: TkChipsElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkRemove: 'tk-remove' } as TkChipsEvents,
        defineCustomElement: defineTkChips,
      })
    : /*@__PURE__*/ createSSRComponent<TkChipsElement, TkChipsEvents>({
        tagName: 'tk-chips',
        properties: {
          disabled: 'disabled',
          type: 'type',
          icon: 'icon',
          label: 'label',
          removable: 'removable',
          autoSelfDestroy: 'auto-self-destroy',
          size: 'size',
          variant: 'variant',
          value: 'value',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkCurrencyInputEvents = {
  onTkChange: EventName<CustomEvent<any>>;
  onTkBlur: EventName<CustomEvent<void>>;
  onTkFocus: EventName<CustomEvent<void>>;
};

export const TkCurrencyInput: StencilReactComponent<TkCurrencyInputElement, TkCurrencyInputEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkCurrencyInputElement, TkCurrencyInputEvents>({
        tagName: 'tk-currency-input',
        elementClass: TkCurrencyInputElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkChange: 'tk-change',
          onTkBlur: 'tkBlur',
          onTkFocus: 'tkFocus',
        } as TkCurrencyInputEvents,
        defineCustomElement: defineTkCurrencyInput,
      })
    : /*@__PURE__*/ createSSRComponent<TkCurrencyInputElement, TkCurrencyInputEvents>({
        tagName: 'tk-currency-input',
        properties: {
          value: 'value',
          currencyList: 'currency-list',
          placeholder: 'placeholder',
          disabled: 'disabled',
          invalid: 'invalid',
          readonly: 'readonly',
          size: 'size',
          showAsterisk: 'show-asterisk',
          precision: 'precision',
          defaultCurrency: 'default-currency',
          allowNegative: 'allow-negative',
          decimalSeparator: 'decimal-separator',
          thousandsSeparator: 'thousands-separator',
          label: 'label',
          name: 'name',
          hint: 'hint',
          error: 'error',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkDatepickerEvents = {
  onTkInputChange: EventName<CustomEvent<string>>;
  onTkChange: EventName<TkDatepickerCustomEvent<IDateSelection | string>>;
};

export const TkDatepicker: StencilReactComponent<TkDatepickerElement, TkDatepickerEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkDatepickerElement, TkDatepickerEvents>({
        tagName: 'tk-datepicker',
        elementClass: TkDatepickerElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkInputChange: 'tk-input-change',
          onTkChange: 'tk-change',
        } as TkDatepickerEvents,
        defineCustomElement: defineTkDatepicker,
      })
    : /*@__PURE__*/ createSSRComponent<TkDatepickerElement, TkDatepickerEvents>({
        tagName: 'tk-datepicker',
        properties: {
          value: 'value',
          label: 'label',
          size: 'size',
          disabled: 'disabled',
          invalid: 'invalid',
          clearable: 'clearable',
          error: 'error',
          hint: 'hint',
          icon: 'icon',
          iconPosition: 'icon-position',
          minDate: 'min-date',
          maxDate: 'max-date',
          name: 'name',
          allowedDates: 'allowed-dates',
          disabledDates: 'disabled-dates',
          inline: 'inline',
          mode: 'mode',
          locale: 'locale',
          footerType: 'footer-type',
          dateFormat: 'date-format',
          disableMask: 'disable-mask',
          headerType: 'header-type',
          placeholder: 'placeholder',
          showAsterisk: 'show-asterisk',
          disabledWeekDays: 'disabled-week-days',
          showTimePicker: 'show-time-picker',
          minTime: 'min-time',
          maxTime: 'max-time',
          hourStep: 'hour-step',
          minuteStep: 'minute-step',
          timeFormat: 'time-format',
          firstDayOfWeekIndex: 'first-day-of-week-index',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkDialogEvents = {
  onTkClose: EventName<CustomEvent<void>>;
  onTkOpen: EventName<CustomEvent<void>>;
  onTkVisibleChange: EventName<CustomEvent<boolean>>;
};

export const TkDialog: StencilReactComponent<TkDialogElement, TkDialogEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkDialogElement, TkDialogEvents>({
        tagName: 'tk-dialog',
        elementClass: TkDialogElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkClose: 'tk-close',
          onTkOpen: 'tk-open',
          onTkVisibleChange: 'tk-visible-change',
        } as TkDialogEvents,
        defineCustomElement: defineTkDialog,
      })
    : /*@__PURE__*/ createSSRComponent<TkDialogElement, TkDialogEvents>({
        tagName: 'tk-dialog',
        properties: {
          visible: 'visible',
          header: 'header',
          headerType: 'header-type',
          showCloseButton: 'show-close-button',
          showHeader: 'show-header',
          showVariantSign: 'show-variant-sign',
          subheader: 'subheader',
          variant: 'variant',
          hideBackdrop: 'hide-backdrop',
          maskVariant: 'mask-variant',
          isMaskBlur: 'is-mask-blur',
          containerStyle: 'container-style',
          preventDismiss: 'prevent-dismiss',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkDividerEvents = NonNullable<unknown>;

export const TkDivider: StencilReactComponent<TkDividerElement, TkDividerEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkDividerElement, TkDividerEvents>({
        tagName: 'tk-divider',
        elementClass: TkDividerElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkDividerEvents,
        defineCustomElement: defineTkDivider,
      })
    : /*@__PURE__*/ createSSRComponent<TkDividerElement, TkDividerEvents>({
        tagName: 'tk-divider',
        properties: {
          orientation: 'orientation',
          mx: 'mx',
          my: 'my',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkDrawerEvents = {
  onTkDrawerClose: EventName<CustomEvent<void>>;
  onTkDrawerOpen: EventName<CustomEvent<void>>;
  onTkDrawerEnter: EventName<CustomEvent<void>>;
  onTkDrawerLeave: EventName<CustomEvent<void>>;
  onTkDrawerChange: EventName<CustomEvent<boolean>>;
};

export const TkDrawer: StencilReactComponent<TkDrawerElement, TkDrawerEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkDrawerElement, TkDrawerEvents>({
        tagName: 'tk-drawer',
        elementClass: TkDrawerElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkDrawerClose: 'tk-drawer-close',
          onTkDrawerOpen: 'tk-drawer-open',
          onTkDrawerEnter: 'tk-drawer-enter',
          onTkDrawerLeave: 'tk-drawer-leave',
          onTkDrawerChange: 'tk-drawer-change',
        } as TkDrawerEvents,
        defineCustomElement: defineTkDrawer,
      })
    : /*@__PURE__*/ createSSRComponent<TkDrawerElement, TkDrawerEvents>({
        tagName: 'tk-drawer',
        properties: {
          open: 'open',
          position: 'position',
          hideBackdrop: 'hide-backdrop',
          maskVariant: 'mask-variant',
          containerStyle: 'container-style',
          preventDismiss: 'prevent-dismiss',
          hideCloseIcon: 'hide-close-icon',
          unblockScroll: 'unblock-scroll',
          header: 'header',
          headerType: 'header-type',
          footerType: 'footer-type',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkDropdownEvents = { onTkItemClick: EventName<CustomEvent<any>> };

export const TkDropdown: StencilReactComponent<TkDropdownElement, TkDropdownEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkDropdownElement, TkDropdownEvents>({
        tagName: 'tk-dropdown',
        elementClass: TkDropdownElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkItemClick: 'tk-item-click' } as TkDropdownEvents,
        defineCustomElement: defineTkDropdown,
      })
    : /*@__PURE__*/ createSSRComponent<TkDropdownElement, TkDropdownEvents>({
        tagName: 'tk-dropdown',
        properties: {
          disabled: 'disabled',
          emptyMessage: 'empty-message',
          optionHtml: 'option-html',
          optionLabelKey: 'option-label-key',
          optionValueKey: 'option-value-key',
          groupNameKey: 'group-name-key',
          groupOptionsKey: 'group-options-key',
          options: 'options',
          optionsAlign: 'options-align',
          position: 'position',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkEditorEvents = {
  onTkChange: EventName<CustomEvent<string>>;
  onTkFocus: EventName<CustomEvent<void>>;
  onTkBlur: EventName<CustomEvent<void>>;
};

export const TkEditor: StencilReactComponent<TkEditorElement, TkEditorEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkEditorElement, TkEditorEvents>({
        tagName: 'tk-editor',
        elementClass: TkEditorElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkChange: 'tk-change',
          onTkFocus: 'tkFocus',
          onTkBlur: 'tkBlur',
        } as TkEditorEvents,
        defineCustomElement: defineTkEditor,
      })
    : /*@__PURE__*/ createSSRComponent<TkEditorElement, TkEditorEvents>({
        tagName: 'tk-editor',
        properties: {
          value: 'value',
          disabled: 'disabled',
          readonly: 'readonly',
          placeholder: 'placeholder',
          hideToolbar: 'hide-toolbar',
          contentStyle: 'content-style',
          extensions: 'extensions',
          customToolbarButtons: 'custom-toolbar-buttons',
          toolbar: 'toolbar',
          label: 'label',
          hint: 'hint',
          invalid: 'invalid',
          error: 'error',
          showAsterisk: 'show-asterisk',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkIconEvents = NonNullable<unknown>;

export const TkIcon: StencilReactComponent<TkIconElement, TkIconEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkIconElement, TkIconEvents>({
        tagName: 'tk-icon',
        elementClass: TkIconElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkIconEvents,
        defineCustomElement: defineTkIcon,
      })
    : /*@__PURE__*/ createSSRComponent<TkIconElement, TkIconEvents>({
        tagName: 'tk-icon',
        properties: {
          sign: 'sign',
          variant: 'variant',
          size: 'size',
          fill: 'fill',
          color: 'color',
          iconColor: 'icon-color',
          borderColor: 'border-color',
          backgroundColor: 'background-color',
          icon: 'icon',
          iconType: 'icon-type',
          iconTag: 'icon-tag',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkInputEvents = {
  onTkChange: EventName<CustomEvent<any>>;
  onTkBlur: EventName<CustomEvent<void>>;
  onTkFocus: EventName<CustomEvent<void>>;
  onTkClearClick: EventName<CustomEvent<void>>;
};

export const TkInput: StencilReactComponent<TkInputElement, TkInputEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkInputElement, TkInputEvents>({
        tagName: 'tk-input',
        elementClass: TkInputElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkChange: 'tk-change',
          onTkBlur: 'tk-blur',
          onTkFocus: 'tk-focus',
          onTkClearClick: 'tk-clear-click',
        } as TkInputEvents,
        defineCustomElement: defineTkInput,
      })
    : /*@__PURE__*/ createSSRComponent<TkInputElement, TkInputEvents>({
        tagName: 'tk-input',
        properties: {
          disabled: 'disabled',
          invalid: 'invalid',
          clearable: 'clearable',
          error: 'error',
          hint: 'hint',
          icon: 'icon',
          iconPosition: 'icon-position',
          label: 'label',
          pre: 'pre',
          maskOptions: 'mask-options',
          max: 'max',
          min: 'min',
          name: 'name',
          placeholder: 'placeholder',
          readonly: 'readonly',
          size: 'size',
          showSafetyStatus: 'show-safety-status',
          showAsterisk: 'show-asterisk',
          chipLabelKey: 'chip-label-key',
          chipOptions: 'chip-options',
          mode: 'mode',
          step: 'step',
          value: 'value',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkOrgChartEvents = { onTkNodeClick: EventName<CustomEvent<any>> };

export const TkOrgChart: StencilReactComponent<TkOrgChartElement, TkOrgChartEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkOrgChartElement, TkOrgChartEvents>({
        tagName: 'tk-org-chart',
        elementClass: TkOrgChartElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkNodeClick: 'tk-node-click' } as TkOrgChartEvents,
        defineCustomElement: defineTkOrgChart,
      })
    : /*@__PURE__*/ createSSRComponent<TkOrgChartElement, TkOrgChartEvents>({
        tagName: 'tk-org-chart',
        properties: {
          data: 'data',
          options: 'options',
          collapsible: 'collapsible',
          accessibilityLabel: 'accessibility-label',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkPaginationEvents = {
  onTkNextPage: EventName<CustomEvent<{ page: number }>>;
  onTkPageChange: EventName<CustomEvent<{ page: number; totalPages: number; startItem: number; endItem: number }>>;
  onTkPrevPage: EventName<CustomEvent<{ page: number }>>;
  onTkRowsPerPageChange: EventName<CustomEvent<number>>;
};

export const TkPagination: StencilReactComponent<TkPaginationElement, TkPaginationEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkPaginationElement, TkPaginationEvents>({
        tagName: 'tk-pagination',
        elementClass: TkPaginationElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkNextPage: 'tk-next-page',
          onTkPageChange: 'tk-page-change',
          onTkPrevPage: 'tk-prev-page',
          onTkRowsPerPageChange: 'tk-rows-per-page-change',
        } as TkPaginationEvents,
        defineCustomElement: defineTkPagination,
      })
    : /*@__PURE__*/ createSSRComponent<TkPaginationElement, TkPaginationEvents>({
        tagName: 'tk-pagination',
        properties: {
          rounded: 'rounded',
          rowsPerPage: 'rows-per-page',
          totalItems: 'total-items',
          rowsPerPageOptions: 'rows-per-page-options',
          type: 'type',
          mode: 'mode',
          currentPage: 'current-page',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkPhoneInputEvents = {
  onTkChange: EventName<CustomEvent<any>>;
  onTkBlur: EventName<CustomEvent<void>>;
  onTkFocus: EventName<CustomEvent<void>>;
};

export const TkPhoneInput: StencilReactComponent<TkPhoneInputElement, TkPhoneInputEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkPhoneInputElement, TkPhoneInputEvents>({
        tagName: 'tk-phone-input',
        elementClass: TkPhoneInputElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkChange: 'tk-change',
          onTkBlur: 'tk-blur',
          onTkFocus: 'tk-focus',
        } as TkPhoneInputEvents,
        defineCustomElement: defineTkPhoneInput,
      })
    : /*@__PURE__*/ createSSRComponent<TkPhoneInputElement, TkPhoneInputEvents>({
        tagName: 'tk-phone-input',
        properties: {
          value: 'value',
          label: 'label',
          countryList: 'country-list',
          disabled: 'disabled',
          readonly: 'readonly',
          invalid: 'invalid',
          defaultCountry: 'default-country',
          placeholder: 'placeholder',
          showAsterisk: 'show-asterisk',
          hint: 'hint',
          error: 'error',
          size: 'size',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkPopoverEvents = NonNullable<unknown>;

export const TkPopover: StencilReactComponent<TkPopoverElement, TkPopoverEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkPopoverElement, TkPopoverEvents>({
        tagName: 'tk-popover',
        elementClass: TkPopoverElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkPopoverEvents,
        defineCustomElement: defineTkPopover,
      })
    : /*@__PURE__*/ createSSRComponent<TkPopoverElement, TkPopoverEvents>({
        tagName: 'tk-popover',
        properties: {
          trigger: 'trigger',
          position: 'position',
          type: 'type',
          containerStyle: 'container-style',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkRadioEvents = { onTkChange: EventName<CustomEvent<any>> };

export const TkRadio: StencilReactComponent<TkRadioElement, TkRadioEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkRadioElement, TkRadioEvents>({
        tagName: 'tk-radio',
        elementClass: TkRadioElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkChange: 'tk-change' } as TkRadioEvents,
        defineCustomElement: defineTkRadio,
      })
    : /*@__PURE__*/ createSSRComponent<TkRadioElement, TkRadioEvents>({
        tagName: 'tk-radio',
        properties: {
          disabled: 'disabled',
          description: 'description',
          invalid: 'invalid',
          label: 'label',
          position: 'position',
          checked: 'checked',
          name: 'name',
          value: 'value',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkRadioGroupEvents = { onTkChange: EventName<CustomEvent<any>> };

export const TkRadioGroup: StencilReactComponent<TkRadioGroupElement, TkRadioGroupEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkRadioGroupElement, TkRadioGroupEvents>({
        tagName: 'tk-radio-group',
        elementClass: TkRadioGroupElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkChange: 'tk-change' } as TkRadioGroupEvents,
        defineCustomElement: defineTkRadioGroup,
      })
    : /*@__PURE__*/ createSSRComponent<TkRadioGroupElement, TkRadioGroupEvents>({
        tagName: 'tk-radio-group',
        properties: {
          label: 'label',
          direction: 'direction',
          invalid: 'invalid',
          position: 'position',
          value: 'value',
          showAsterisk: 'show-asterisk',
          spread: 'spread',
          type: 'type',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkRatingEvents = { onTkChange: EventName<CustomEvent<number>> };

export const TkRating: StencilReactComponent<TkRatingElement, TkRatingEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkRatingElement, TkRatingEvents>({
        tagName: 'tk-rating',
        elementClass: TkRatingElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkChange: 'tk-change' } as TkRatingEvents,
        defineCustomElement: defineTkRating,
      })
    : /*@__PURE__*/ createSSRComponent<TkRatingElement, TkRatingEvents>({
        tagName: 'tk-rating',
        properties: {
          maxRating: 'max-rating',
          type: 'type',
          value: 'value',
          showRatingValue: 'show-rating-value',
          disabled: 'disabled',
          readonly: 'readonly',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkSelectEvents = { onTkChange: EventName<CustomEvent<any>> };

export const TkSelect: StencilReactComponent<TkSelectElement, TkSelectEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkSelectElement, TkSelectEvents>({
        tagName: 'tk-select',
        elementClass: TkSelectElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkChange: 'tk-change' } as TkSelectEvents,
        defineCustomElement: defineTkSelect,
      })
    : /*@__PURE__*/ createSSRComponent<TkSelectElement, TkSelectEvents>({
        tagName: 'tk-select',
        properties: {
          groupNameKey: 'group-name-key',
          groupOptionsKey: 'group-options-key',
          loading: 'loading',
          allowCustomValue: 'allow-custom-value',
          clearable: 'clearable',
          disabled: 'disabled',
          dropdownWidthMode: 'dropdown-width-mode',
          editable: 'editable',
          error: 'error',
          emptyMessage: 'empty-message',
          filter: 'filter',
          filterDebounceDelay: 'filter-debounce-delay',
          hint: 'hint',
          invalid: 'invalid',
          label: 'label',
          multiple: 'multiple',
          name: 'name',
          placeholder: 'placeholder',
          readonly: 'readonly',
          size: 'size',
          showAsterisk: 'show-asterisk',
          chipOptions: 'chip-options',
          options: 'options',
          optionHtml: 'option-html',
          optionLabelKey: 'option-label-key',
          optionValueKey: 'option-value-key',
          value: 'value',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkSliderEvents = { onTkChange: EventName<CustomEvent<number | [number, number]>> };

export const TkSlider: StencilReactComponent<TkSliderElement, TkSliderEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkSliderElement, TkSliderEvents>({
        tagName: 'tk-slider',
        elementClass: TkSliderElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkChange: 'tkChange' } as TkSliderEvents,
        defineCustomElement: defineTkSlider,
      })
    : /*@__PURE__*/ createSSRComponent<TkSliderElement, TkSliderEvents>({
        tagName: 'tk-slider',
        properties: {
          label: 'label',
          min: 'min',
          max: 'max',
          step: 'step',
          disabled: 'disabled',
          range: 'range',
          value: 'value',
          rangeVisibility: 'range-visibility',
          type: 'type',
          showAsterisk: 'show-asterisk',
          invalid: 'invalid',
          error: 'error',
          hint: 'hint',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkSpinnerEvents = NonNullable<unknown>;

export const TkSpinner: StencilReactComponent<TkSpinnerElement, TkSpinnerEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkSpinnerElement, TkSpinnerEvents>({
        tagName: 'tk-spinner',
        elementClass: TkSpinnerElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkSpinnerEvents,
        defineCustomElement: defineTkSpinner,
      })
    : /*@__PURE__*/ createSSRComponent<TkSpinnerElement, TkSpinnerEvents>({
        tagName: 'tk-spinner',
        properties: {
          orientation: 'orientation',
          size: 'size',
          type: 'type',
          label: 'label',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkStepEvents = NonNullable<unknown>;

export const TkStep: StencilReactComponent<TkStepElement, TkStepEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkStepElement, TkStepEvents>({
        tagName: 'tk-step',
        elementClass: TkStepElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkStepEvents,
        defineCustomElement: defineTkStep,
      })
    : /*@__PURE__*/ createSSRComponent<TkStepElement, TkStepEvents>({
        tagName: 'tk-step',
        properties: {
          header: 'header',
          subheader: 'subheader',
          icon: 'icon',
          completeIcon: 'complete-icon',
          activeIcon: 'active-icon',
          inactiveIcon: 'inactive-icon',
          errorIcon: 'error-icon',
          complete: 'complete',
          error: 'error',
          isActive: 'is-active',
          index: 'index',
          isClickable: 'is-clickable',
          labelPosition: 'label-position',
          stepMode: 'step-mode',
          disabled: 'disabled',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkStepperEvents = {
  onTkStepChange: EventName<CustomEvent<number>>;
  onTkStepClick: EventName<TkStepperCustomEvent<IStepClickDetail>>;
};

export const TkStepper: StencilReactComponent<TkStepperElement, TkStepperEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkStepperElement, TkStepperEvents>({
        tagName: 'tk-stepper',
        elementClass: TkStepperElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkStepChange: 'tk-step-change',
          onTkStepClick: 'tk-step-click',
        } as TkStepperEvents,
        defineCustomElement: defineTkStepper,
      })
    : /*@__PURE__*/ createSSRComponent<TkStepperElement, TkStepperEvents>({
        tagName: 'tk-stepper',
        properties: {
          controlled: 'controlled',
          orientation: 'orientation',
          stepMode: 'step-mode',
          linear: 'linear',
          active: 'active',
          showCompleteState: 'show-complete-state',
          completeIcon: 'complete-icon',
          activeIcon: 'active-icon',
          inactiveIcon: 'inactive-icon',
          errorIcon: 'error-icon',
          containerStyle: 'container-style',
          contentStyle: 'content-style',
          signStyle: 'sign-style',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkTableEvents = {
  onTkSelectionChange: EventName<CustomEvent<any[] | any>>;
  onTkRequest: EventName<TkTableCustomEvent<ITableRequest>>;
  onTkExpandedRowsChange: EventName<CustomEvent<any[]>>;
  onTkCellEdit: EventName<TkTableCustomEvent<ITableCellEdit>>;
  onTkRowClick: EventName<CustomEvent<any>>;
};

export const TkTable: StencilReactComponent<TkTableElement, TkTableEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkTableElement, TkTableEvents>({
        tagName: 'tk-table',
        elementClass: TkTableElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkSelectionChange: 'tk-selection-change',
          onTkRequest: 'tk-request',
          onTkExpandedRowsChange: 'tk-expanded-rows-change',
          onTkCellEdit: 'tk-cell-edit',
          onTkRowClick: 'tk-row-click',
        } as TkTableEvents,
        defineCustomElement: defineTkTable,
      })
    : /*@__PURE__*/ createSSRComponent<TkTableElement, TkTableEvents>({
        tagName: 'tk-table',
        properties: {
          columns: 'columns',
          containerStyle: 'container-style',
          selectionMode: 'selection-mode',
          selection: 'selection',
          selectionRowDisabled: 'selection-row-disabled',
          headerType: 'header-type',
          size: 'size',
          dataKey: 'data-key',
          data: 'data',
          cardTitle: 'card-title',
          striped: 'striped',
          rowsPerPage: 'rows-per-page',
          rowsPerPageOptions: 'rows-per-page-options',
          totalItems: 'total-items',
          paginationMethod: 'pagination-method',
          paginationType: 'pagination-type',
          loading: 'loading',
          expandedRows: 'expanded-rows',
          multiSort: 'multi-sort',
          cellStyle: 'cell-style',
          rowStyle: 'row-style',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkTabsEvents = {
  onTkTabClick: EventName<CustomEvent<number>>;
  onTkTabChange: EventName<CustomEvent<number>>;
};

export const TkTabs: StencilReactComponent<TkTabsElement, TkTabsEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkTabsElement, TkTabsEvents>({
        tagName: 'tk-tabs',
        elementClass: TkTabsElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkTabClick: 'tk-tab-click',
          onTkTabChange: 'tk-tab-change',
        } as TkTabsEvents,
        defineCustomElement: defineTkTabs,
      })
    : /*@__PURE__*/ createSSRComponent<TkTabsElement, TkTabsEvents>({
        tagName: 'tk-tabs',
        properties: {
          alignHeaders: 'align-headers',
          controlled: 'controlled',
          defaultActiveIndex: 'default-active-index',
          activeIndex: 'active-index',
          isClosable: 'is-closable',
          isExtendable: 'is-extendable',
          orientation: 'orientation',
          spreadHeaders: 'spread-headers',
          size: 'size',
          type: 'type',
          variant: 'variant',
          containerStyle: 'container-style',
          headerContainerStyle: 'header-container-style',
          contentStyle: 'content-style',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkTabsItemEvents = NonNullable<unknown>;

export const TkTabsItem: StencilReactComponent<TkTabsItemElement, TkTabsItemEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkTabsItemElement, TkTabsItemEvents>({
        tagName: 'tk-tabs-item',
        elementClass: TkTabsItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkTabsItemEvents,
        defineCustomElement: defineTkTabsItem,
      })
    : /*@__PURE__*/ createSSRComponent<TkTabsItemElement, TkTabsItemEvents>({
        tagName: 'tk-tabs-item',
        properties: {
          icon: 'icon',
          label: 'label',
          disabled: 'disabled',
          badged: 'badged',
          badgeLabel: 'badge-label',
          badgeCount: 'badge-count',
          tooltipOptions: 'tooltip-options',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkTextareaEvents = {
  onTkInput: EventName<TkTextareaCustomEvent<KeyboardEvent>>;
  onTkChange: EventName<CustomEvent<string | number | undefined | null>>;
  onTkBlur: EventName<CustomEvent<void>>;
  onTkFocus: EventName<CustomEvent<void>>;
};

export const TkTextarea: StencilReactComponent<TkTextareaElement, TkTextareaEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkTextareaElement, TkTextareaEvents>({
        tagName: 'tk-textarea',
        elementClass: TkTextareaElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkInput: 'tk-input',
          onTkChange: 'tk-change',
          onTkBlur: 'tk-blur',
          onTkFocus: 'tk-focus',
        } as TkTextareaEvents,
        defineCustomElement: defineTkTextarea,
      })
    : /*@__PURE__*/ createSSRComponent<TkTextareaElement, TkTextareaEvents>({
        tagName: 'tk-textarea',
        properties: {
          disabled: 'disabled',
          invalid: 'invalid',
          error: 'error',
          hint: 'hint',
          label: 'label',
          name: 'name',
          placeholder: 'placeholder',
          rows: 'rows',
          readonly: 'readonly',
          size: 'size',
          showAsterisk: 'show-asterisk',
          maxLength: 'max-length',
          value: 'value',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkTimelineEvents = NonNullable<unknown>;

export const TkTimeline: StencilReactComponent<TkTimelineElement, TkTimelineEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkTimelineElement, TkTimelineEvents>({
        tagName: 'tk-timeline',
        elementClass: TkTimelineElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkTimelineEvents,
        defineCustomElement: defineTkTimeline,
      })
    : /*@__PURE__*/ createSSRComponent<TkTimelineElement, TkTimelineEvents>({
        tagName: 'tk-timeline',
        properties: {
          items: 'items',
          orientation: 'orientation',
          alternate: 'alternate',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkTimelineItemEvents = NonNullable<unknown>;

export const TkTimelineItem: StencilReactComponent<TkTimelineItemElement, TkTimelineItemEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkTimelineItemElement, TkTimelineItemEvents>({
        tagName: 'tk-timeline-item',
        elementClass: TkTimelineItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkTimelineItemEvents,
        defineCustomElement: defineTkTimelineItem,
      })
    : /*@__PURE__*/ createSSRComponent<TkTimelineItemElement, TkTimelineItemEvents>({
        tagName: 'tk-timeline-item',
        properties: {},
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkToggleEvents = { onTkChange: EventName<CustomEvent<boolean>> };

export const TkToggle: StencilReactComponent<TkToggleElement, TkToggleEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkToggleElement, TkToggleEvents>({
        tagName: 'tk-toggle',
        elementClass: TkToggleElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkChange: 'tk-change' } as TkToggleEvents,
        defineCustomElement: defineTkToggle,
      })
    : /*@__PURE__*/ createSSRComponent<TkToggleElement, TkToggleEvents>({
        tagName: 'tk-toggle',
        properties: {
          ariaLabelledby: 'aria-labelledby',
          disabled: 'disabled',
          icon: 'icon',
          inputId: 'input-id',
          name: 'name',
          label: 'label',
          showIcon: 'show-icon',
          size: 'size',
          variant: 'variant',
          invalid: 'invalid',
          value: 'value',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkToggleButtonEvents = { onTkToggle: EventName<CustomEvent<any>> };

export const TkToggleButton: StencilReactComponent<TkToggleButtonElement, TkToggleButtonEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkToggleButtonElement, TkToggleButtonEvents>({
        tagName: 'tk-toggle-button',
        elementClass: TkToggleButtonElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkToggle: 'tk-toggle' } as TkToggleButtonEvents,
        defineCustomElement: defineTkToggleButton,
      })
    : /*@__PURE__*/ createSSRComponent<TkToggleButtonElement, TkToggleButtonEvents>({
        tagName: 'tk-toggle-button',
        properties: {
          disabled: 'disabled',
          icon: 'icon',
          iconPosition: 'icon-position',
          label: 'label',
          rounded: 'rounded',
          size: 'size',
          variant: 'variant',
          type: 'type',
          value: 'value',
          selected: 'selected',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkToggleButtonGroupEvents = { onTkChange: EventName<CustomEvent<any>> };

export const TkToggleButtonGroup: StencilReactComponent<TkToggleButtonGroupElement, TkToggleButtonGroupEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkToggleButtonGroupElement, TkToggleButtonGroupEvents>({
        tagName: 'tk-toggle-button-group',
        elementClass: TkToggleButtonGroupElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTkChange: 'tk-change' } as TkToggleButtonGroupEvents,
        defineCustomElement: defineTkToggleButtonGroup,
      })
    : /*@__PURE__*/ createSSRComponent<TkToggleButtonGroupElement, TkToggleButtonGroupEvents>({
        tagName: 'tk-toggle-button-group',
        properties: {
          type: 'type',
          rounded: 'rounded',
          value: 'value',
          direction: 'direction',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkTooltipEvents = NonNullable<unknown>;

export const TkTooltip: StencilReactComponent<TkTooltipElement, TkTooltipEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkTooltipElement, TkTooltipEvents>({
        tagName: 'tk-tooltip',
        elementClass: TkTooltipElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as TkTooltipEvents,
        defineCustomElement: defineTkTooltip,
      })
    : /*@__PURE__*/ createSSRComponent<TkTooltipElement, TkTooltipEvents>({
        tagName: 'tk-tooltip',
        properties: {
          header: 'header',
          description: 'description',
          position: 'position',
          variant: 'variant',
          icon: 'icon',
          containerStyle: 'container-style',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkTreeViewEvents = {
  onTkItemClick: EventName<TkTreeViewCustomEvent<ITreeItem>>;
  onTkChange: EventName<CustomEvent<string[]>>;
};

export const TkTreeView: StencilReactComponent<TkTreeViewElement, TkTreeViewEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkTreeViewElement, TkTreeViewEvents>({
        tagName: 'tk-tree-view',
        elementClass: TkTreeViewElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkItemClick: 'tk-item-click',
          onTkChange: 'tk-change',
        } as TkTreeViewEvents,
        defineCustomElement: defineTkTreeView,
      })
    : /*@__PURE__*/ createSSRComponent<TkTreeViewElement, TkTreeViewEvents>({
        tagName: 'tk-tree-view',
        properties: {
          items: 'items',
          mode: 'mode',
          type: 'type',
          size: 'size',
          disabled: 'disabled',
          branchIcon: 'branch-icon',
          leafIcon: 'leaf-icon',
          showBadge: 'show-badge',
          badgeOptions: 'badge-options',
          value: 'value',
          selectable: 'selectable',
          showPointer: 'show-pointer',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });

type TkUploadEvents = {
  onTkChange: EventName<TkUploadCustomEvent<File[]>>;
  onTkFilesRejected: EventName<TkUploadCustomEvent<{ reason: string; file: File | FileList }[]>>;
  onTkUpload: EventName<TkUploadCustomEvent<File[]>>;
  onTkRemovedFile: EventName<TkUploadCustomEvent<File>>;
  onTkDownloadFile: EventName<TkUploadCustomEvent<File>>;
};

export const TkUpload: StencilReactComponent<TkUploadElement, TkUploadEvents> =
  typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<TkUploadElement, TkUploadEvents>({
        tagName: 'tk-upload',
        elementClass: TkUploadElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
          onTkChange: 'tk-change',
          onTkFilesRejected: 'tk-files-rejected',
          onTkUpload: 'tk-upload',
          onTkRemovedFile: 'tk-removed-file',
          onTkDownloadFile: 'tk-download-file',
        } as TkUploadEvents,
        defineCustomElement: defineTkUpload,
      })
    : /*@__PURE__*/ createSSRComponent<TkUploadElement, TkUploadEvents>({
        tagName: 'tk-upload',
        properties: {
          autoUpload: 'auto-upload',
          dragDrop: 'drag-drop',
          label: 'label',
          hint: 'hint',
          error: 'error',
          showAsterisk: 'show-asterisk',
          showFiles: 'show-files',
          chooseButtonLabel: 'choose-button-label',
          uploadButtonLabel: 'upload-button-label',
          accept: 'accept',
          disabled: 'disabled',
          multiple: 'multiple',
          maxFileCount: 'max-file-count',
          maxFileSize: 'max-file-size',
          title: 'title',
          dragDropTitle: 'drag-drop-title',
          value: 'value',
          description: 'description',
          dragDropDescription: 'drag-drop-description',
          invalid: 'invalid',
          loading: 'loading',
          type: 'type',
          downloadable: 'downloadable',
        },
        hydrateModule: import('@takeoff-ui/core/hydrate'),
      });
