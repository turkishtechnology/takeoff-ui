{
  "timestamp": "2025-05-05T09:17:40",
  "compiler": {
    "name": "@stencil/core",
    "version": "4.26.0",
    "typescriptVersion": "5.5.4"
  },
  "components": [
    {
      "filePath": "src/components/tk-accordion/tk-accordion.tsx",
      "encapsulation": "shadow",
      "tag": "tk-accordion",
      "docs": "The TkAccordion component is a user interface element that organizes content under headers, allowing users to expand and collapse sections by clicking on each header. It is particularly useful for improving layout and readability on pages with extensive information.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Default slot to detect TkAccordionItem components."
        },
        {
          "name": "react",
          "text": "`import { TkAccordion, TkAccordionItem } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkAccordion, TkAccordionItem } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkAccordion, TkAccordionItem } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "activeIndex",
          "type": "number | number[] | string | string[]",
          "complexType": {
            "original": "string | number | string[] | number[]",
            "resolved": "number | number[] | string | string[]",
            "references": {}
          },
          "mutable": true,
          "attr": "active-index",
          "reflectToAttr": false,
          "docs": "Currently active panel indexes. Can be a single value or an array.\nWhen allowMultiple is false, only the last value in the array will be used.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "number[]"
            },
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "allowMultiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allow-multiple",
          "reflectToAttr": false,
          "docs": "Allows multiple accordion items to be expanded simultaneously.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "arrowPosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "arrow-position",
          "reflectToAttr": false,
          "docs": "Sets the position of opening and closing chevrons.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'right'"
            }
          ],
          "default": "'right'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "collapseIcon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "collapse-icon",
          "reflectToAttr": false,
          "docs": "Sets the collapse icon",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'keyboard_arrow_up'"
            }
          ],
          "default": "'keyboard_arrow_up'",
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "expandIcon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "expand-icon",
          "reflectToAttr": false,
          "docs": "Sets the expand icon",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'keyboard_arrow_down'"
            }
          ],
          "default": "'keyboard_arrow_down'",
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideArrows",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-arrows",
          "reflectToAttr": false,
          "docs": "Whether to hide the arrow icons.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"divided\" | \"grouped\"",
          "complexType": {
            "original": "'grouped' | 'divided'",
            "resolved": "\"divided\" | \"grouped\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Sets accordion style for the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'grouped'"
            }
          ],
          "default": "'grouped'",
          "values": [
            {
              "value": "divided",
              "type": "string"
            },
            {
              "value": "grouped",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tkAccordionItemSelected",
          "detail": "IAccordionItemSelect",
          "bubbles": true,
          "complexType": {
            "original": "IAccordionItemSelect",
            "resolved": "IAccordionItemSelect",
            "references": {
              "IAccordionItemSelect": {
                "location": "local",
                "path": "/Users/H_DEMIR3/Documents/GitHub/takeoff-ui/packages/core/src/components/tk-accordion/tk-accordion.tsx",
                "id": "src/components/tk-accordion/tk-accordion.tsx::IAccordionItemSelect"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when an accordion item is selected",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Default slot to detect TkAccordionItem components."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-accordion/tk-accordion-item.tsx",
      "encapsulation": "shadow",
      "tag": "tk-accordion-item",
      "docs": "",
      "docsTags": [
        {
          "name": "slot",
          "text": "header - Custom header template that overrides the header prop if provided."
        },
        {
          "name": "slot",
          "text": "content - Custom content template."
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "Sets if the accordion is active.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "Header text to display.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon for accordion component.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "itemKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "item-key",
          "reflectToAttr": true,
          "docs": "Optional key for the accordion item.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\"",
          "complexType": {
            "original": "'base' | 'large'",
            "resolved": "\"base\" | \"large\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size for the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'base'"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "toggleItem",
          "type": "() => void",
          "complexType": {
            "original": "() => void",
            "resolved": "() => void",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Toggle's the accordion item.",
          "docsTags": [],
          "values": [
            {
              "type": "() => void"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "content",
          "docs": "Custom content template."
        },
        {
          "name": "header",
          "docs": "Custom header template that overrides the header prop if provided."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-icon"
      ],
      "dependencyGraph": {
        "tk-accordion-item": [
          "tk-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tk-alert/tk-alert.tsx",
      "encapsulation": "shadow",
      "tag": "tk-alert",
      "docs": "The TkAlert component is designed to display contextual feedback messages, such as success, warnings, informational notices, and errors.",
      "docsTags": [
        {
          "name": "slot",
          "text": "right-action - Custom actions template to right content."
        },
        {
          "name": "slot",
          "text": "footer-action - Custom actions template to default footer."
        },
        {
          "name": "react",
          "text": "`import { TkAlert } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkAlert } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkAlert } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "The header text displayed at the top of the alert.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "The icon displayed in the alert. If not provided, a default icon is used based on the variant.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "iconSize",
          "type": "\"base\" | \"large\" | \"small\" | \"xlarge\"",
          "complexType": {
            "original": "'small' | 'base' | 'large' | 'xlarge'",
            "resolved": "\"base\" | \"large\" | \"small\" | \"xlarge\"",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-size",
          "reflectToAttr": false,
          "docs": "Size of the icon displayed in the alert ('small', 'base', or 'large').",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'base'"
            }
          ],
          "default": "'large'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "xlarge",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "message",
          "type": "string | string[]",
          "complexType": {
            "original": "string | string[]",
            "resolved": "string | string[]",
            "references": {}
          },
          "mutable": false,
          "attr": "message",
          "reflectToAttr": false,
          "docs": "The message text displayed within the alert.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "removable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "removable",
          "reflectToAttr": false,
          "docs": "The alert can be closed by the user.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"filled\" | \"filledlight\" | \"gradient\" | \"outlined\"",
          "complexType": {
            "original": "'filled' | 'filledlight' | 'outlined' | 'gradient'",
            "resolved": "\"filled\" | \"filledlight\" | \"gradient\" | \"outlined\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "This field specifies the design type of the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "filled"
            }
          ],
          "default": "'filled'",
          "values": [
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "filledlight",
              "type": "string"
            },
            {
              "value": "gradient",
              "type": "string"
            },
            {
              "value": "outlined",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"neutral\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'success' | 'warning' | 'info' | 'danger' | 'neutral'",
            "resolved": "\"danger\" | \"info\" | \"neutral\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Defines the visual variant of the alert.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'neutral'"
            }
          ],
          "default": "'neutral'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "footer-action",
          "docs": "Custom actions template to default footer."
        },
        {
          "name": "right-action",
          "docs": "Custom actions template to right content."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-icon",
        "tk-button"
      ],
      "dependencyGraph": {
        "tk-alert": [
          "tk-icon",
          "tk-button"
        ],
        "tk-button": [
          "tk-spinner",
          "tk-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tk-avatar/tk-avatar.tsx",
      "encapsulation": "none",
      "tag": "tk-avatar",
      "docs": "The `TkAvatar` represents a user, labels, and display the images or a brand.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkAvatar, TkAvatarGroup } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkAvatar, TkAvatarGroup } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkAvatar, TkAvatarGroup } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "ariaLabelledby",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "aria-labelledby",
          "reflectToAttr": false,
          "docs": "ID of the element that labels the avatar - accessibility",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "background",
          "type": "\"brand\" | \"solid\"",
          "complexType": {
            "original": "'brand' | 'solid'",
            "resolved": "\"brand\" | \"solid\"",
            "references": {}
          },
          "mutable": false,
          "attr": "background",
          "reflectToAttr": false,
          "docs": "Background style of the avatar",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'brand'"
            }
          ],
          "default": "'brand'",
          "values": [
            {
              "value": "brand",
              "type": "string"
            },
            {
              "value": "solid",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "badge",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "badge",
          "reflectToAttr": false,
          "docs": "The badge to be displayed in the avatar",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "badgeStatus",
          "type": "\"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'success' | 'warning' | 'info' | 'danger'",
            "resolved": "\"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "badge-status",
          "reflectToAttr": false,
          "docs": "The status of the badge",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "success"
            }
          ],
          "default": "'success'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "image",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "image",
          "reflectToAttr": false,
          "docs": "URL of the image to be displayed in the avatar",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Text label to be displayed in the avatar",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name associated with the avatar - accessibility",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rounded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "rounded",
          "reflectToAttr": false,
          "docs": "Whether the avatar should have rounded corners",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\" | \"xlarge\" | \"xsmall\"",
          "complexType": {
            "original": "'xsmall' | 'small' | 'base' | 'large' | 'xlarge'",
            "resolved": "\"base\" | \"large\" | \"small\" | \"xlarge\" | \"xsmall\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Size of the avatar",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'base'"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "xlarge",
              "type": "string"
            },
            {
              "value": "xsmall",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"light\" | \"primary\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'primary' | 'light' | 'success' | 'info' | 'warning' | 'danger'",
            "resolved": "\"danger\" | \"info\" | \"light\" | \"primary\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Appearance of the avatar",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'primary'"
            }
          ],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [
        {
          "name": "avatar",
          "docs": ""
        },
        {
          "name": "badge",
          "docs": ""
        }
      ],
      "dependents": [
        "tk-card"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "tk-card": [
          "tk-avatar"
        ]
      }
    },
    {
      "filePath": "src/components/tk-avatar/tk-avatar-group.tsx",
      "encapsulation": "none",
      "tag": "tk-avatar-group",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "compact",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "compact",
          "reflectToAttr": false,
          "docs": "Whether the avatars should have a shared background",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-badge/tk-badge.tsx",
      "encapsulation": "shadow",
      "tag": "tk-badge",
      "docs": "The TkBadge component allows you to create a small badge for adding information like contextual data that needs to stand out and get noticed. It is also often useful in combination with other elements like a user avatar to show a number of new messages.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkBadge } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkBadge } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkBadge } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "count",
          "type": "number | string",
          "complexType": {
            "original": "number | string",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "count",
          "reflectToAttr": false,
          "docs": "Defines the number for the element.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "dot",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "dot",
          "reflectToAttr": false,
          "docs": "If true, shows a small dot on the badge.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon name to be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "iconPosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-position",
          "reflectToAttr": false,
          "docs": "Defines the position of the icon.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'left'"
            }
          ],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label for the element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rounded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "rounded",
          "reflectToAttr": false,
          "docs": "Makes the badge corners rounded.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\"",
          "complexType": {
            "original": "'large' | 'base' | 'small'",
            "resolved": "\"base\" | \"large\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size for the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'base'"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"filled\" | \"filledlight\" | \"outlined\" | \"text\"",
          "complexType": {
            "original": "'filled' | 'filledlight' | 'outlined' | 'text'",
            "resolved": "\"filled\" | \"filledlight\" | \"outlined\" | \"text\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "This field specifies the design type of the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "filled"
            }
          ],
          "default": "'filled'",
          "values": [
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "filledlight",
              "type": "string"
            },
            {
              "value": "outlined",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"business\" | \"cyan\" | \"danger\" | \"info\" | \"neutral\" | \"primary\" | \"purple\" | \"secondary\" | \"success\" | \"verified\" | \"warning\"",
          "complexType": {
            "original": "'primary' | 'secondary' | 'neutral' | 'info' | 'success' | 'danger' | 'warning' | 'verified' | 'purple' | 'cyan' | 'business'",
            "resolved": "\"business\" | \"cyan\" | \"danger\" | \"info\" | \"neutral\" | \"primary\" | \"purple\" | \"secondary\" | \"success\" | \"verified\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Determines the badge's variant for different styles.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'primary'"
            }
          ],
          "default": "'primary'",
          "values": [
            {
              "value": "business",
              "type": "string"
            },
            {
              "value": "cyan",
              "type": "string"
            },
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "purple",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "verified",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "tk-table",
        "tk-tabs"
      ],
      "dependencies": [
        "tk-icon"
      ],
      "dependencyGraph": {
        "tk-badge": [
          "tk-icon"
        ],
        "tk-table": [
          "tk-badge"
        ],
        "tk-tabs": [
          "tk-badge"
        ]
      }
    },
    {
      "filePath": "src/components/tk-breadcrumb/tk-breadcrumb.tsx",
      "encapsulation": "shadow",
      "tag": "tk-breadcrumb",
      "docs": "The `TkBreadcrumb` provides a navigational aid, allowing users to keep track of their location within the application's hierarchy.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Default slot to detect TkBreadcrumbItem components."
        },
        {
          "name": "react",
          "text": "`import { TkBreadcrumb, TkBreadcrumbItem } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkBreadcrumb, TkBreadcrumbItem } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkBreadcrumb, TkBreadcrumbItem } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "model",
          "type": "IBreadcrumbModel[]",
          "complexType": {
            "original": "IBreadcrumbModel[]",
            "resolved": "IBreadcrumbModel[]",
            "references": {
              "IBreadcrumbModel": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-breadcrumb/interfaces.ts::IBreadcrumbModel"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Array of breadcrumb items",
          "docsTags": [],
          "values": [
            {
              "type": "IBreadcrumbModel[]"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "separator",
          "type": "\"dot\" | \"icon\" | \"slash\" | \"vertical\"",
          "complexType": {
            "original": "'icon' | 'dot' | 'slash' | 'vertical'",
            "resolved": "\"dot\" | \"icon\" | \"slash\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "separator",
          "reflectToAttr": false,
          "docs": "Type of separator to use between breadcrumb items",
          "docsTags": [
            {
              "name": "default",
              "text": "'icon'"
            }
          ],
          "default": "'icon'",
          "values": [
            {
              "value": "dot",
              "type": "string"
            },
            {
              "value": "icon",
              "type": "string"
            },
            {
              "value": "slash",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "separatorIcon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "separator-icon",
          "reflectToAttr": false,
          "docs": "Icon to use as separator when separator is set to 'icon'",
          "docsTags": [
            {
              "name": "default",
              "text": "'chevron_right'"
            }
          ],
          "default": "'chevron_right'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"basic\" | \"outlined\"",
          "complexType": {
            "original": "'basic' | 'outlined'",
            "resolved": "\"basic\" | \"outlined\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Defines the visual style of the component, possible values are 'basic' and 'outlined'.",
          "docsTags": [
            {
              "name": "default",
              "text": "'basic'"
            }
          ],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "outlined",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "default",
          "docs": "Default slot to detect TkBreadcrumbItem components."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-icon",
        "tk-breadcrumb-item"
      ],
      "dependencyGraph": {
        "tk-breadcrumb": [
          "tk-icon",
          "tk-breadcrumb-item"
        ],
        "tk-breadcrumb-item": [
          "tk-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tk-breadcrumb/tk-breadcrumb-item/tk-breadcrumb-item.tsx",
      "encapsulation": "none",
      "tag": "tk-breadcrumb-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "URL for the item",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon to display alongside the label",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "isCurrent",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-current",
          "reflectToAttr": false,
          "docs": "Indicates if the item is the last one",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "isExternal",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-external",
          "reflectToAttr": false,
          "docs": "Whether the item is an external url",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label text for the breadcrumb item",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "tk-breadcrumb"
      ],
      "dependencies": [
        "tk-icon"
      ],
      "dependencyGraph": {
        "tk-breadcrumb-item": [
          "tk-icon"
        ],
        "tk-breadcrumb": [
          "tk-breadcrumb-item"
        ]
      }
    },
    {
      "filePath": "src/components/tk-button/tk-button.tsx",
      "encapsulation": "shadow",
      "tag": "tk-button",
      "docs": "TkButton is an extension to standard input element with icons and theming.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkButton } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkButton } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkButton } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the button, preventing user interaction.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "fullWidth",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "full-width",
          "reflectToAttr": false,
          "docs": "Sets the button to full-width mode, making it span the container.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "href",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "href",
          "reflectToAttr": false,
          "docs": "Sets the URL the button should navigate to when clicked (for type=\"link\" buttons).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon name to be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "iconPosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-position",
          "reflectToAttr": false,
          "docs": "Defines the position of the icon.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'left'"
            }
          ],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label text displayed inside the button.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "Shows a loading icon inside the button.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "mode",
          "type": "\"button\" | \"link\" | \"reset\" | \"submit\"",
          "complexType": {
            "original": "'button' | 'submit' | 'reset' | 'link'",
            "resolved": "\"button\" | \"link\" | \"reset\" | \"submit\"",
            "references": {}
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "Sets the button type.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'button'"
            }
          ],
          "default": "'button'",
          "values": [
            {
              "value": "button",
              "type": "string"
            },
            {
              "value": "link",
              "type": "string"
            },
            {
              "value": "reset",
              "type": "string"
            },
            {
              "value": "submit",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rounded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "rounded",
          "reflectToAttr": false,
          "docs": "Makes the button round with an icon-only style.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\"",
          "complexType": {
            "original": "'large' | 'base' | 'small'",
            "resolved": "\"base\" | \"large\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size for the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'base'"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "target",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "target",
          "reflectToAttr": false,
          "docs": "Specifies where to open the linked document (for type=\"link\" buttons).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"elevated\" | \"filled\" | \"outlined\" | \"text\"",
          "complexType": {
            "original": "'filled' | 'elevated' | 'outlined' | 'text'",
            "resolved": "\"elevated\" | \"filled\" | \"outlined\" | \"text\"",
            "references": {}
          },
          "mutable": true,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "This field specifies the design type of the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "filled"
            }
          ],
          "default": "'filled'",
          "values": [
            {
              "value": "elevated",
              "type": "string"
            },
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "outlined",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "underline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "underline",
          "reflectToAttr": false,
          "docs": "Applies underline styling to the button (for type=\"link\" buttons).",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"neutral\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"white\"",
          "complexType": {
            "original": "'primary' | 'secondary' | 'neutral' | 'info' | 'success' | 'danger' | 'warning' | 'white'",
            "resolved": "\"danger\" | \"info\" | \"neutral\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"white\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Determines the button's variant for different styles.",
          "docsTags": [],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tk-click",
          "detail": "MouseEvent",
          "bubbles": true,
          "complexType": {
            "original": "MouseEvent",
            "resolved": "MouseEvent",
            "references": {
              "MouseEvent": {
                "location": "global",
                "id": "global::MouseEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the button click.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "tk-alert",
        "tk-card",
        "tk-datepicker",
        "tk-dialog",
        "tk-drawer",
        "tk-input",
        "tk-table",
        "tk-upload"
      ],
      "dependencies": [
        "tk-spinner",
        "tk-icon"
      ],
      "dependencyGraph": {
        "tk-button": [
          "tk-spinner",
          "tk-icon"
        ],
        "tk-alert": [
          "tk-button"
        ],
        "tk-card": [
          "tk-button"
        ],
        "tk-datepicker": [
          "tk-button"
        ],
        "tk-dialog": [
          "tk-button"
        ],
        "tk-drawer": [
          "tk-button"
        ],
        "tk-input": [
          "tk-button"
        ],
        "tk-table": [
          "tk-button"
        ],
        "tk-upload": [
          "tk-button"
        ]
      }
    },
    {
      "filePath": "src/components/tk-card/tk-card.tsx",
      "encapsulation": "shadow",
      "tag": "tk-card",
      "docs": "TkCard component description.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Default slot to detect child to inner body."
        },
        {
          "name": "slot",
          "text": "header - Custom header template."
        },
        {
          "name": "slot",
          "text": "avatar - Custom avatar template of card header."
        },
        {
          "name": "slot",
          "text": "content - Custom content template."
        },
        {
          "name": "slot",
          "text": "footer - Custom footer template."
        },
        {
          "name": "slot",
          "text": "footer-actions - Custom actions template to default footer."
        },
        {
          "name": "react",
          "text": "`import { TkCard } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkCard } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkCard } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "avatarProps",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "avatar-props",
          "reflectToAttr": false,
          "docs": "TO DO State hata verdiği için buraya alındı, düzeltilecek\nTkAvatar component properties",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "{ severity: 'light', background: 'solid', rounded: true }"
            }
          ],
          "default": "{\n    severity: 'light',\n    background: 'solid',\n    rounded: true,\n  }",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "containerStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "container-style",
          "reflectToAttr": false,
          "docs": "The style attribute of container element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "contentStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "content-style",
          "reflectToAttr": false,
          "docs": "The style attribute of content element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "enableHoverShadow",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "enable-hover-shadow",
          "reflectToAttr": false,
          "docs": "Controls whether the card shows a hover shadow effect",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "footerType",
          "type": "\"basic\" | \"divided\" | \"light\"",
          "complexType": {
            "original": "'basic' | 'divided' | 'light'",
            "resolved": "\"basic\" | \"divided\" | \"light\"",
            "references": {}
          },
          "mutable": false,
          "attr": "footer-type",
          "reflectToAttr": false,
          "docs": "The mode of the footer",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'basic'"
            }
          ],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "divided",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "The header text",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "headerPosition",
          "type": "\"bottom\" | \"top\"",
          "complexType": {
            "original": "'top' | 'bottom'",
            "resolved": "\"bottom\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "header-position",
          "reflectToAttr": false,
          "docs": "The position of the header",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'top'"
            }
          ],
          "default": "'top'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "headerType",
          "type": "\"basic\" | \"dark\" | \"divided\" | \"light\" | \"primary\"",
          "complexType": {
            "original": "'basic' | 'divided' | 'light' | 'dark' | 'primary'",
            "resolved": "\"basic\" | \"dark\" | \"divided\" | \"light\" | \"primary\"",
            "references": {}
          },
          "mutable": false,
          "attr": "header-type",
          "reflectToAttr": false,
          "docs": "The type of the header",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'basic'"
            }
          ],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "divided",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideHeader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-header",
          "reflectToAttr": false,
          "docs": "Controls whether the header is hidden",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "horizontal",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "horizontal",
          "reflectToAttr": false,
          "docs": "Controls whether the card is displayed horizontally",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "image",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "image",
          "reflectToAttr": false,
          "docs": "The image source for the card",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "null"
            }
          ],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "imageOptions",
          "type": "{ badge?: string; badgeIcon?: string; badgeIconPosition?: \"left\" | \"right\"; windowed?: boolean; background?: boolean; backgroundUrl?: string; position?: \"top\" | \"left\" | \"right\" | \"background\"; }",
          "complexType": {
            "original": "{\n    badge?: string;\n    badgeIcon?: string;\n    badgeIconPosition?: 'left' | 'right';\n    windowed?: boolean;\n    background?: boolean;\n    backgroundUrl?: string;\n    position?: 'top' | 'left' | 'right' | 'background';\n  }",
            "resolved": "{ badge?: string; badgeIcon?: string; badgeIconPosition?: \"left\" | \"right\"; windowed?: boolean; background?: boolean; backgroundUrl?: string; position?: \"top\" | \"left\" | \"right\" | \"background\"; }",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "TO DO\nOptions for the image display",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "{ position: 'top', background: false, windowed: false }"
            }
          ],
          "default": "{\n    position: 'top',\n    background: false,\n    windowed: true,\n  }",
          "values": [
            {
              "type": "{ badge?: string; badgeIcon?: string; badgeIconPosition?: \"left\""
            },
            {
              "value": "right\"; windowed?: boolean; background?: boolean; backgroundUrl?: string; position?: \"top",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "type": "\"background\"; }"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showAvatar",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-avatar",
          "reflectToAttr": false,
          "docs": "Controls whether the header avatar is shown",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showMenuButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-menu-button",
          "reflectToAttr": false,
          "docs": "Controls whether the menu button is shown",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "subheader",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "subheader",
          "reflectToAttr": false,
          "docs": "The subheader text",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "avatar",
          "docs": "Custom avatar template of card header."
        },
        {
          "name": "content",
          "docs": "Custom content template."
        },
        {
          "name": "default",
          "docs": "Default slot to detect child to inner body."
        },
        {
          "name": "footer",
          "docs": "Custom footer template."
        },
        {
          "name": "footer-actions",
          "docs": "Custom actions template to default footer."
        },
        {
          "name": "header",
          "docs": "Custom header template."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-avatar",
        "tk-button"
      ],
      "dependencyGraph": {
        "tk-card": [
          "tk-avatar",
          "tk-button"
        ],
        "tk-button": [
          "tk-spinner",
          "tk-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tk-chart/tk-chart.tsx",
      "encapsulation": "none",
      "tag": "tk-chart",
      "docs": "The TkChart component allows users to visualize data in various chart formats using Chart.js.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkChart } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkChart } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkChart } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "accessibilityLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "accessibility-label",
          "reflectToAttr": false,
          "docs": "Accessibility label for the chart",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "data",
          "type": "ChartData<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>",
          "complexType": {
            "original": "ChartData",
            "resolved": "ChartData<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>",
            "references": {
              "ChartData": {
                "location": "import",
                "path": "chart.js/auto",
                "id": "../../node_modules/.pnpm/chart.js@4.4.9/node_modules/chart.js/auto/auto.d.ts::ChartData"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Chart data prop is used to define chart data supported by the Chart.js library. With this prop, you can specify chart data described in the Chart.js documentation (https://www.chartjs.org/docs/latest/general/data-structures.html).",
          "docsTags": [],
          "values": [
            {
              "type": "ChartData<keyof ChartTypeRegistry, (number"
            },
            {
              "type": "Point"
            },
            {
              "type": "[number, number]"
            },
            {
              "type": "BubbleDataPoint)[], unknown>"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "height",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "height",
          "reflectToAttr": false,
          "docs": "Height of the chart container in pixels",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "options",
          "type": "{ datasets?: _DeepPartialObject<{ line: LineControllerDatasetOptions & FillerControllerDatasetOptions; bar: BarControllerDatasetOptions; scatter: LineControllerDatasetOptions; bubble: BubbleControllerDatasetOptions; pie: DoughnutControllerDatasetOptions; doughnut: DoughnutControllerDatasetOptions; polarArea: PolarAreaControllerDatasetOptions; radar: RadarControllerDatasetOptions & FillerControllerDatasetOptions; }>; indexAxis?: \"x\" | \"y\"; clip?: number | false | _DeepPartialObject<ChartArea>; color?: string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern> | ((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); backgroundColor?: string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern> | readonly (string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern>)[] | ((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); hoverBackgroundColor?: string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern> | readonly (string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern>)[] | ((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); borderColor?: string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern> | readonly (string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern>)[] | ((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); hoverBorderColor?: string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern> | readonly (string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern>)[] | ((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); font?: _DeepPartialObject<Partial<FontSpec>>; responsive?: boolean; maintainAspectRatio?: boolean; resizeDelay?: number; aspectRatio?: number; locale?: string; onResize?: (chart: Chart<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>, size: { width: number; height: number; }) => void; devicePixelRatio?: number; interaction?: _DeepPartialObject<CoreInteractionOptions>; hover?: _DeepPartialObject<CoreInteractionOptions>; events?: _DeepPartialArray<keyof HTMLElementEventMap>; onHover?: (event: ChartEvent, elements: ActiveElement[], chart: Chart<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>) => void; onClick?: (event: ChartEvent, elements: ActiveElement[], chart: Chart<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>) => void; layout?: _DeepPartialObject<Partial<{ autoPadding: boolean; padding: Scriptable<Padding, ScriptableContext<keyof ChartTypeRegistry>>; }>>; parsing?: false | _DeepPartialObject<{ [key: string]: string; }>; normalized?: boolean; animation?: false | _DeepPartialObject<AnimationSpec<keyof ChartTypeRegistry> & { onProgress?: (this: Chart<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void; onComplete?: (this: Chart<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void; }>; animations?: _DeepPartialObject<AnimationsSpec<keyof ChartTypeRegistry>>; transitions?: _DeepPartialObject<TransitionsSpec<keyof ChartTypeRegistry>>; elements?: _DeepPartialObject<ElementOptionsByType<keyof ChartTypeRegistry>>; plugins?: _DeepPartialObject<PluginOptionsByType<keyof ChartTypeRegistry>>; line?: _DeepPartialObject<{ datasets: LineControllerDatasetOptions & FillerControllerDatasetOptions; }>; bar?: _DeepPartialObject<{ datasets: BarControllerDatasetOptions; }>; scatter?: _DeepPartialObject<{ datasets: LineControllerDatasetOptions; }>; bubble?: _DeepPartialObject<{ datasets: BubbleControllerDatasetOptions; }>; pie?: _DeepPartialObject<{ datasets: DoughnutControllerDatasetOptions; }>; doughnut?: _DeepPartialObject<{ datasets: DoughnutControllerDatasetOptions; }>; polarArea?: _DeepPartialObject<{ datasets: PolarAreaControllerDatasetOptions; }>; radar?: _DeepPartialObject<{ datasets: RadarControllerDatasetOptions & FillerControllerDatasetOptions; }>; scales?: _DeepPartialObject<{ [key: string]: ScaleOptionsByType<\"radialLinear\" | keyof CartesianScaleTypeRegistry>; }>; }",
          "complexType": {
            "original": "ChartOptions",
            "resolved": "{ datasets?: _DeepPartialObject<{ line: LineControllerDatasetOptions & FillerControllerDatasetOptions; bar: BarControllerDatasetOptions; scatter: LineControllerDatasetOptions; bubble: BubbleControllerDatasetOptions; pie: DoughnutControllerDatasetOptions; doughnut: DoughnutControllerDatasetOptions; polarArea: PolarAreaControllerDatasetOptions; radar: RadarControllerDatasetOptions & FillerControllerDatasetOptions; }>; indexAxis?: \"x\" | \"y\"; clip?: number | false | _DeepPartialObject<ChartArea>; color?: string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern> | ((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); backgroundColor?: string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern> | readonly (string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern>)[] | ((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); hoverBackgroundColor?: string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern> | readonly (string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern>)[] | ((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); borderColor?: string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern> | readonly (string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern>)[] | ((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); hoverBorderColor?: string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern> | readonly (string | _DeepPartialObject<CanvasGradient> | _DeepPartialObject<CanvasPattern>)[] | ((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); font?: _DeepPartialObject<Partial<FontSpec>>; responsive?: boolean; maintainAspectRatio?: boolean; resizeDelay?: number; aspectRatio?: number; locale?: string; onResize?: (chart: Chart<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>, size: { width: number; height: number; }) => void; devicePixelRatio?: number; interaction?: _DeepPartialObject<CoreInteractionOptions>; hover?: _DeepPartialObject<CoreInteractionOptions>; events?: _DeepPartialArray<keyof HTMLElementEventMap>; onHover?: (event: ChartEvent, elements: ActiveElement[], chart: Chart<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>) => void; onClick?: (event: ChartEvent, elements: ActiveElement[], chart: Chart<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>) => void; layout?: _DeepPartialObject<Partial<{ autoPadding: boolean; padding: Scriptable<Padding, ScriptableContext<keyof ChartTypeRegistry>>; }>>; parsing?: false | _DeepPartialObject<{ [key: string]: string; }>; normalized?: boolean; animation?: false | _DeepPartialObject<AnimationSpec<keyof ChartTypeRegistry> & { onProgress?: (this: Chart<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void; onComplete?: (this: Chart<keyof ChartTypeRegistry, (number | Point | [number, number] | BubbleDataPoint)[], unknown>, event: AnimationEvent) => void; }>; animations?: _DeepPartialObject<AnimationsSpec<keyof ChartTypeRegistry>>; transitions?: _DeepPartialObject<TransitionsSpec<keyof ChartTypeRegistry>>; elements?: _DeepPartialObject<ElementOptionsByType<keyof ChartTypeRegistry>>; plugins?: _DeepPartialObject<PluginOptionsByType<keyof ChartTypeRegistry>>; line?: _DeepPartialObject<{ datasets: LineControllerDatasetOptions & FillerControllerDatasetOptions; }>; bar?: _DeepPartialObject<{ datasets: BarControllerDatasetOptions; }>; scatter?: _DeepPartialObject<{ datasets: LineControllerDatasetOptions; }>; bubble?: _DeepPartialObject<{ datasets: BubbleControllerDatasetOptions; }>; pie?: _DeepPartialObject<{ datasets: DoughnutControllerDatasetOptions; }>; doughnut?: _DeepPartialObject<{ datasets: DoughnutControllerDatasetOptions; }>; polarArea?: _DeepPartialObject<{ datasets: PolarAreaControllerDatasetOptions; }>; radar?: _DeepPartialObject<{ datasets: RadarControllerDatasetOptions & FillerControllerDatasetOptions; }>; scales?: _DeepPartialObject<{ [key: string]: ScaleOptionsByType<\"radialLinear\" | keyof CartesianScaleTypeRegistry>; }>; }",
            "references": {
              "ChartOptions": {
                "location": "import",
                "path": "chart.js/auto",
                "id": "../../node_modules/.pnpm/chart.js@4.4.9/node_modules/chart.js/auto/auto.d.ts::ChartOptions"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Chart options prop is used to define chart options supported by the Chart.js library. With this prop, you can specify any chart options described in the Chart.js documentation (https://www.chartjs.org/docs/latest/general/options.html).",
          "docsTags": [],
          "values": [
            {
              "type": "{ datasets?: _DeepPartialObject<{ line: LineControllerDatasetOptions & FillerControllerDatasetOptions; bar: BarControllerDatasetOptions; scatter: LineControllerDatasetOptions; bubble: BubbleControllerDatasetOptions; pie: DoughnutControllerDatasetOptions; doughnut: DoughnutControllerDatasetOptions; polarArea: PolarAreaControllerDatasetOptions; radar: RadarControllerDatasetOptions & FillerControllerDatasetOptions; }>; indexAxis?: \"x\""
            },
            {
              "type": "\"y\"; clip?: number"
            },
            {
              "value": "false",
              "type": "boolean"
            },
            {
              "type": "_DeepPartialObject<ChartArea>; color?: string"
            },
            {
              "type": "_DeepPartialObject<CanvasGradient>"
            },
            {
              "type": "_DeepPartialObject<CanvasPattern>"
            },
            {
              "type": "((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); backgroundColor?: string"
            },
            {
              "type": "_DeepPartialObject<CanvasGradient>"
            },
            {
              "type": "_DeepPartialObject<CanvasPattern>"
            },
            {
              "type": "readonly (string"
            },
            {
              "type": "_DeepPartialObject<CanvasGradient>"
            },
            {
              "type": "_DeepPartialObject<CanvasPattern>)[]"
            },
            {
              "type": "((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); hoverBackgroundColor?: string"
            },
            {
              "type": "_DeepPartialObject<CanvasGradient>"
            },
            {
              "type": "_DeepPartialObject<CanvasPattern>"
            },
            {
              "type": "readonly (string"
            },
            {
              "type": "_DeepPartialObject<CanvasGradient>"
            },
            {
              "type": "_DeepPartialObject<CanvasPattern>)[]"
            },
            {
              "type": "((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); borderColor?: string"
            },
            {
              "type": "_DeepPartialObject<CanvasGradient>"
            },
            {
              "type": "_DeepPartialObject<CanvasPattern>"
            },
            {
              "type": "readonly (string"
            },
            {
              "type": "_DeepPartialObject<CanvasGradient>"
            },
            {
              "type": "_DeepPartialObject<CanvasPattern>)[]"
            },
            {
              "type": "((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); hoverBorderColor?: string"
            },
            {
              "type": "_DeepPartialObject<CanvasGradient>"
            },
            {
              "type": "_DeepPartialObject<CanvasPattern>"
            },
            {
              "type": "readonly (string"
            },
            {
              "type": "_DeepPartialObject<CanvasGradient>"
            },
            {
              "type": "_DeepPartialObject<CanvasPattern>)[]"
            },
            {
              "type": "((ctx: ScriptableContext<keyof ChartTypeRegistry>, options: AnyObject) => Color); font?: _DeepPartialObject<Partial<FontSpec>>; responsive?: boolean; maintainAspectRatio?: boolean; resizeDelay?: number; aspectRatio?: number; locale?: string; onResize?: (chart: Chart<keyof ChartTypeRegistry, (number"
            },
            {
              "type": "Point"
            },
            {
              "type": "[number, number]"
            },
            {
              "type": "BubbleDataPoint)[], unknown>, size: { width: number; height: number; }) => void; devicePixelRatio?: number; interaction?: _DeepPartialObject<CoreInteractionOptions>; hover?: _DeepPartialObject<CoreInteractionOptions>; events?: _DeepPartialArray<keyof HTMLElementEventMap>; onHover?: (event: ChartEvent, elements: ActiveElement[], chart: Chart<keyof ChartTypeRegistry, (number"
            },
            {
              "type": "Point"
            },
            {
              "type": "[number, number]"
            },
            {
              "type": "BubbleDataPoint)[], unknown>) => void; onClick?: (event: ChartEvent, elements: ActiveElement[], chart: Chart<keyof ChartTypeRegistry, (number"
            },
            {
              "type": "Point"
            },
            {
              "type": "[number, number]"
            },
            {
              "type": "BubbleDataPoint)[], unknown>) => void; layout?: _DeepPartialObject<Partial<{ autoPadding: boolean; padding: Scriptable<Padding, ScriptableContext<keyof ChartTypeRegistry>>; }>>; parsing?: false"
            },
            {
              "type": "_DeepPartialObject<{ [key: string]: string; }>; normalized?: boolean; animation?: false"
            },
            {
              "type": "_DeepPartialObject<AnimationSpec<keyof ChartTypeRegistry> & { onProgress?: (this: Chart<keyof ChartTypeRegistry, (number"
            },
            {
              "type": "Point"
            },
            {
              "type": "[number, number]"
            },
            {
              "type": "BubbleDataPoint)[], unknown>, event: AnimationEvent) => void; onComplete?: (this: Chart<keyof ChartTypeRegistry, (number"
            },
            {
              "type": "Point"
            },
            {
              "type": "[number, number]"
            },
            {
              "type": "BubbleDataPoint)[], unknown>, event: AnimationEvent) => void; }>; animations?: _DeepPartialObject<AnimationsSpec<keyof ChartTypeRegistry>>; transitions?: _DeepPartialObject<TransitionsSpec<keyof ChartTypeRegistry>>; elements?: _DeepPartialObject<ElementOptionsByType<keyof ChartTypeRegistry>>; plugins?: _DeepPartialObject<PluginOptionsByType<keyof ChartTypeRegistry>>; line?: _DeepPartialObject<{ datasets: LineControllerDatasetOptions & FillerControllerDatasetOptions; }>; bar?: _DeepPartialObject<{ datasets: BarControllerDatasetOptions; }>; scatter?: _DeepPartialObject<{ datasets: LineControllerDatasetOptions; }>; bubble?: _DeepPartialObject<{ datasets: BubbleControllerDatasetOptions; }>; pie?: _DeepPartialObject<{ datasets: DoughnutControllerDatasetOptions; }>; doughnut?: _DeepPartialObject<{ datasets: DoughnutControllerDatasetOptions; }>; polarArea?: _DeepPartialObject<{ datasets: PolarAreaControllerDatasetOptions; }>; radar?: _DeepPartialObject<{ datasets: RadarControllerDatasetOptions & FillerControllerDatasetOptions; }>; scales?: _DeepPartialObject<{ [key: string]: ScaleOptionsByType<\"radialLinear\""
            },
            {
              "type": "keyof CartesianScaleTypeRegistry>; }>; }"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "plugins",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Custom plugins to use with chart",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"bar\" | \"bubble\" | \"doughnut\" | \"line\" | \"pie\" | \"polarArea\" | \"radar\" | \"scatter\"",
          "complexType": {
            "original": "ChartType",
            "resolved": "\"bar\" | \"bubble\" | \"doughnut\" | \"line\" | \"pie\" | \"polarArea\" | \"radar\" | \"scatter\"",
            "references": {
              "ChartType": {
                "location": "import",
                "path": "chart.js/auto",
                "id": "../../node_modules/.pnpm/chart.js@4.4.9/node_modules/chart.js/auto/auto.d.ts::ChartType"
              }
            }
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of chart to render",
          "docsTags": [],
          "default": "'bar'",
          "values": [
            {
              "value": "bar",
              "type": "string"
            },
            {
              "value": "bubble",
              "type": "string"
            },
            {
              "value": "doughnut",
              "type": "string"
            },
            {
              "value": "line",
              "type": "string"
            },
            {
              "value": "pie",
              "type": "string"
            },
            {
              "value": "polarArea",
              "type": "string"
            },
            {
              "value": "radar",
              "type": "string"
            },
            {
              "value": "scatter",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "width",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "width",
          "reflectToAttr": false,
          "docs": "Width of the chart container",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "getBase64Image",
          "returns": {
            "type": "Promise<string>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<string | undefined>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<string>"
          },
          "signature": "getBase64Image() => Promise<string | undefined>",
          "parameters": [],
          "docs": "Get base64 image of the chart",
          "docsTags": []
        },
        {
          "name": "getCanvas",
          "returns": {
            "type": "Promise<HTMLCanvasElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLCanvasElement | undefined>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLCanvasElement": {
                "location": "global",
                "id": "global::HTMLCanvasElement"
              }
            },
            "return": "Promise<HTMLCanvasElement>"
          },
          "signature": "getCanvas() => Promise<HTMLCanvasElement | undefined>",
          "parameters": [],
          "docs": "Get the canvas element",
          "docsTags": []
        },
        {
          "name": "getChart",
          "returns": {
            "type": "Promise<any>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<any>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<any>"
          },
          "signature": "getChart() => Promise<any>",
          "parameters": [],
          "docs": "Get the chart instance",
          "docsTags": []
        },
        {
          "name": "refresh",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "refresh() => Promise<void>",
          "parameters": [],
          "docs": "Refresh the chart",
          "docsTags": []
        }
      ],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-checkbox/tk-checkbox.tsx",
      "encapsulation": "none",
      "tag": "tk-checkbox",
      "docs": "The TkCheckbox component is another basic element for user input. You can use this to supply a way for the user to toggle an option.",
      "docsTags": [
        {
          "name": "slot",
          "text": "content - Custom content template."
        },
        {
          "name": "react",
          "text": "`import { TkCheckbox } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkCheckbox } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkCheckbox } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "The description sub text displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If true, the user cannot interact with the checkbox.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "indeterminate",
          "reflectToAttr": false,
          "docs": "If true, the checkbox will be indeterminate.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Indicates whether the input is in an invalid state",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label for the checkbox.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "Name of the checkbox",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"card\" | \"default\"",
          "complexType": {
            "original": "'default' | 'card'",
            "resolved": "\"card\" | \"default\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Determines the appearance types of the checkbox.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "card",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "Sets the checkbox value",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tk-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the checkbox checked state changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "content",
          "docs": "Custom content template."
        }
      ],
      "parts": [],
      "dependents": [
        "tk-select",
        "tk-table"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "tk-select": [
          "tk-checkbox"
        ],
        "tk-table": [
          "tk-checkbox"
        ]
      }
    },
    {
      "filePath": "src/components/tk-chips/tk-chips.tsx",
      "encapsulation": "shadow",
      "tag": "tk-chips",
      "docs": "The TkChip component is basically a simple UI block entity, representing for example more advanced underlying data, such as a contact, in a compact way. Chips can contain entities such as an avatar, text or an icon, optionally having a pointer too.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkChips } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkChips } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkChips } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "autoSelfDestroy",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-self-destroy",
          "reflectToAttr": false,
          "docs": "Determines whether the chip automatically removes itself when the close button is clicked.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "true"
            }
          ],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "The disabled status.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon name to be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label to display inside the chip.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "removable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "removable",
          "reflectToAttr": false,
          "docs": "This property determines whether the chip component is removable.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\"",
          "complexType": {
            "original": "'large' | 'base' | 'small'",
            "resolved": "\"base\" | \"large\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size for the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'base'"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"avatar\" | \"filled\" | \"filledlight\" | \"outlined\"",
          "complexType": {
            "original": "'filled' | 'filledlight' | 'outlined' | 'avatar'",
            "resolved": "\"avatar\" | \"filled\" | \"filledlight\" | \"outlined\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "This field specifies the design type of the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "filled"
            }
          ],
          "default": "'filled'",
          "values": [
            {
              "value": "avatar",
              "type": "string"
            },
            {
              "value": "filled",
              "type": "string"
            },
            {
              "value": "filledlight",
              "type": "string"
            },
            {
              "value": "outlined",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"neutral\" | \"primary\" | \"secondary\" | \"success\" | \"verified\" | \"warning\"",
          "complexType": {
            "original": "'primary' | 'secondary' | 'neutral' | 'info' | 'success' | 'danger' | 'warning' | 'verified'",
            "resolved": "\"danger\" | \"info\" | \"neutral\" | \"primary\" | \"secondary\" | \"success\" | \"verified\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "The variant of the chip for styling.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'primary'"
            }
          ],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "verified",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tk-remove",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "When an element is deleted, it is triggered. It returns the label.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "tk-input"
      ],
      "dependencies": [
        "tk-icon"
      ],
      "dependencyGraph": {
        "tk-chips": [
          "tk-icon"
        ],
        "tk-input": [
          "tk-chips"
        ]
      }
    },
    {
      "filePath": "src/components/tk-currency-input/tk-currency-input.tsx",
      "encapsulation": "shadow",
      "tag": "tk-currency-input",
      "docs": "TkCurrencyInput component description.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkCurrencyInput } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkCurrencyInput } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkCurrencyInput } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "currency",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "currency",
          "reflectToAttr": false,
          "docs": "Specifies the currency to be displayed.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'TL'"
            }
          ],
          "default": "'TL'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "currencyOptions",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Defines the available currency options for the user to select from.",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "decimalSeparator",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "decimal-separator",
          "reflectToAttr": false,
          "docs": "Sets the character used to separate the decimal part.",
          "docsTags": [],
          "default": "','",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "error",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "This is the error message that will be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "Provided a hint or additional information about the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string | undefined",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon name to be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Indicates whether the input is in an invalid state.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label for the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "default": "this.inputId",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string | null",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Placeholder text displayed when the input is empty.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "precision",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "precision",
          "reflectToAttr": false,
          "docs": "Determines the number of decimal places to display, like 2 decimal places for cents.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "2"
            }
          ],
          "default": "2",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\"",
          "complexType": {
            "original": "'large' | 'base' | 'small'",
            "resolved": "\"base\" | \"large\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size for the component.",
          "docsTags": [],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "thousandsSeparator",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "thousands-separator",
          "reflectToAttr": false,
          "docs": "Specifies the character used to separate thousands in large numbers.",
          "docsTags": [],
          "default": "'.'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number | null",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the specified `tk-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "tk-blur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "tk-change",
          "detail": "number | string",
          "bubbles": true,
          "complexType": {
            "original": "string | number | undefined | null",
            "resolved": "number | string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "tk-focus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "tk-input",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "complexType": {
            "original": "KeyboardEvent",
            "resolved": "KeyboardEvent",
            "references": {
              "KeyboardEvent": {
                "location": "global",
                "id": "global::KeyboardEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-datepicker/tk-datepicker.tsx",
      "encapsulation": "shadow",
      "tag": "tk-datepicker",
      "docs": "The `TkDatepicker` component is a versatile and customizable date picker that supports `single` date and date `range` selection. It offers various display modes, localization, and customizable date formatting.",
      "docsTags": [
        {
          "name": "slot",
          "text": "footer - Custom footer template."
        },
        {
          "name": "slot",
          "text": "footer-actions - Custom actions template to default footer."
        },
        {
          "name": "react",
          "text": "`import { TkDatepicker } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkDatepicker } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkDatepicker } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "allowedDates",
          "type": "string[]",
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Array of dates that are allowed to be selected. All other dates will be disabled.\n\nNote: Format should match dateFormat prop",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "clearable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "Indicates whether the input of datepicker can be cleared",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "dateFormat",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "date-format",
          "reflectToAttr": false,
          "docs": "Date format pattern",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "yyyy-MM-dd"
            }
          ],
          "default": "'yyyy-MM-dd'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disableMask",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disable-mask",
          "reflectToAttr": false,
          "docs": "Whether to disable input mask",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Whether the datepicker is disabled",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabledDates",
          "type": "string[]",
          "complexType": {
            "original": "string[]",
            "resolved": "string[]",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Array of dates that are disabled for selection.\n\nFormat should match dateFormat prop",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "string[]"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabledWeekDays",
          "type": "number[]",
          "complexType": {
            "original": "number[]",
            "resolved": "number[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Disabled week days (0-6, where 0 is Sunday and 6 is Saturday)\nExample: [0,6] will disable Sunday and Saturday",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "number[]"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "error",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "Error message to display",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "firstDayOfWeekIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "first-day-of-week-index",
          "reflectToAttr": false,
          "docs": "Defines the first day of the week. 0 for Monday, 1 for Tuesday, ..., 6 for Sunday.\nIf not provided, the first day of the week is determined by the `locale` prop.\nIf neither `firstDayOfWeekIndex` nor `locale` provide a value, defaults to Monday (0).\nProviding this prop overrides the locale setting for the start of the week.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "footerType",
          "type": "\"basic\" | \"divided\" | \"light\"",
          "complexType": {
            "original": "'basic' | 'divided' | 'light'",
            "resolved": "\"basic\" | \"divided\" | \"light\"",
            "references": {}
          },
          "mutable": false,
          "attr": "footer-type",
          "reflectToAttr": false,
          "docs": "The visual variant of the footer: 'basic', 'divided', or 'light'.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "basic"
            }
          ],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "divided",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "headerType",
          "type": "\"basic\" | \"dark\" | \"divided\" | \"light\" | \"primary\"",
          "complexType": {
            "original": "'basic' | 'divided' | 'light' | 'primary' | 'dark'",
            "resolved": "\"basic\" | \"dark\" | \"divided\" | \"light\" | \"primary\"",
            "references": {}
          },
          "mutable": false,
          "attr": "header-type",
          "reflectToAttr": false,
          "docs": "Header visual variant",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "basic"
            }
          ],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "divided",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "Hint text to display",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hourStep",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "hour-step",
          "reflectToAttr": false,
          "docs": "Hour increment step.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "1"
            }
          ],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "inline",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "inline",
          "reflectToAttr": false,
          "docs": "Whether to display inline panel",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Whether the datepicker is in an invalid state",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label for the input",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "locale",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "locale",
          "reflectToAttr": false,
          "docs": "Locale for date formatting",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "en"
            }
          ],
          "default": "'en'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "maxDate",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max-date",
          "reflectToAttr": false,
          "docs": "Maximum selectable date",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "maxTime",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "max-time",
          "reflectToAttr": false,
          "docs": "Maximum selectable time (HH:mm format).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "minDate",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min-date",
          "reflectToAttr": false,
          "docs": "Minimum selectable date",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "minTime",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "min-time",
          "reflectToAttr": false,
          "docs": "Minimum selectable time (HH:mm format).",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "minuteStep",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "minute-step",
          "reflectToAttr": false,
          "docs": "Minute increment step.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "1"
            }
          ],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "mode",
          "type": "\"range\" | \"single\"",
          "complexType": {
            "original": "'single' | 'range'",
            "resolved": "\"range\" | \"single\"",
            "references": {}
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "The selection mode of the date picker: 'single' for single date selection, 'range' for date range selection.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "single"
            }
          ],
          "default": "'single'",
          "values": [
            {
              "value": "range",
              "type": "string"
            },
            {
              "value": "single",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Input placeholder text",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showAsterisk",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-asterisk",
          "reflectToAttr": false,
          "docs": "Displays a red asterisk (*) next to the label for visual emphasis.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showTimePicker",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-time-picker",
          "reflectToAttr": false,
          "docs": "Whether to show the timepicker panel next to the calendar.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "timeFormat",
          "type": "\"12\" | \"24\"",
          "complexType": {
            "original": "'12' | '24'",
            "resolved": "\"12\" | \"24\"",
            "references": {}
          },
          "mutable": false,
          "attr": "time-format",
          "reflectToAttr": false,
          "docs": "Time format: '12' or '24'.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'24'"
            }
          ],
          "default": "'24'",
          "values": [
            {
              "value": "12",
              "type": "string"
            },
            {
              "value": "24",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "IDateSelection | string",
          "complexType": {
            "original": "string | IDateSelection",
            "resolved": "IDateSelection | string",
            "references": {
              "IDateSelection": {
                "location": "local",
                "path": "/Users/H_DEMIR3/Documents/GitHub/takeoff-ui/packages/core/src/components/tk-datepicker/tk-datepicker.tsx",
                "id": "src/components/tk-datepicker/tk-datepicker.tsx::IDateSelection"
              }
            }
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value representing the selected date(s)",
          "docsTags": [],
          "values": [
            {
              "type": "IDateSelection"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "setToday",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setToday() => Promise<void>",
          "parameters": [],
          "docs": "Sets the date to today",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "tk-change",
          "detail": "IDateSelection | string",
          "bubbles": true,
          "complexType": {
            "original": "IDateSelection | string",
            "resolved": "IDateSelection | string",
            "references": {
              "IDateSelection": {
                "location": "local",
                "path": "/Users/H_DEMIR3/Documents/GitHub/takeoff-ui/packages/core/src/components/tk-datepicker/tk-datepicker.tsx",
                "id": "src/components/tk-datepicker/tk-datepicker.tsx::IDateSelection"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted on date selection changes",
          "docsTags": []
        },
        {
          "event": "tk-input-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted on input value changes",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "footer",
          "docs": "Custom footer template."
        },
        {
          "name": "footer-actions",
          "docs": "Custom actions template to default footer."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-button",
        "tk-input"
      ],
      "dependencyGraph": {
        "tk-datepicker": [
          "tk-button",
          "tk-input"
        ],
        "tk-button": [
          "tk-spinner",
          "tk-icon"
        ],
        "tk-input": [
          "tk-chips",
          "tk-icon",
          "tk-button"
        ],
        "tk-chips": [
          "tk-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tk-dialog/tk-dialog.tsx",
      "encapsulation": "none",
      "tag": "tk-dialog",
      "docs": "The `TkDialog` component provides a customizable modal dialog for displaying important information or requesting user input. It supports various configurations including different header types, variants, and customizable content.",
      "docsTags": [
        {
          "name": "slot",
          "text": "default - Default slot to detect child to inner content."
        },
        {
          "name": "slot",
          "text": "container - Custom container template."
        },
        {
          "name": "slot",
          "text": "header - Custom header template."
        },
        {
          "name": "slot",
          "text": "content - Custom content template."
        },
        {
          "name": "slot",
          "text": "footer - Custom footer template."
        },
        {
          "name": "slot",
          "text": "footer-actions - Custom actions template to default footer."
        },
        {
          "name": "react",
          "text": "`import { TkDialog } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkDialog } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkDialog } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "containerStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "container-style",
          "reflectToAttr": false,
          "docs": "The style attribute of container element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "The header text",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "headerType",
          "type": "\"basic\" | \"dark\" | \"divided\" | \"light\" | \"primary\"",
          "complexType": {
            "original": "'basic' | 'divided' | 'light' | 'dark' | 'primary'",
            "resolved": "\"basic\" | \"dark\" | \"divided\" | \"light\" | \"primary\"",
            "references": {}
          },
          "mutable": false,
          "attr": "header-type",
          "reflectToAttr": false,
          "docs": "Header type",
          "docsTags": [],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "divided",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideBackdrop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-backdrop",
          "reflectToAttr": false,
          "docs": "Controls whether the backdrop is shown",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "maskVariant",
          "type": "\"base\" | \"dark\" | \"darkest\" | \"light\" | \"lightest\"",
          "complexType": {
            "original": "'lightest' | 'light' | 'base' | 'dark' | 'darkest'",
            "resolved": "\"base\" | \"dark\" | \"darkest\" | \"light\" | \"lightest\"",
            "references": {}
          },
          "mutable": false,
          "attr": "mask-variant",
          "reflectToAttr": false,
          "docs": "Appearance of the mask",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "base"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "darkest",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "lightest",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "preventDismiss",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "prevent-dismiss",
          "reflectToAttr": false,
          "docs": "Prevents the dialog from being dismissed by clicking outside",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showCloseButton",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-close-button",
          "reflectToAttr": false,
          "docs": "Controls whether the close button is shown",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showHeader",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-header",
          "reflectToAttr": false,
          "docs": "Controls whether the header is shown",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showVariantSign",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-variant-sign",
          "reflectToAttr": false,
          "docs": "Controls whether the variant sign is shown",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "subheader",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "subheader",
          "reflectToAttr": false,
          "docs": "The subheader text",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"success\" | \"warning\"",
          "complexType": {
            "original": "'success' | 'info' | 'warning' | 'danger'",
            "resolved": "\"danger\" | \"info\" | \"success\" | \"warning\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "The variant of the dialog",
          "docsTags": [],
          "default": "'info'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "visible",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "visible",
          "reflectToAttr": true,
          "docs": "Controls the visibility of the dialog",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Requests to close the dialog by emitting a tk-close event.\nNote: This method only emits an event. The dialog will only close if the parent component\nlistens for this event and updates the 'visible' prop to false.",
          "docsTags": []
        },
        {
          "name": "open",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "open() => Promise<void>",
          "parameters": [],
          "docs": "Requests to open the dialog by emitting a tk-open event.\nNote: This method only emits an event. The dialog will only open if the parent component\nlistens for this event and updates the 'visible' prop to true.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "tk-close",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the dialog is closed",
          "docsTags": []
        },
        {
          "event": "tk-open",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the dialog is opened",
          "docsTags": []
        },
        {
          "event": "tk-visible-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the dialog visibility changes",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "container",
          "docs": "Custom container template."
        },
        {
          "name": "content",
          "docs": "Custom content template."
        },
        {
          "name": "default",
          "docs": "Default slot to detect child to inner content."
        },
        {
          "name": "footer",
          "docs": "Custom footer template."
        },
        {
          "name": "footer-actions",
          "docs": "Custom actions template to default footer."
        },
        {
          "name": "header",
          "docs": "Custom header template."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-icon",
        "tk-button"
      ],
      "dependencyGraph": {
        "tk-dialog": [
          "tk-icon",
          "tk-button"
        ],
        "tk-button": [
          "tk-spinner",
          "tk-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tk-divider/tk-divider.tsx",
      "encapsulation": "shadow",
      "tag": "tk-divider",
      "docs": "TkDivider is a component that allows you to separate different sections, elements and content.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkDivider } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkDivider } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkDivider } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "mx",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "mx",
          "reflectToAttr": false,
          "docs": "Controls vertical spacing",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "my",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "my",
          "reflectToAttr": false,
          "docs": "Controls horizontal spacing",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "orientation",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'horizontal' | 'vertical'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "Controls the orientation of the divider component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "horizontal"
            }
          ],
          "default": "'horizontal'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-drawer/tk-drawer.tsx",
      "encapsulation": "shadow",
      "tag": "tk-drawer",
      "docs": "The `TkDrawer` is a container component displayed as an overlay. It supports various features such as different header and footer types, multiple variants, and flexible positioning, making it suitable for a wide range of use cases.",
      "docsTags": [
        {
          "name": "slot",
          "text": "container - Custom container template."
        },
        {
          "name": "slot",
          "text": "header - Custom header template."
        },
        {
          "name": "slot",
          "text": "header-action - Custom actions template of header."
        },
        {
          "name": "slot",
          "text": "content - Custom inner body template."
        },
        {
          "name": "slot",
          "text": "footer - Custom footer template."
        },
        {
          "name": "react",
          "text": "`import { TkDrawer } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkDrawer } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkDrawer } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "containerStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "container-style",
          "reflectToAttr": false,
          "docs": "The style attribute of container element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "footerType",
          "type": "\"basic\" | \"divided\" | \"light\"",
          "complexType": {
            "original": "'basic' | 'divided' | 'light'",
            "resolved": "\"basic\" | \"divided\" | \"light\"",
            "references": {}
          },
          "mutable": false,
          "attr": "footer-type",
          "reflectToAttr": false,
          "docs": "The mode of the footer",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'basic'"
            }
          ],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "divided",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "Text to display in the drawer header",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "headerType",
          "type": "\"basic\" | \"dark\" | \"divided\" | \"light\" | \"primary\"",
          "complexType": {
            "original": "'basic' | 'divided' | 'light' | 'dark' | 'primary'",
            "resolved": "\"basic\" | \"dark\" | \"divided\" | \"light\" | \"primary\"",
            "references": {}
          },
          "mutable": false,
          "attr": "header-type",
          "reflectToAttr": false,
          "docs": "The type of the header",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'basic'"
            }
          ],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "divided",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideBackdrop",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-backdrop",
          "reflectToAttr": false,
          "docs": "Controls whether the backdrop is shown",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideCloseIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-close-icon",
          "reflectToAttr": false,
          "docs": "Controls whether to hide the close icon",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "maskVariant",
          "type": "\"base\" | \"dark\" | \"darkest\" | \"light\" | \"lightest\"",
          "complexType": {
            "original": "'lightest' | 'light' | 'base' | 'dark' | 'darkest'",
            "resolved": "\"base\" | \"dark\" | \"darkest\" | \"light\" | \"lightest\"",
            "references": {}
          },
          "mutable": false,
          "attr": "mask-variant",
          "reflectToAttr": false,
          "docs": "Appearance of the mask",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "base"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "darkest",
              "type": "string"
            },
            {
              "value": "light",
              "type": "string"
            },
            {
              "value": "lightest",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "open",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "open",
          "reflectToAttr": true,
          "docs": "Controls whether the drawer is open or closed",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "position",
          "type": "\"bottom\" | \"full-screen\" | \"left\" | \"right\" | \"top\"",
          "complexType": {
            "original": "'left' | 'right' | 'top' | 'bottom' | 'full-screen'",
            "resolved": "\"bottom\" | \"full-screen\" | \"left\" | \"right\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Determines the position of the drawer",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "right"
            }
          ],
          "default": "'right'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "full-screen",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "preventDismiss",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "prevent-dismiss",
          "reflectToAttr": false,
          "docs": "Prevents the drawer from being dismissed by clicking outside",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "unblockScroll",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "unblock-scroll",
          "reflectToAttr": false,
          "docs": "Controls whether to unblock scrolling when the drawer is open",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "close",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "close() => Promise<void>",
          "parameters": [],
          "docs": "Closes the drawer by emitting a tk-drawer-close event\nParent components should listen for this event and update the open prop",
          "docsTags": []
        },
        {
          "name": "show",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "show() => Promise<void>",
          "parameters": [],
          "docs": "Opens the drawer by emitting a tk-drawer-open event\nParent components should listen for this event and update the open prop",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "tk-drawer-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the drawer's open state changes",
          "docsTags": []
        },
        {
          "event": "tk-drawer-close",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the drawer is closed",
          "docsTags": []
        },
        {
          "event": "tk-drawer-enter",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the drawer starts to enter",
          "docsTags": []
        },
        {
          "event": "tk-drawer-leave",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the drawer starts to leave",
          "docsTags": []
        },
        {
          "event": "tk-drawer-open",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the drawer is opened",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "container",
          "docs": "Custom container template."
        },
        {
          "name": "content",
          "docs": "Custom inner body template."
        },
        {
          "name": "footer",
          "docs": "Custom footer template."
        },
        {
          "name": "header",
          "docs": "Custom header template."
        },
        {
          "name": "header-action",
          "docs": "Custom actions template of header."
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-button"
      ],
      "dependencyGraph": {
        "tk-drawer": [
          "tk-button"
        ],
        "tk-button": [
          "tk-spinner",
          "tk-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tk-dropdown/tk-dropdown.tsx",
      "encapsulation": "none",
      "tag": "tk-dropdown",
      "docs": "TkDropdown creates a dropdown with a trigger element. Items in the options prop can be listed and templated.",
      "docsTags": [
        {
          "name": "slot",
          "text": "trigger - The trigger slot defines the element that will trigger the dropdown"
        },
        {
          "name": "slot",
          "text": "empty-data - Set how the dropdown will appear when there is no data"
        },
        {
          "name": "react",
          "text": "`import { TkDropdown } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkDropdown } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkDropdown } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "The disabled status.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "emptyMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "empty-message",
          "reflectToAttr": false,
          "docs": "The message to display when there is no data available.",
          "docsTags": [],
          "default": "'No options available'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "groupNameKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "group-name-key",
          "reflectToAttr": false,
          "docs": "The key to use for group names when options are grouped",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "groupName"
            }
          ],
          "default": "'groupName'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "groupOptionsKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "group-options-key",
          "reflectToAttr": false,
          "docs": "The key to use for grouped options array",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "options"
            }
          ],
          "default": "'options'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "optionHtml",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Provides a function to customize the options.",
          "docsTags": [],
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "optionLabelKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-label-key",
          "reflectToAttr": false,
          "docs": "The key to use for option labels",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "label"
            }
          ],
          "default": "'label'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "optionValueKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-value-key",
          "reflectToAttr": false,
          "docs": "The key to use for option values",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "value"
            }
          ],
          "default": "'value'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "options",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The list of options to be displayed in the select box.",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "optionsAlign",
          "type": "\"center\" | \"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'center' | 'right'",
            "resolved": "\"center\" | \"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "options-align",
          "reflectToAttr": false,
          "docs": "Indicates the alignment of options.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "left"
            }
          ],
          "default": "'left'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "position",
          "type": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
          "complexType": {
            "original": "'top' | 'top-start' | 'top-end' | 'bottom' | 'bottom-start' | 'bottom-end' | 'left' | 'left-start' | 'left-end' | 'right' | 'right-start' | 'right-end'",
            "resolved": "\"bottom\" | \"bottom-end\" | \"bottom-start\" | \"left\" | \"left-end\" | \"left-start\" | \"right\" | \"right-end\" | \"right-start\" | \"top\" | \"top-end\" | \"top-start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Sets the position of the tooltip.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'right'"
            }
          ],
          "default": "'bottom'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "bottom-end",
              "type": "string"
            },
            {
              "value": "bottom-start",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "left-end",
              "type": "string"
            },
            {
              "value": "left-start",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "right-end",
              "type": "string"
            },
            {
              "value": "right-start",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            },
            {
              "value": "top-end",
              "type": "string"
            },
            {
              "value": "top-start",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tk-item-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "empty-data",
          "docs": "Set how the dropdown will appear when there is no data"
        },
        {
          "name": "trigger",
          "docs": "The trigger slot defines the element that will trigger the dropdown"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-editor/tk-editor.tsx",
      "encapsulation": "none",
      "tag": "tk-editor",
      "docs": "TkEditor is a WYSIWYG editor component that wraps Tiptap editor.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "contentStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "content-style",
          "reflectToAttr": false,
          "docs": "The style attribute of tabs item element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "customToolbarButtons",
          "type": "TkEditorCustomButton[]",
          "complexType": {
            "original": "TkEditorCustomButton[]",
            "resolved": "TkEditorCustomButton[]",
            "references": {
              "TkEditorCustomButton": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-editor/interfaces.ts::TkEditorCustomButton"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Custom toolbar buttons for extensions",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "TkEditorCustomButton[]"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Whether the editor is disabled",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "error",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "This is the error message that will be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "extensions",
          "type": "AnyExtension[]",
          "complexType": {
            "original": "AnyExtension[]",
            "resolved": "AnyExtension[]",
            "references": {
              "AnyExtension": {
                "location": "import",
                "path": "@tiptap/core",
                "id": "../../node_modules/.pnpm/@tiptap+core@2.11.7_@tiptap+pm@2.11.7/node_modules/@tiptap/core/dist/index.d.ts::AnyExtension"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Custom extensions",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "AnyExtension[]"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hideToolbar",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "hide-toolbar",
          "reflectToAttr": false,
          "docs": "Whether to hide the toolbar",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "Provided a hint or additional information about the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Indicates whether the editor is in an invalid state",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label for the toggle",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "The placeholder text when editor is empty",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "Whether the editor is readonly",
          "docsTags": [
            {
              "name": "default",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showAsterisk",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-asterisk",
          "reflectToAttr": false,
          "docs": "Displays a red asterisk (*) next to the label for visual emphasis.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "toolbar",
          "type": "(TkEditorDefaultButton | TkEditorCustomButton)[][]",
          "complexType": {
            "original": "TkEditorToolbarConfig",
            "resolved": "(TkEditorDefaultButton | TkEditorCustomButton)[][]",
            "references": {
              "TkEditorToolbarConfig": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-editor/interfaces.ts::TkEditorToolbarConfig"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Toolbar configuration",
          "docsTags": [],
          "values": [
            {
              "type": "(TkEditorDefaultButton"
            },
            {
              "type": "TkEditorCustomButton)[][]"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the editor",
          "docsTags": [
            {
              "name": "default",
              "text": "''"
            }
          ],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "getContent",
          "returns": {
            "type": "Promise<string | JSONContent>",
            "docs": ""
          },
          "complexType": {
            "signature": "(format?: \"json\" | \"html\" | \"text\") => Promise<JSONContent | string>",
            "parameters": [
              {
                "name": "format",
                "type": "\"json\" | \"html\" | \"text\"",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "JSONContent": {
                "location": "import",
                "path": "@tiptap/core",
                "id": "../../node_modules/.pnpm/@tiptap+core@2.11.7_@tiptap+pm@2.11.7/node_modules/@tiptap/core/dist/index.d.ts::JSONContent"
              }
            },
            "return": "Promise<string | JSONContent>"
          },
          "signature": "getContent(format?: \"json\" | \"html\" | \"text\") => Promise<JSONContent | string>",
          "parameters": [
            {
              "name": "format",
              "type": "\"json\" | \"html\" | \"text\"",
              "docs": ""
            }
          ],
          "docs": "Gets the current content of the editor",
          "docsTags": []
        },
        {
          "name": "getEditor",
          "returns": {
            "type": "Promise<Editor>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<Editor>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "Editor": {
                "location": "import",
                "path": "@tiptap/core",
                "id": "../../node_modules/.pnpm/@tiptap+core@2.11.7_@tiptap+pm@2.11.7/node_modules/@tiptap/core/dist/index.d.ts::Editor"
              }
            },
            "return": "Promise<Editor>"
          },
          "signature": "getEditor() => Promise<Editor>",
          "parameters": [],
          "docs": "Returns the Tiptap Editor instance",
          "docsTags": []
        },
        {
          "name": "setContent",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(content: string) => Promise<void>",
            "parameters": [
              {
                "name": "content",
                "type": "string",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setContent(content: string) => Promise<void>",
          "parameters": [
            {
              "name": "content",
              "type": "string",
              "docs": ""
            }
          ],
          "docs": "Sets the content of the editor",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "tk-change",
          "detail": "string",
          "bubbles": true,
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when editor content changes",
          "docsTags": []
        },
        {
          "event": "tkBlur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when editor loses focus",
          "docsTags": []
        },
        {
          "event": "tkFocus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when editor gets focus",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-icon"
      ],
      "dependencyGraph": {
        "tk-editor": [
          "tk-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tk-icon/tk-icon.tsx",
      "encapsulation": "none",
      "tag": "tk-icon",
      "docs": "The TkIcon component allows you to create a icon for adding visual information. It is also often useful in combination with other elements.\nThis component uses Google's Material Symbols icons. For a complete list of available icon names, please visit:\nhttps://fonts.google.com/icons?icon.set=Material+Symbols",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkIcon } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkIcon } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkIcon } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "backgroundColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "background-color",
          "reflectToAttr": false,
          "docs": "The background color of the sign (custom variant)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "borderColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "border-color",
          "reflectToAttr": false,
          "docs": "The border color of the sign (custom variant)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "color",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "color",
          "reflectToAttr": false,
          "docs": "The color of the icon",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "fill",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "fill",
          "reflectToAttr": false,
          "docs": "Indicates whether the icon should be filled",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "iconColor",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-color",
          "reflectToAttr": false,
          "docs": "The color of the icon (custom variant)",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "iconTag",
          "type": "\"i\" | \"span\"",
          "complexType": {
            "original": "'i' | 'span'",
            "resolved": "\"i\" | \"span\"",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-tag",
          "reflectToAttr": false,
          "docs": "The HTML tag to use for the icon element.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'i'"
            }
          ],
          "default": "'i'",
          "values": [
            {
              "value": "i",
              "type": "string"
            },
            {
              "value": "span",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "iconType",
          "type": "\"outlined\" | \"rounded\" | \"sharp\"",
          "complexType": {
            "original": "'rounded' | 'outlined' | 'sharp'",
            "resolved": "\"outlined\" | \"rounded\" | \"sharp\"",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-type",
          "reflectToAttr": false,
          "docs": "Specifies the type of the icon to be displayed.",
          "docsTags": [],
          "default": "'outlined'",
          "values": [
            {
              "value": "outlined",
              "type": "string"
            },
            {
              "value": "rounded",
              "type": "string"
            },
            {
              "value": "sharp",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "sign",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "sign",
          "reflectToAttr": false,
          "docs": "Controls whether the icon is shown as a sign (previously 'card' type)",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\" | \"xlarge\" | \"xxlarge\"",
          "complexType": {
            "original": "'xxlarge' | 'xlarge' | 'large' | 'base' | 'small'",
            "resolved": "\"base\" | \"large\" | \"small\" | \"xlarge\" | \"xxlarge\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size for the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'base'"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "xlarge",
              "type": "string"
            },
            {
              "value": "xxlarge",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"info\" | \"neutral\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"white\"",
          "complexType": {
            "original": "'primary' | 'secondary' | 'neutral' | 'info' | 'success' | 'danger' | 'warning' | 'white'",
            "resolved": "\"danger\" | \"info\" | \"neutral\" | \"primary\" | \"secondary\" | \"success\" | \"warning\" | \"white\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "The variant of the icon.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'primary'"
            }
          ],
          "default": "'primary'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            },
            {
              "value": "secondary",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "tk-accordion-item",
        "tk-alert",
        "tk-badge",
        "tk-breadcrumb",
        "tk-breadcrumb-item",
        "tk-button",
        "tk-chips",
        "tk-dialog",
        "tk-editor",
        "tk-input",
        "tk-pagination",
        "tk-table",
        "tk-tabs",
        "tk-tooltip",
        "tk-upload"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "tk-accordion-item": [
          "tk-icon"
        ],
        "tk-alert": [
          "tk-icon"
        ],
        "tk-badge": [
          "tk-icon"
        ],
        "tk-breadcrumb": [
          "tk-icon"
        ],
        "tk-breadcrumb-item": [
          "tk-icon"
        ],
        "tk-button": [
          "tk-icon"
        ],
        "tk-chips": [
          "tk-icon"
        ],
        "tk-dialog": [
          "tk-icon"
        ],
        "tk-editor": [
          "tk-icon"
        ],
        "tk-input": [
          "tk-icon"
        ],
        "tk-pagination": [
          "tk-icon"
        ],
        "tk-table": [
          "tk-icon"
        ],
        "tk-tabs": [
          "tk-icon"
        ],
        "tk-tooltip": [
          "tk-icon"
        ],
        "tk-upload": [
          "tk-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tk-input/tk-input.tsx",
      "encapsulation": "none",
      "tag": "tk-input",
      "docs": "The TkInput component is used to capture text input from the user.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkInput } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkInput } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkInput } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "chipLabelKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "chip-label-key",
          "reflectToAttr": false,
          "docs": "The key to use for option labels",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "label"
            }
          ],
          "default": "'label'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "clearable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "Indicates whether the input can be cleared",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "the user cannot interact with the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "error",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "This is the error message that will be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "Provided a hint or additional information about the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon name to be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "iconPosition",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "icon-position",
          "reflectToAttr": false,
          "docs": "Defines the position of the icon.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "left"
            }
          ],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Indicates whether the input is in an invalid state",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label for the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "maskOptions",
          "type": "IInputMaskOptions",
          "complexType": {
            "original": "IInputMaskOptions",
            "resolved": "IInputMaskOptions",
            "references": {
              "IInputMaskOptions": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-input/interfaces.ts::IInputMaskOptions"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The maskOptions prop is used to define masking configurations supported by the Cleave.js library. With this prop, you can specify any masking options described in the Cleave.js documentation (https://nosir.github.io/cleave.js/). For example, you can configure it for formatting dates, phone numbers, or credit card numbers as needed.",
          "docsTags": [],
          "values": [
            {
              "type": "IInputMaskOptions"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "max",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "max",
          "reflectToAttr": false,
          "docs": "Maximum value for number inputs",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "min",
          "type": "number | string",
          "complexType": {
            "original": "string | number",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "min",
          "reflectToAttr": false,
          "docs": "Minimum value for number inputs",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "mode",
          "type": "\"chips\" | \"counter\" | \"number\" | \"password\" | \"text\"",
          "complexType": {
            "original": "'text' | 'password' | 'counter' | 'number' | 'chips'",
            "resolved": "\"chips\" | \"counter\" | \"number\" | \"password\" | \"text\"",
            "references": {}
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "input type",
          "docsTags": [],
          "default": "'text'",
          "values": [
            {
              "value": "chips",
              "type": "string"
            },
            {
              "value": "counter",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            },
            {
              "value": "password",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string | null",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Placeholder text displayed when the input is empty.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "pre",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pre",
          "reflectToAttr": false,
          "docs": "Defines the prefix of the input;",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showAsterisk",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-asterisk",
          "reflectToAttr": false,
          "docs": "Displays a red asterisk (*) next to the label for visual emphasis.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showSafetyStatus",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-safety-status",
          "reflectToAttr": false,
          "docs": "if type = password safety status bar visible",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\"",
          "complexType": {
            "original": "'large' | 'base' | 'small'",
            "resolved": "\"base\" | \"large\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size for the component.",
          "docsTags": [],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "any[] | number | string | string[]",
          "complexType": {
            "original": "string | string[] | number | any[]",
            "resolved": "any[] | number | string | string[]",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            },
            {
              "type": "number"
            },
            {
              "type": "string"
            },
            {
              "type": "string[]"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the specified `tk-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "tk-blur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "tk-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": false,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "tk-clear-click",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the clear button has click.",
          "docsTags": []
        },
        {
          "event": "tk-focus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "tk-datepicker",
        "tk-pagination",
        "tk-select",
        "tk-table"
      ],
      "dependencies": [
        "tk-chips",
        "tk-icon",
        "tk-button"
      ],
      "dependencyGraph": {
        "tk-input": [
          "tk-chips",
          "tk-icon",
          "tk-button"
        ],
        "tk-chips": [
          "tk-icon"
        ],
        "tk-button": [
          "tk-spinner",
          "tk-icon"
        ],
        "tk-datepicker": [
          "tk-input"
        ],
        "tk-pagination": [
          "tk-input"
        ],
        "tk-select": [
          "tk-input"
        ],
        "tk-table": [
          "tk-input"
        ]
      }
    },
    {
      "filePath": "src/components/tk-pagination/tk-pagination.tsx",
      "encapsulation": "none",
      "tag": "tk-pagination",
      "docs": "TkPagination component description.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkPagination } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkPagination } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkPagination } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "currentPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "current-page",
          "reflectToAttr": false,
          "docs": "The current page of the pagination.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "1"
            }
          ],
          "default": "1",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "mode",
          "type": "\"compact\" | \"compact-expanded\"",
          "complexType": {
            "original": "'compact' | 'compact-expanded'",
            "resolved": "\"compact\" | \"compact-expanded\"",
            "references": {}
          },
          "mutable": false,
          "attr": "mode",
          "reflectToAttr": false,
          "docs": "The mode of the pagination",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'outlined'"
            }
          ],
          "values": [
            {
              "value": "compact",
              "type": "string"
            },
            {
              "value": "compact-expanded",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rounded",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "rounded",
          "reflectToAttr": false,
          "docs": "Whether the pagination elements should have rounded corners",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rowsPerPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "rows-per-page",
          "reflectToAttr": false,
          "docs": "Number of items per page.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "10"
            }
          ],
          "default": "10",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rowsPerPageOptions",
          "type": "number[]",
          "complexType": {
            "original": "number[]",
            "resolved": "number[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Number of items per page options",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "[5, 10, 20, 50]"
            }
          ],
          "default": "[5, 10, 20, 50]",
          "values": [
            {
              "type": "number[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "totalItems",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "total-items",
          "reflectToAttr": false,
          "docs": "Number of total items.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "0"
            }
          ],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"grouped\" | \"outlined\" | \"text\"",
          "complexType": {
            "original": "'outlined' | 'text' | 'grouped'",
            "resolved": "\"grouped\" | \"outlined\" | \"text\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of the pagination",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'outlined'"
            }
          ],
          "default": "'outlined'",
          "values": [
            {
              "value": "grouped",
              "type": "string"
            },
            {
              "value": "outlined",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tk-next-page",
          "detail": "{ page: number; }",
          "bubbles": true,
          "complexType": {
            "original": "{ page: number }",
            "resolved": "{ page: number; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Pagination next button click event",
          "docsTags": []
        },
        {
          "event": "tk-page-change",
          "detail": "{ page: number; totalPages: number; startItem: number; endItem: number; }",
          "bubbles": true,
          "complexType": {
            "original": "{ page: number; totalPages: number; startItem: number; endItem: number }",
            "resolved": "{ page: number; totalPages: number; startItem: number; endItem: number; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Pagination page change event",
          "docsTags": []
        },
        {
          "event": "tk-prev-page",
          "detail": "{ page: number; }",
          "bubbles": true,
          "complexType": {
            "original": "{ page: number }",
            "resolved": "{ page: number; }",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Pagination prev button click event",
          "docsTags": []
        },
        {
          "event": "tk-rows-per-page-change",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "RowsPerPage change event",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "tk-table"
      ],
      "dependencies": [
        "tk-input",
        "tk-icon",
        "tk-select"
      ],
      "dependencyGraph": {
        "tk-pagination": [
          "tk-input",
          "tk-icon",
          "tk-select"
        ],
        "tk-input": [
          "tk-chips",
          "tk-icon",
          "tk-button"
        ],
        "tk-chips": [
          "tk-icon"
        ],
        "tk-button": [
          "tk-spinner",
          "tk-icon"
        ],
        "tk-select": [
          "tk-checkbox",
          "tk-input",
          "tk-spinner"
        ],
        "tk-table": [
          "tk-pagination"
        ]
      }
    },
    {
      "filePath": "src/components/tk-radio/tk-radio.tsx",
      "encapsulation": "none",
      "tag": "tk-radio",
      "docs": "The TkRadio component is another basic element for user input. You can use this to supply a way for the user to pick an option from multiple choices.",
      "docsTags": [
        {
          "name": "slot",
          "text": "content - Custom content template."
        },
        {
          "name": "react",
          "text": "`import { TkRadio } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkRadio } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkRadio } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "checked",
          "reflectToAttr": false,
          "docs": "Marks the radio button as checked or unchecked.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "The description sub text displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the radio button if true.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Indicates whether the input is in an invalid state",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label for the element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": true,
          "docs": "The name of the radio group, used to group radio buttons together.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "position",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Determines the position of the radio and label.",
          "docsTags": [],
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the radio button.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tk-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the radio button's checked state changes.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "content",
          "docs": "Custom content template."
        }
      ],
      "parts": [],
      "dependents": [
        "tk-table"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "tk-table": [
          "tk-radio"
        ]
      }
    },
    {
      "filePath": "src/components/tk-radio/tk-radio-group/tk-radio-group.tsx",
      "encapsulation": "none",
      "tag": "tk-radio-group",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "direction",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'vertical' | 'horizontal'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "direction",
          "reflectToAttr": false,
          "docs": "The direction of the radio buttons.",
          "docsTags": [],
          "default": "'horizontal'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Indicates whether the input is in an invalid state",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label for the element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "position",
          "type": "\"left\" | \"right\"",
          "complexType": {
            "original": "'left' | 'right'",
            "resolved": "\"left\" | \"right\"",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Determines the position of the radio group and label.",
          "docsTags": [],
          "default": "'left'",
          "values": [
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showAsterisk",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-asterisk",
          "reflectToAttr": false,
          "docs": "Displays a red asterisk (*) next to the label for visual emphasis.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "spread",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spread",
          "reflectToAttr": false,
          "docs": "Determines whether the radios will spread evenly across the horizontal space.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"card\" | \"default\"",
          "complexType": {
            "original": "'default' | 'card'",
            "resolved": "\"card\" | \"default\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Determines the appearance types of radios.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "card",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tk-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-rating/tk-rating.tsx",
      "encapsulation": "shadow",
      "tag": "tk-rating",
      "docs": "The `TkRating` component is a customizable rating input element that allows users to select a value from a series of icons (such as stars, hearts, or dot).",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkRating } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkRating } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkRating } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "the user cannot interact with the input.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "maxRating",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-rating",
          "reflectToAttr": false,
          "docs": "The maximum rating value. Possible options are 5 or 10.",
          "docsTags": [],
          "default": "5",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showRatingValue",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-rating-value",
          "reflectToAttr": false,
          "docs": "Determines whether to show the numerical rating value under to the icon.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"dot\" | \"heart\" | \"star\"",
          "complexType": {
            "original": "'star' | 'heart' | 'dot'",
            "resolved": "\"dot\" | \"heart\" | \"star\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "The type of icon to display for each rating element. Options include 'star', 'heart', and 'dot'.",
          "docsTags": [],
          "default": "'star'",
          "values": [
            {
              "value": "dot",
              "type": "string"
            },
            {
              "value": "heart",
              "type": "string"
            },
            {
              "value": "star",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The currently selected rating value.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tk-change",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-select/tk-select.tsx",
      "encapsulation": "none",
      "tag": "tk-select",
      "docs": "TkSelect component description.",
      "docsTags": [
        {
          "name": "slot",
          "text": "empty-data - Set how the dropdown will appear when there is no data"
        },
        {
          "name": "react",
          "text": "`import { TkSelect } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkSelect } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkSelect } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "allowCustomValue",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "allow-custom-value",
          "reflectToAttr": false,
          "docs": "Enables users to enter custom values that are not part of the predefined options.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "clearable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "clearable",
          "reflectToAttr": false,
          "docs": "Indicates whether the input can be cleared",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the input.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "dropdownWidthMode",
          "type": "string",
          "complexType": {
            "original": "'match-parent' | 'auto' | string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "dropdown-width-mode",
          "reflectToAttr": false,
          "docs": "Determines the width of the dropdown. Accepts values like 'match-parent', 'auto', or a specific width in '300px'.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "match-parent"
            }
          ],
          "default": "'match-parent'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "editable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "editable",
          "reflectToAttr": false,
          "docs": "This property determines whether the input field within the select box is editable.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "emptyMessage",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "empty-message",
          "reflectToAttr": false,
          "docs": "The message to display when there is no data available.",
          "docsTags": [],
          "default": "'No options available'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "error",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "This is the error message that will be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "filter",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Function used to filter current options based on the input value. Comes with a default filter function, but can be overridden with a custom function.",
          "docsTags": [],
          "default": "this.defaultFilter",
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "filterDebounceDelay",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "filter-debounce-delay",
          "reflectToAttr": false,
          "docs": "Sets the delay (in ms) before triggering the filter function.",
          "docsTags": [],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "Provided a hint or additional information about the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Indicates whether the input is in an invalid state",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label for the element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "Represents whether the options are fethecd from service or not.\nIf true renders spinner in options dropdown.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "If `true` the user can make multiple selections.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "optionHtml",
          "type": "Function",
          "complexType": {
            "original": "Function",
            "resolved": "Function",
            "references": {
              "Function": {
                "location": "global",
                "id": "global::Function"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Provides a function to customize the options.",
          "docsTags": [],
          "values": [
            {
              "type": "Function"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "optionLabelKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-label-key",
          "reflectToAttr": false,
          "docs": "The key to use for option labels",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "label"
            }
          ],
          "default": "'label'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "optionValueKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "option-value-key",
          "reflectToAttr": false,
          "docs": "The key to use for option values",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "value"
            }
          ],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "options",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The list of options to be displayed in the select box.",
          "docsTags": [],
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string | null",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Placeholder text displayed when the input is empty.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showAsterisk",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-asterisk",
          "reflectToAttr": false,
          "docs": "Displays a red asterisk (*) next to the label for visual emphasis.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\"",
          "complexType": {
            "original": "'large' | 'base' | 'small'",
            "resolved": "\"base\" | \"large\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size for the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "base"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "any",
          "complexType": {
            "original": "any | any[]",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tk-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "empty-data",
          "docs": "Set how the dropdown will appear when there is no data"
        }
      ],
      "parts": [],
      "dependents": [
        "tk-pagination"
      ],
      "dependencies": [
        "tk-checkbox",
        "tk-input",
        "tk-spinner"
      ],
      "dependencyGraph": {
        "tk-select": [
          "tk-checkbox",
          "tk-input",
          "tk-spinner"
        ],
        "tk-input": [
          "tk-chips",
          "tk-icon",
          "tk-button"
        ],
        "tk-chips": [
          "tk-icon"
        ],
        "tk-button": [
          "tk-spinner",
          "tk-icon"
        ],
        "tk-pagination": [
          "tk-select"
        ]
      }
    },
    {
      "filePath": "src/components/tk-spinner/tk-spinner.tsx",
      "encapsulation": "shadow",
      "tag": "tk-spinner",
      "docs": "The `TkSpinner` component description.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkSpinner } from @takeoff-ui/react`"
        },
        {
          "name": "vue",
          "text": "`import { TkSpinner } from @takeoff-ui/vue`"
        },
        {
          "name": "angular",
          "text": "`import { TkSpinner } from @takeoff-ui/angular`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Sets the label of the spinner component.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "orientation",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'horizontal' | 'vertical'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "Controls the orientation of the spinner component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'horizontal'"
            }
          ],
          "default": "'vertical'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\" | \"xlarge\" | \"xsmall\" | \"xxsmall\"",
          "complexType": {
            "original": "'xxsmall' | 'xsmall' | 'small' | 'base' | 'large' | 'xlarge'",
            "resolved": "\"base\" | \"large\" | \"small\" | \"xlarge\" | \"xsmall\" | \"xxsmall\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Controls the size of the spinner component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'base'"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "xlarge",
              "type": "string"
            },
            {
              "value": "xsmall",
              "type": "string"
            },
            {
              "value": "xxsmall",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"dots\" | \"lines\" | \"loader\" | \"pulse\" | \"rounded\" | \"three-dots\"",
          "complexType": {
            "original": "'rounded' | 'dots' | 'lines' | 'pulse' | 'three-dots' | 'loader'",
            "resolved": "\"dots\" | \"lines\" | \"loader\" | \"pulse\" | \"rounded\" | \"three-dots\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Sets the style of spinner component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'rounded'"
            }
          ],
          "default": "'rounded'",
          "values": [
            {
              "value": "dots",
              "type": "string"
            },
            {
              "value": "lines",
              "type": "string"
            },
            {
              "value": "loader",
              "type": "string"
            },
            {
              "value": "pulse",
              "type": "string"
            },
            {
              "value": "rounded",
              "type": "string"
            },
            {
              "value": "three-dots",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "tk-button",
        "tk-select",
        "tk-upload"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "tk-button": [
          "tk-spinner"
        ],
        "tk-select": [
          "tk-spinner"
        ],
        "tk-upload": [
          "tk-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/tk-stepper/tk-step.tsx",
      "encapsulation": "none",
      "tag": "tk-step",
      "docs": "TkStep sub-component for individual steps in TkStepper.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "activeIcon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "active-icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon or icon options for active steps.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "complete",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "complete",
          "reflectToAttr": false,
          "docs": "Indicates if the step has been completed.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "completeIcon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "complete-icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon or icon options for completed steps.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Indicates if the step is disabled (cannot be selected or interacted with).",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "error",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "Indicates if the step has encountered an error.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "errorIcon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "error-icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon or icon options for error steps.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "The header text to be displayed for the step.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon to be displayed for the step. Can be either a string (icon name) or an IIconOptions object.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "inactiveIcon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "inactive-icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon or icon options for inactive steps.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "index",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "index",
          "reflectToAttr": false,
          "docs": "The index of the step in the stepper.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "isActive",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-active",
          "reflectToAttr": false,
          "docs": "Indicates if the step is currently active.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "isClickable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-clickable",
          "reflectToAttr": false,
          "docs": "Whether the step is clickable.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "labelPosition",
          "type": "\"flip\" | \"non-flip\"",
          "complexType": {
            "original": "'flip' | 'non-flip'",
            "resolved": "\"flip\" | \"non-flip\"",
            "references": {}
          },
          "mutable": false,
          "attr": "label-position",
          "reflectToAttr": false,
          "docs": "Controls the label position of the step.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'non-flip'"
            }
          ],
          "default": "'non-flip'",
          "values": [
            {
              "value": "flip",
              "type": "string"
            },
            {
              "value": "non-flip",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "stepMode",
          "type": "\"basic\" | \"number\"",
          "complexType": {
            "original": "'basic' | 'number'",
            "resolved": "\"basic\" | \"number\"",
            "references": {}
          },
          "mutable": false,
          "attr": "step-mode",
          "reflectToAttr": false,
          "docs": "Controls the step mode of the stepper component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'basic'"
            }
          ],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "subheader",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "subheader",
          "reflectToAttr": false,
          "docs": "Optional subheader text to provide additional context for the step.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-stepper/tk-stepper.tsx",
      "encapsulation": "shadow",
      "tag": "tk-stepper",
      "docs": "TkStepper component for managing a series of steps.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkStepper, TkStep } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkStepper, TkStep } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkStepper, TkStep } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "active",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "active",
          "reflectToAttr": false,
          "docs": "Currently active step index",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "0"
            }
          ],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "activeIcon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "active-icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon or icon options for active steps.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "completeIcon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "complete-icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon or icon options for completed steps.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "containerStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "container-style",
          "reflectToAttr": false,
          "docs": "The style attribute of container element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "contentStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "content-style",
          "reflectToAttr": false,
          "docs": "The style attribute of content elements",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "errorIcon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "error-icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon or icon options for error steps.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "inactiveIcon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "inactive-icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon or icon options for inactive steps.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "linear",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "linear",
          "reflectToAttr": false,
          "docs": "Whether the steps follow a linear progression (can only navigate to the next step when current step is completed).",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "orientation",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'horizontal' | 'vertical'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "Controls the orientation of the stepper component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'horizontal'"
            }
          ],
          "default": "'horizontal'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showCompleteState",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-complete-state",
          "reflectToAttr": false,
          "docs": "Whether to show completed steps with the complete state.\nIf false, completed steps will appear as just passed and not with complete styling.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "true"
            }
          ],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "signStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "sign-style",
          "reflectToAttr": false,
          "docs": "The style attribute of step sign elements",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "stepMode",
          "type": "\"basic\" | \"number\"",
          "complexType": {
            "original": "'basic' | 'number'",
            "resolved": "\"basic\" | \"number\"",
            "references": {}
          },
          "mutable": false,
          "attr": "step-mode",
          "reflectToAttr": false,
          "docs": "Controls the step mode of the stepper component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'basic'"
            }
          ],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "number",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "setActive",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(index: number) => Promise<void>",
            "parameters": [
              {
                "name": "index",
                "type": "number",
                "docs": "- The index of the step to set as active."
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setActive(index: number) => Promise<void>",
          "parameters": [
            {
              "name": "index",
              "type": "number",
              "docs": "- The index of the step to set as active."
            }
          ],
          "docs": "Sets the active step index.",
          "docsTags": [
            {
              "name": "param",
              "text": "index - The index of the step to set as active."
            }
          ]
        }
      ],
      "events": [
        {
          "event": "tkStepChange",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the active step changes.",
          "docsTags": []
        },
        {
          "event": "tkStepClick",
          "detail": "IStepClickDetail",
          "bubbles": true,
          "complexType": {
            "original": "IStepClickDetail",
            "resolved": "IStepClickDetail",
            "references": {
              "IStepClickDetail": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-stepper/interfaces.ts::IStepClickDetail"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a step is clicked.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-table/tk-table.tsx",
      "encapsulation": "shadow",
      "tag": "tk-table",
      "docs": "TkTable is a component that allows you to display data in a tabular manner. It's generally called a datatable.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkTable } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkTable } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkTable } from '@takeoff-ui/angular'`"
        },
        {
          "name": "slot",
          "text": "empty-data - Set how the table will appear when there is no data"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "cardTitle",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "card-title",
          "reflectToAttr": false,
          "docs": "",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "cellStyle",
          "type": "(row: any, column: ITableColumn) => ITableRowCellStyleResponse",
          "complexType": {
            "original": "(row: any, column: ITableColumn) => ITableRowCellStyleResponse | undefined",
            "resolved": "(row: any, column: ITableColumn) => ITableRowCellStyleResponse",
            "references": {
              "ITableColumn": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-table/interfaces.ts::ITableColumn"
              },
              "ITableRowCellStyleResponse": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-table/interfaces.ts::ITableRowCellStyleResponse"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Provides a function to customize cell styles.\nThis function takes row and column information and returns a style for a specific cell.",
          "docsTags": [],
          "values": [
            {
              "type": "(row: any, column: ITableColumn) => ITableRowCellStyleResponse"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "columns",
          "type": "ITableColumn[]",
          "complexType": {
            "original": "ITableColumn[]",
            "resolved": "ITableColumn[]",
            "references": {
              "ITableColumn": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-table/interfaces.ts::ITableColumn"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "The column definitions (Array of Objects)",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "ITableColumn[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "data",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Rows of data to display",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "dataKey",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "data-key",
          "reflectToAttr": false,
          "docs": "Property of each row that defines the unique key of each row",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "expandedRows",
          "type": "any[]",
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "Specifies which rows are expanded to show additional content.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "headerType",
          "type": "\"basic\" | \"dark\" | \"primary\"",
          "complexType": {
            "original": "'basic' | 'dark' | 'primary'",
            "resolved": "\"basic\" | \"dark\" | \"primary\"",
            "references": {}
          },
          "mutable": false,
          "attr": "header-type",
          "reflectToAttr": false,
          "docs": "Style to apply to header of table",
          "docsTags": [],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "Displays a loading indicator while data is being fetched or processed.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "paginationMethod",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "pagination-method",
          "reflectToAttr": false,
          "docs": "Defines whether pagination is handled on the client or server side.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "paginationType",
          "type": "\"grouped\" | \"outlined\" | \"text\"",
          "complexType": {
            "original": "'outlined' | 'text' | 'grouped'",
            "resolved": "\"grouped\" | \"outlined\" | \"text\"",
            "references": {}
          },
          "mutable": false,
          "attr": "pagination-type",
          "reflectToAttr": false,
          "docs": "The type of the pagination",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'outlined'"
            }
          ],
          "default": "'outlined'",
          "values": [
            {
              "value": "grouped",
              "type": "string"
            },
            {
              "value": "outlined",
              "type": "string"
            },
            {
              "value": "text",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rowStyle",
          "type": "(row: any) => ITableRowCellStyleResponse",
          "complexType": {
            "original": "(row: any) => ITableRowCellStyleResponse | undefined",
            "resolved": "(row: any) => ITableRowCellStyleResponse",
            "references": {
              "ITableRowCellStyleResponse": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-table/interfaces.ts::ITableRowCellStyleResponse"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Provides a function to customize row styles.\nThis function takes row information and returns a style for a specific row.",
          "docsTags": [],
          "values": [
            {
              "type": "(row: any) => ITableRowCellStyleResponse"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rowsPerPage",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "rows-per-page",
          "reflectToAttr": false,
          "docs": "Number of items per page.",
          "docsTags": [],
          "default": "6",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rowsPerPageOptions",
          "type": "number[]",
          "complexType": {
            "original": "number[]",
            "resolved": "number[]",
            "references": {}
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "Number of rows per page options",
          "docsTags": [],
          "values": [
            {
              "type": "number[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "selection",
          "type": "any",
          "complexType": {
            "original": "any[] | any",
            "resolved": "any",
            "references": {}
          },
          "mutable": true,
          "attr": "selection",
          "reflectToAttr": false,
          "docs": "List of the selected",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "selectionMode",
          "type": "\"checkbox\" | \"radio\"",
          "complexType": {
            "original": "'radio' | 'checkbox'",
            "resolved": "\"checkbox\" | \"radio\"",
            "references": {}
          },
          "mutable": false,
          "attr": "selection-mode",
          "reflectToAttr": false,
          "docs": "Determines how rows can be selected, either with radio buttons (single selection) or checkboxes (multiple selection).",
          "docsTags": [],
          "values": [
            {
              "value": "checkbox",
              "type": "string"
            },
            {
              "value": "radio",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"small\"",
          "complexType": {
            "original": "'small' | 'base'",
            "resolved": "\"base\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size for the component.",
          "docsTags": [],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "striped",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "striped",
          "reflectToAttr": false,
          "docs": "Enables or disables alternating row background colors for easier readability.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "totalItems",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "total-items",
          "reflectToAttr": false,
          "docs": "Number of total items.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "clearFilters",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "clearFilters() => Promise<void>",
          "parameters": [],
          "docs": "Clears all filters for server side pagination",
          "docsTags": []
        },
        {
          "name": "clearSorting",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "clearSorting() => Promise<void>",
          "parameters": [],
          "docs": "Clears all sorting for server side pagination",
          "docsTags": []
        },
        {
          "name": "exportFile",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(options: ITableExportOptions) => Promise<void>",
            "parameters": [
              {
                "name": "options",
                "type": "ITableExportOptions",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ITableExportOptions": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-table/interfaces.ts::ITableExportOptions"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "exportFile(options: ITableExportOptions) => Promise<void>",
          "parameters": [
            {
              "name": "options",
              "type": "ITableExportOptions",
              "docs": ""
            }
          ],
          "docs": "Exports the table data to a file",
          "docsTags": [
            {
              "name": "param",
              "text": "options"
            }
          ]
        },
        {
          "name": "getFilters",
          "returns": {
            "type": "Promise<ITableFilter[]>",
            "docs": "The current filters"
          },
          "complexType": {
            "signature": "() => Promise<ITableFilter[]>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ITableFilter": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-table/interfaces.ts::ITableFilter"
              }
            },
            "return": "Promise<ITableFilter[]>"
          },
          "signature": "getFilters() => Promise<ITableFilter[]>",
          "parameters": [],
          "docs": "Returns the current filters",
          "docsTags": [
            {
              "name": "returns",
              "text": "The current filters"
            }
          ]
        },
        {
          "name": "getSorting",
          "returns": {
            "type": "Promise<{ field: string; order: \"desc\" | \"asc\"; }>",
            "docs": "The current sorting settings"
          },
          "complexType": {
            "signature": "() => Promise<{ field: string; order: \"desc\" | \"asc\"; }>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<{ field: string; order: \"desc\" | \"asc\"; }>"
          },
          "signature": "getSorting() => Promise<{ field: string; order: \"desc\" | \"asc\"; }>",
          "parameters": [],
          "docs": "Returns the current sorting settings",
          "docsTags": [
            {
              "name": "returns",
              "text": "The current sorting settings"
            }
          ]
        },
        {
          "name": "serverRequest",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "ITableRequest": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-table/interfaces.ts::ITableRequest"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "serverRequest() => Promise<void>",
          "parameters": [],
          "docs": "Allows tk-request event to be triggered manually",
          "docsTags": []
        },
        {
          "name": "setCurrentPage",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "(page: number) => Promise<void>",
            "parameters": [
              {
                "name": "page",
                "type": "number",
                "docs": ""
              }
            ],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setCurrentPage(page: number) => Promise<void>",
          "parameters": [
            {
              "name": "page",
              "type": "number",
              "docs": ""
            }
          ],
          "docs": "",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "tk-cell-edit",
          "detail": "ITableCellEdit",
          "bubbles": true,
          "complexType": {
            "original": "ITableCellEdit",
            "resolved": "ITableCellEdit",
            "references": {
              "ITableCellEdit": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-table/interfaces.ts::ITableCellEdit"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a cell is edited.",
          "docsTags": []
        },
        {
          "event": "tk-expanded-rows-change",
          "detail": "any[]",
          "bubbles": true,
          "complexType": {
            "original": "any[]",
            "resolved": "any[]",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the expanded rows change.",
          "docsTags": []
        },
        {
          "event": "tk-request",
          "detail": "ITableRequest",
          "bubbles": true,
          "complexType": {
            "original": "ITableRequest",
            "resolved": "ITableRequest",
            "references": {
              "ITableRequest": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-table/interfaces.ts::ITableRequest"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a request needs to be made to the server.",
          "docsTags": []
        },
        {
          "event": "tk-row-click",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a row is clicked.",
          "docsTags": [
            {
              "name": "param",
              "text": "row The row data that was clicked"
            }
          ]
        },
        {
          "event": "tk-selection-change",
          "detail": "any",
          "bubbles": true,
          "complexType": {
            "original": "any[] | any",
            "resolved": "any",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "",
          "docsTags": []
        }
      ],
      "listeners": [
        {
          "event": "click",
          "target": "window",
          "capture": false,
          "passive": false
        }
      ],
      "styles": [],
      "slots": [
        {
          "name": "empty-data",
          "docs": "Set how the table will appear when there is no data"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-checkbox",
        "tk-radio",
        "tk-input",
        "tk-button",
        "tk-icon",
        "tk-badge",
        "tk-pagination"
      ],
      "dependencyGraph": {
        "tk-table": [
          "tk-checkbox",
          "tk-radio",
          "tk-input",
          "tk-button",
          "tk-icon",
          "tk-badge",
          "tk-pagination"
        ],
        "tk-input": [
          "tk-chips",
          "tk-icon",
          "tk-button"
        ],
        "tk-chips": [
          "tk-icon"
        ],
        "tk-button": [
          "tk-spinner",
          "tk-icon"
        ],
        "tk-badge": [
          "tk-icon"
        ],
        "tk-pagination": [
          "tk-input",
          "tk-icon",
          "tk-select"
        ],
        "tk-select": [
          "tk-checkbox",
          "tk-input",
          "tk-spinner"
        ]
      }
    },
    {
      "filePath": "src/components/tk-tabs/tk-tabs.tsx",
      "encapsulation": "shadow",
      "tag": "tk-tabs",
      "docs": "TkTabs component description.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkTabs, TkTabsItem } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkTabs, TkTabsItem } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkTabs, TkTabsItem } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "activeIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": true,
          "attr": "active-index",
          "reflectToAttr": true,
          "docs": "Controls the currently active tab index.\nCan be controlled programmatically from outside.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "0"
            }
          ],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "alignHeaders",
          "type": "\"center\" | \"end\" | \"start\"",
          "complexType": {
            "original": "'start' | 'center' | 'end'",
            "resolved": "\"center\" | \"end\" | \"start\"",
            "references": {}
          },
          "mutable": false,
          "attr": "align-headers",
          "reflectToAttr": false,
          "docs": "Sets the alignment of the header.",
          "docsTags": [],
          "default": "'start'",
          "values": [
            {
              "value": "center",
              "type": "string"
            },
            {
              "value": "end",
              "type": "string"
            },
            {
              "value": "start",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "containerStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "container-style",
          "reflectToAttr": false,
          "docs": "The style attribute of container element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "contentStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "content-style",
          "reflectToAttr": false,
          "docs": "The style attribute of tabs item element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "defaultActiveIndex",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "default-active-index",
          "reflectToAttr": false,
          "docs": "Default Active Index for tabs component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "0"
            }
          ],
          "default": "0",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "headerContainerStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "header-container-style",
          "reflectToAttr": false,
          "docs": "The style attribute of headers container element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "isClosable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-closable",
          "reflectToAttr": false,
          "docs": "Controls if tabs are closable.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "isExtendable",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "is-extendable",
          "reflectToAttr": false,
          "docs": "Controls if new tabs can be added or not.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "orientation",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'horizontal' | 'vertical'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "Controls the orientation of the tabs component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'horizontal'"
            }
          ],
          "default": "'horizontal'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\"",
          "complexType": {
            "original": "'large' | 'base' | 'small'",
            "resolved": "\"base\" | \"large\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Controls the size of the tabs component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'base'"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "spreadHeaders",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "spread-headers",
          "reflectToAttr": false,
          "docs": "Determines whether the tab headers will spread evenly across the horizontal space.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"basic\" | \"compact\" | \"divided\" | \"expanded\"",
          "complexType": {
            "original": "'basic' | 'divided' | 'compact' | 'expanded'",
            "resolved": "\"basic\" | \"compact\" | \"divided\" | \"expanded\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Controls the tab style of the tabs component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'basic'"
            }
          ],
          "default": "'basic'",
          "values": [
            {
              "value": "basic",
              "type": "string"
            },
            {
              "value": "compact",
              "type": "string"
            },
            {
              "value": "divided",
              "type": "string"
            },
            {
              "value": "expanded",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"info\" | \"neutral\" | \"primary\"",
          "complexType": {
            "original": "'primary' | 'info' | 'neutral'",
            "resolved": "\"info\" | \"neutral\" | \"primary\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Controls the color variant of the tabs component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'primary'"
            }
          ],
          "default": "'primary'",
          "values": [
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "primary",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tk-tab-change",
          "detail": "number",
          "bubbles": true,
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Triggered when the currently open tab changes. Returns the active index.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-tabs-item",
        "tk-icon",
        "tk-badge"
      ],
      "dependencyGraph": {
        "tk-tabs": [
          "tk-tabs-item",
          "tk-icon",
          "tk-badge"
        ],
        "tk-badge": [
          "tk-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tk-tabs/tk-tabs-item.tsx",
      "encapsulation": "shadow",
      "tag": "tk-tabs-item",
      "docs": "",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "badgeCount",
          "type": "number | string",
          "complexType": {
            "original": "number | string",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": false,
          "attr": "badge-count",
          "reflectToAttr": false,
          "docs": "Sets badge component's count.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "badgeLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "badge-label",
          "reflectToAttr": false,
          "docs": "Sets badge component's label.",
          "docsTags": [
            {
              "name": "deprecated",
              "text": "since version 0.0.40. Use 'badgeCount' instead."
            }
          ],
          "deprecation": "since version 0.0.40. Use 'badgeCount' instead.",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "badged",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "badged",
          "reflectToAttr": false,
          "docs": "Checks if tab item has badge component or not.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Whether the tab item is disabled.",
          "docsTags": [],
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "ITabsIconOptions | string",
          "complexType": {
            "original": "string | ITabsIconOptions",
            "resolved": "ITabsIconOptions | string",
            "references": {
              "ITabsIconOptions": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-tabs/interfaces.ts::ITabsIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Icon for tabs item component.",
          "docsTags": [],
          "values": [
            {
              "type": "ITabsIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Label for the tab item.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [
        "tk-tabs"
      ],
      "dependencies": [],
      "dependencyGraph": {
        "tk-tabs": [
          "tk-tabs-item"
        ]
      }
    },
    {
      "filePath": "src/components/tk-textarea/tk-textarea.tsx",
      "encapsulation": "shadow",
      "tag": "tk-textarea",
      "docs": "The TkTextarea component enables multi-line text input with customizable size, validation, and styling options.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkTextarea } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkTextarea } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkTextarea } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot interact with the input.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "error",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "This is the error message that will be displayed.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "Provided a hint or additional information about the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Indicates whether the input is in an invalid state",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label for the element.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "maxLength",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-length",
          "reflectToAttr": false,
          "docs": "Limits the number of characters.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name of the control, which is submitted with the form data.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "placeholder",
          "type": "string",
          "complexType": {
            "original": "string | null",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "placeholder",
          "reflectToAttr": false,
          "docs": "Placeholder text displayed when the input is empty.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "readonly",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "readonly",
          "reflectToAttr": false,
          "docs": "If `true`, the user cannot modify the value.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "rows",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "rows",
          "reflectToAttr": false,
          "docs": "Represents the rows value of the component",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "3"
            }
          ],
          "default": "3",
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showAsterisk",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-asterisk",
          "reflectToAttr": false,
          "docs": "Displays a red asterisk (*) next to the label for visual emphasis.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\"",
          "complexType": {
            "original": "'large' | 'base' | 'small'",
            "resolved": "\"base\" | \"large\" | \"small\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size for the component.",
          "docsTags": [],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "number | string",
          "complexType": {
            "original": "string | number | null",
            "resolved": "number | string",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The value of the input.",
          "docsTags": [],
          "default": "''",
          "values": [
            {
              "type": "number"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "setFocus",
          "returns": {
            "type": "Promise<void>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<void>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              }
            },
            "return": "Promise<void>"
          },
          "signature": "setFocus() => Promise<void>",
          "parameters": [],
          "docs": "Sets focus on the specified `tk-input`. Use this method instead of the global\n`input.focus()`.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "tk-blur",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input loses focus.",
          "docsTags": []
        },
        {
          "event": "tk-change",
          "detail": "number | string",
          "bubbles": true,
          "complexType": {
            "original": "string | number | undefined | null",
            "resolved": "number | string",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the value has changed.",
          "docsTags": []
        },
        {
          "event": "tk-focus",
          "detail": "void",
          "bubbles": true,
          "complexType": {
            "original": "void",
            "resolved": "void",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the input has focus.",
          "docsTags": []
        },
        {
          "event": "tk-input",
          "detail": "KeyboardEvent",
          "bubbles": true,
          "complexType": {
            "original": "KeyboardEvent",
            "resolved": "KeyboardEvent",
            "references": {
              "KeyboardEvent": {
                "location": "global",
                "id": "global::KeyboardEvent"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a keyboard input occurred.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-timeline/tk-timeline.tsx",
      "encapsulation": "shadow",
      "tag": "tk-timeline",
      "docs": "Timeline component to display a sequence of events.",
      "docsTags": [],
      "usage": {},
      "props": [
        {
          "name": "alternate",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "alternate",
          "reflectToAttr": false,
          "docs": "Whether to alternate the position of timeline items relative to the line.",
          "docsTags": [],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "items",
          "type": "TimelineItem[]",
          "complexType": {
            "original": "TimelineItem[]",
            "resolved": "TimelineItem[]",
            "references": {
              "TimelineItem": {
                "location": "import",
                "path": "./interfaces",
                "id": "src/components/tk-timeline/interfaces.ts::TimelineItem"
              }
            }
          },
          "mutable": false,
          "reflectToAttr": false,
          "docs": "An array of objects representing the items to display on the timeline.\nEach object should have at least a `title`. `description` and `date` are optional.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "TimelineItem[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "orientation",
          "type": "\"horizontal\" | \"vertical\"",
          "complexType": {
            "original": "'horizontal' | 'vertical'",
            "resolved": "\"horizontal\" | \"vertical\"",
            "references": {}
          },
          "mutable": false,
          "attr": "orientation",
          "reflectToAttr": false,
          "docs": "The orientation of the timeline.",
          "docsTags": [],
          "default": "'horizontal'",
          "values": [
            {
              "value": "horizontal",
              "type": "string"
            },
            {
              "value": "vertical",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-toggle/tk-toggle.tsx",
      "encapsulation": "shadow",
      "tag": "tk-toggle",
      "docs": "The TkToggle component is another basic element for user input. You can use this for turning settings, features or true/false inputs on and off.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkToggle } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkToggle } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkToggle } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "ariaLabelledby",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "aria-labelledby",
          "reflectToAttr": false,
          "docs": "The aria-labelledby attribute of the toggle.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "null"
            }
          ],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Whether the toggle is disabled.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Specifies a material icon name to be displayed.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "check"
            }
          ],
          "default": "'check'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "inputId",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "input-id",
          "reflectToAttr": false,
          "docs": "The ID of the input element.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "''"
            }
          ],
          "default": "''",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Whether the toggle is in an invalid state.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "The label for the toggle.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "name",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "name",
          "reflectToAttr": false,
          "docs": "The name attribute of the toggle.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "null"
            }
          ],
          "default": "null",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showIcon",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-icon",
          "reflectToAttr": false,
          "docs": "Whether to show the icon in the toggle.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "true"
            }
          ],
          "default": "true",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "size",
          "type": "\"base\" | \"large\" | \"small\" | \"xlarge\" | \"xsmall\"",
          "complexType": {
            "original": "'xlarge' | 'large' | 'base' | 'small' | 'xsmall'",
            "resolved": "\"base\" | \"large\" | \"small\" | \"xlarge\" | \"xsmall\"",
            "references": {}
          },
          "mutable": false,
          "attr": "size",
          "reflectToAttr": false,
          "docs": "Sets size for the component.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "base"
            }
          ],
          "default": "'base'",
          "values": [
            {
              "value": "base",
              "type": "string"
            },
            {
              "value": "large",
              "type": "string"
            },
            {
              "value": "small",
              "type": "string"
            },
            {
              "value": "xlarge",
              "type": "string"
            },
            {
              "value": "xsmall",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": true,
          "attr": "value",
          "reflectToAttr": false,
          "docs": "The current state of the toggle.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"info\" | \"success\"",
          "complexType": {
            "original": "'info' | 'success'",
            "resolved": "\"info\" | \"success\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "The type of the toggle.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "info"
            }
          ],
          "default": "'info'",
          "values": [
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [
        {
          "name": "getInputElement",
          "returns": {
            "type": "Promise<HTMLInputElement>",
            "docs": ""
          },
          "complexType": {
            "signature": "() => Promise<HTMLInputElement>",
            "parameters": [],
            "references": {
              "Promise": {
                "location": "global",
                "id": "global::Promise"
              },
              "HTMLInputElement": {
                "location": "global",
                "id": "global::HTMLInputElement"
              }
            },
            "return": "Promise<HTMLInputElement>"
          },
          "signature": "getInputElement() => Promise<HTMLInputElement>",
          "parameters": [],
          "docs": "Returns the native `<input>` element used under the hood.",
          "docsTags": []
        }
      ],
      "events": [
        {
          "event": "tk-change",
          "detail": "boolean",
          "bubbles": true,
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "cancelable": true,
          "composed": true,
          "docs": "Event emitted when the toggle value changes.",
          "docsTags": [
            {
              "name": "event",
              "text": "onChange"
            }
          ]
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [],
      "dependencyGraph": {}
    },
    {
      "filePath": "src/components/tk-tooltip/tk-tooltip.tsx",
      "encapsulation": "shadow",
      "tag": "tk-tooltip",
      "docs": "The TkTooltip is used to display additional information when element is hovered over.",
      "docsTags": [
        {
          "name": "slot",
          "text": "trigger - The trigger slot defines the element that will trigger the tooltip"
        },
        {
          "name": "slot",
          "text": "content - Define custom HTML content for the tooltip, which replaces the default header, description and icon elements"
        },
        {
          "name": "react",
          "text": "`import { TkTooltip } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkTooltip } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkTooltip } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "containerStyle",
          "type": "any",
          "complexType": {
            "original": "any",
            "resolved": "any",
            "references": {}
          },
          "mutable": false,
          "attr": "container-style",
          "reflectToAttr": false,
          "docs": "The style attribute of container element",
          "docsTags": [],
          "default": "null",
          "values": [
            {
              "type": "any"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "Sets description text for the tooltip.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "header",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "header",
          "reflectToAttr": false,
          "docs": "Sets header text for the tooltip.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "icon",
          "type": "IIconOptions | string",
          "complexType": {
            "original": "string | IIconOptions",
            "resolved": "IIconOptions | string",
            "references": {
              "IIconOptions": {
                "location": "import",
                "path": "../../global/interfaces/IIconOptions",
                "id": "src/global/interfaces/IIconOptions.ts::IIconOptions"
              }
            }
          },
          "mutable": false,
          "attr": "icon",
          "reflectToAttr": false,
          "docs": "Sets the icon element of the tooltip.",
          "docsTags": [],
          "values": [
            {
              "type": "IIconOptions"
            },
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "position",
          "type": "\"bottom\" | \"left\" | \"right\" | \"top\"",
          "complexType": {
            "original": "'top' | 'bottom' | 'left' | 'right'",
            "resolved": "\"bottom\" | \"left\" | \"right\" | \"top\"",
            "references": {}
          },
          "mutable": false,
          "attr": "position",
          "reflectToAttr": false,
          "docs": "Sets the position of the tooltip.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'right'"
            }
          ],
          "default": "'right'",
          "values": [
            {
              "value": "bottom",
              "type": "string"
            },
            {
              "value": "left",
              "type": "string"
            },
            {
              "value": "right",
              "type": "string"
            },
            {
              "value": "top",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "variant",
          "type": "\"danger\" | \"dark\" | \"info\" | \"neutral\" | \"success\" | \"warning\" | \"white\"",
          "complexType": {
            "original": "'dark' | 'white' | 'info' | 'success' | 'warning' | 'danger' | 'neutral'",
            "resolved": "\"danger\" | \"dark\" | \"info\" | \"neutral\" | \"success\" | \"warning\" | \"white\"",
            "references": {}
          },
          "mutable": false,
          "attr": "variant",
          "reflectToAttr": false,
          "docs": "Sets the color variant of the tooltip.",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "'neutral'"
            }
          ],
          "default": "'neutral'",
          "values": [
            {
              "value": "danger",
              "type": "string"
            },
            {
              "value": "dark",
              "type": "string"
            },
            {
              "value": "info",
              "type": "string"
            },
            {
              "value": "neutral",
              "type": "string"
            },
            {
              "value": "success",
              "type": "string"
            },
            {
              "value": "warning",
              "type": "string"
            },
            {
              "value": "white",
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [],
      "listeners": [],
      "styles": [],
      "slots": [
        {
          "name": "content",
          "docs": "Define custom HTML content for the tooltip, which replaces the default header, description and icon elements"
        },
        {
          "name": "trigger",
          "docs": "The trigger slot defines the element that will trigger the tooltip"
        }
      ],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-icon"
      ],
      "dependencyGraph": {
        "tk-tooltip": [
          "tk-icon"
        ]
      }
    },
    {
      "filePath": "src/components/tk-upload/tk-upload.tsx",
      "encapsulation": "none",
      "tag": "tk-upload",
      "docs": "The TkUpload component is an interface element that allows users to select and upload files from their devices to a server or a target location. It typically includes a \"Choose File\" button and a field displaying the selected file's name. This component simplifies the process of file selection and uploading.",
      "docsTags": [
        {
          "name": "react",
          "text": "`import { TkUpload } from '@takeoff-ui/react'`"
        },
        {
          "name": "vue",
          "text": "`import { TkUpload } from '@takeoff-ui/vue'`"
        },
        {
          "name": "angular",
          "text": "`import { TkUpload } from '@takeoff-ui/angular'`"
        }
      ],
      "usage": {},
      "props": [
        {
          "name": "accept",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "accept",
          "reflectToAttr": false,
          "docs": "Acceptable file types for upload. Use MIME types or extensions separated by commas.",
          "docsTags": [],
          "default": "'*'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "autoUpload",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "auto-upload",
          "reflectToAttr": false,
          "docs": "If `autoUpload` is set to `true`, the upload button will be hidden,\nand the `tkUpload` event will be automatically triggered for each newly added file.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "chooseButtonLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "choose-button-label",
          "reflectToAttr": false,
          "docs": "Label text displayed inside the choose button.",
          "docsTags": [],
          "default": "'Choose File'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "description",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "description",
          "reflectToAttr": false,
          "docs": "Description displayed under the title.",
          "docsTags": [],
          "default": "'JPEG, PNG, PDF and MP4 formats, up to 50 MB.'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "disabled",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "disabled",
          "reflectToAttr": false,
          "docs": "Disables the input, preventing user interaction.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "error",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "error",
          "reflectToAttr": false,
          "docs": "Provided a error about the upload.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "hint",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "hint",
          "reflectToAttr": false,
          "docs": "Provided a hint or additional information about the input.",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "invalid",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "invalid",
          "reflectToAttr": false,
          "docs": "Indicates whether the upload is in an invalid state, uploads will fail eventually",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "label",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "label",
          "reflectToAttr": false,
          "docs": "Defines the label of the upload area",
          "docsTags": [],
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "loading",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "loading",
          "reflectToAttr": false,
          "docs": "Indicates whether the upload is in an loading state",
          "docsTags": [
            {
              "name": "defaultValue",
              "text": "false"
            }
          ],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "maxFileCount",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-file-count",
          "reflectToAttr": false,
          "docs": "Maximum allowed file count",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": true,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "maxFileSize",
          "type": "number",
          "complexType": {
            "original": "number",
            "resolved": "number",
            "references": {}
          },
          "mutable": false,
          "attr": "max-file-size",
          "reflectToAttr": false,
          "docs": "Maximum allowed file size in bytes.",
          "docsTags": [],
          "values": [
            {
              "type": "number"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "multiple",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "multiple",
          "reflectToAttr": false,
          "docs": "Allows multiple file selection.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "showAsterisk",
          "type": "boolean",
          "complexType": {
            "original": "boolean",
            "resolved": "boolean",
            "references": {}
          },
          "mutable": false,
          "attr": "show-asterisk",
          "reflectToAttr": false,
          "docs": "Displays a red asterisk (*) next to the label for visual emphasis.",
          "docsTags": [],
          "default": "false",
          "values": [
            {
              "type": "boolean"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "title",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "title",
          "reflectToAttr": false,
          "docs": "Title displayed in the upload component.",
          "docsTags": [],
          "default": "'Choose a file or drag & drop it here.'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "type",
          "type": "\"centered\" | \"default\"",
          "complexType": {
            "original": "'default' | 'centered'",
            "resolved": "\"centered\" | \"default\"",
            "references": {}
          },
          "mutable": false,
          "attr": "type",
          "reflectToAttr": false,
          "docs": "Type of the file upload area.",
          "docsTags": [],
          "default": "'default'",
          "values": [
            {
              "value": "centered",
              "type": "string"
            },
            {
              "value": "default",
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "uploadButtonLabel",
          "type": "string",
          "complexType": {
            "original": "string",
            "resolved": "string",
            "references": {}
          },
          "mutable": false,
          "attr": "upload-button-label",
          "reflectToAttr": false,
          "docs": "Label text displayed inside the upload button.",
          "docsTags": [],
          "default": "'Upload'",
          "values": [
            {
              "type": "string"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        },
        {
          "name": "value",
          "type": "File[]",
          "complexType": {
            "original": "File[]",
            "resolved": "File[]",
            "references": {
              "File": {
                "location": "global",
                "id": "global::File"
              }
            }
          },
          "mutable": true,
          "reflectToAttr": false,
          "docs": "The file value of the upload.",
          "docsTags": [],
          "default": "[]",
          "values": [
            {
              "type": "File[]"
            }
          ],
          "optional": false,
          "required": false,
          "getter": false,
          "setter": false
        }
      ],
      "methods": [],
      "events": [
        {
          "event": "tk-change",
          "detail": "File[]",
          "bubbles": true,
          "complexType": {
            "original": "File[]",
            "resolved": "File[]",
            "references": {
              "File": {
                "location": "global",
                "id": "global::File"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when one or more files pass validation.",
          "docsTags": []
        },
        {
          "event": "tk-files-rejected",
          "detail": "{ reason: string; file: File | FileList; }[]",
          "bubbles": true,
          "complexType": {
            "original": "{ reason: string; file: File | FileList }[]",
            "resolved": "{ reason: string; file: File | FileList; }[]",
            "references": {
              "File": {
                "location": "global",
                "id": "global::File"
              },
              "FileList": {
                "location": "global",
                "id": "global::FileList"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when one or more files fail validation, with reasons.",
          "docsTags": []
        },
        {
          "event": "tk-removed-file",
          "detail": "File",
          "bubbles": true,
          "complexType": {
            "original": "File",
            "resolved": "File",
            "references": {
              "File": {
                "location": "global",
                "id": "global::File"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when a file is removed from the accepted list.",
          "docsTags": []
        },
        {
          "event": "tk-upload",
          "detail": "File[]",
          "bubbles": true,
          "complexType": {
            "original": "File[]",
            "resolved": "File[]",
            "references": {
              "File": {
                "location": "global",
                "id": "global::File"
              }
            }
          },
          "cancelable": true,
          "composed": true,
          "docs": "Emitted when the user initiates file upload.",
          "docsTags": []
        }
      ],
      "listeners": [],
      "styles": [],
      "slots": [],
      "parts": [],
      "dependents": [],
      "dependencies": [
        "tk-spinner",
        "tk-icon",
        "tk-button"
      ],
      "dependencyGraph": {
        "tk-upload": [
          "tk-spinner",
          "tk-icon",
          "tk-button"
        ],
        "tk-button": [
          "tk-spinner",
          "tk-icon"
        ]
      }
    }
  ],
  "typeLibrary": {
    "src/global/interfaces/IIconOptions.ts::IIconOptions": {
      "declaration": "export interface IIconOptions {\n  /**\n   * Material symbols icon name\n   */\n  name: string;\n  /**\n   * The color of the icon\n   */\n  color?: string;\n  /**\n   * The style of the icon\n   */\n  style?: 'outlined' | 'rounded' | 'sharp';\n  /**\n   * Indicates whether the icon should be filled\n   */\n  fill?: boolean;\n}",
      "docstring": "Defines the options for configuring icons in the component",
      "path": "src/global/interfaces/IIconOptions.ts"
    },
    "src/components/tk-accordion/tk-accordion.tsx::IAccordionItemSelect": {
      "declaration": "export interface IAccordionItemSelect {\n  index: string | number;\n  active: boolean;\n}",
      "docstring": "",
      "path": "src/components/tk-accordion/tk-accordion.tsx"
    },
    "src/components/tk-datepicker/tk-datepicker.tsx::IDateSelection": {
      "declaration": "export interface IDateSelection {\n  start: string;\n  end?: string;\n}",
      "docstring": "",
      "path": "src/components/tk-datepicker/tk-datepicker.tsx"
    },
    "src/components/tk-breadcrumb/interfaces.ts::IBreadcrumbModel": {
      "declaration": "export interface IBreadcrumbModel {\n  /** Label text for the item */\n  label: string;\n  /** URL for the item */\n  href?: string;\n  /** Icon to display alongside the label */\n  icon?: string;\n  /** Whether the item is an external url */\n  isExternal?: boolean;\n}",
      "docstring": "",
      "path": "src/components/tk-breadcrumb/interfaces.ts"
    },
    "../../node_modules/.pnpm/chart.js@4.4.9/node_modules/chart.js/auto/auto.d.ts::ChartType": {
      "declaration": "any",
      "docstring": "",
      "path": "../../node_modules/.pnpm/chart.js@4.4.9/node_modules/chart.js/auto/auto.d.ts"
    },
    "../../node_modules/.pnpm/chart.js@4.4.9/node_modules/chart.js/auto/auto.d.ts::ChartData": {
      "declaration": "any",
      "docstring": "",
      "path": "../../node_modules/.pnpm/chart.js@4.4.9/node_modules/chart.js/auto/auto.d.ts"
    },
    "../../node_modules/.pnpm/chart.js@4.4.9/node_modules/chart.js/auto/auto.d.ts::ChartOptions": {
      "declaration": "any",
      "docstring": "",
      "path": "../../node_modules/.pnpm/chart.js@4.4.9/node_modules/chart.js/auto/auto.d.ts"
    },
    "../../node_modules/.pnpm/@tiptap+core@2.11.7_@tiptap+pm@2.11.7/node_modules/@tiptap/core/dist/index.d.ts::AnyExtension": {
      "declaration": "any",
      "docstring": "",
      "path": "../../node_modules/.pnpm/@tiptap+core@2.11.7_@tiptap+pm@2.11.7/node_modules/@tiptap/core/dist/index.d.ts"
    },
    "src/components/tk-editor/interfaces.ts::TkEditorCustomButton": {
      "declaration": "export interface TkEditorCustomButton {\n  /**\n   * The action to perform when the button is clicked\n   */\n  action: string;\n  /**\n   * The icon to display in the toolbar button\n   */\n  icon: string;\n  /**\n   * The label to display in the toolbar button\n   */\n  label: string;\n  /**\n   * The behavior of the button\n   */\n  behavior: TkEditorToolbarButtonBehavior;\n  /**\n   * The level of the heading to apply when the button is clicked\n   */\n  level?: HeadingLevel;\n  /**\n   * The command to run when the button is clicked\n   */\n  command?: (editor: Editor) => boolean | void;\n}",
      "docstring": "",
      "path": "src/components/tk-editor/interfaces.ts"
    },
    "src/components/tk-editor/interfaces.ts::TkEditorToolbarConfig": {
      "declaration": "interface Array<T> {\n    /**\n     * Gets or sets the length of the array. This is a number one higher than the highest index in the array.\n     */\n    length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Removes the last element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    pop(): T | undefined;\n    /**\n     * Appends new elements to the end of an array, and returns the new length of the array.\n     * @param items New elements to add to the array.\n     */\n    push(...items: T[]): number;\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array into a string, separated by the specified separator string.\n     * @param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Reverses the elements in an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     */\n    reverse(): T[];\n    /**\n     * Removes the first element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    shift(): T | undefined;\n    /**\n     * Returns a copy of a section of an array.\n     * For both start and end, a negative index can be used to indicate an offset from the end of the array.\n     * For example, -2 refers to the second to last element of the array.\n     * @param start The beginning index of the specified portion of the array.\n     * If start is undefined, then the slice begins at index 0.\n     * @param end The end index of the specified portion of the array. This is exclusive of the element at the index 'end'.\n     * If end is undefined, then the slice extends to the end of the array.\n     */\n    slice(start?: number, end?: number): T[];\n    /**\n     * Sorts an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if the first argument is less than the second argument, zero if they're equal, and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending, ASCII character order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: T, b: T) => number): this;\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount?: number): T[];\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @param items Elements to insert into the array in place of the deleted elements.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n    /**\n     * Inserts new elements at the start of an array, and returns the new length of the array.\n     * @param items Elements to insert at the start of the array.\n     */\n    unshift(...items: T[]): number;\n    /**\n     * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n    [n: number]: T;\n}",
      "docstring": "",
      "path": "src/components/tk-editor/interfaces.ts"
    },
    "../../node_modules/.pnpm/@tiptap+core@2.11.7_@tiptap+pm@2.11.7/node_modules/@tiptap/core/dist/index.d.ts::JSONContent": {
      "declaration": "any",
      "docstring": "",
      "path": "../../node_modules/.pnpm/@tiptap+core@2.11.7_@tiptap+pm@2.11.7/node_modules/@tiptap/core/dist/index.d.ts"
    },
    "../../node_modules/.pnpm/@tiptap+core@2.11.7_@tiptap+pm@2.11.7/node_modules/@tiptap/core/dist/index.d.ts::Editor": {
      "declaration": "any",
      "docstring": "",
      "path": "../../node_modules/.pnpm/@tiptap+core@2.11.7_@tiptap+pm@2.11.7/node_modules/@tiptap/core/dist/index.d.ts"
    },
    "src/components/tk-input/interfaces.ts::IInputMaskOptions": {
      "declaration": "export interface IInputMaskOptions {\n  backspace?: boolean;\n  blocks?: number[];\n  blocksLength?: number;\n  copyDelimiter?: boolean;\n  creditCard?: boolean;\n  creditCardStrictMode?: boolean;\n  creditCardType?: string;\n  date?: boolean;\n  dateFormatter?: any;\n  dateMax?: string;\n  dateMin?: string;\n  datePattern?: string[];\n  delimiter?: string;\n  delimiterLazyShow?: boolean;\n  delimiterLength?: number;\n  delimiters?: any[];\n  initValue?: string;\n  letterOnly?: boolean;\n  lowerCase?: boolean;\n  maxLength?: number;\n  noImmediatePrefix?: boolean;\n  numeral?: boolean;\n  numeralDecimalMark?: string;\n  numeralDecimalScale?: number;\n  numeralIntegerScale?: number;\n  numeralPositiveOnly?: boolean;\n  numeralThousandsGroupStyle?: string;\n  numericOnly?: boolean;\n  phone?: boolean;\n  phoneFormatter?: any;\n  phoneRegionCode?: string;\n  prefix?: string;\n  prefixLength?: number;\n  rawValueTrimPrefix?: boolean;\n  result?: string;\n  signBeforePrefix?: boolean;\n  stripLeadingZeroes?: boolean;\n  swapHiddenInput?: boolean;\n  tailPrefix?: boolean;\n  time?: boolean;\n  timeFormat?: string;\n  timeFormatter?: any;\n  timePattern?: string[];\n  uppercase?: boolean;\n}",
      "docstring": "See cleave.js documentation https://nosir.github.io/cleave.js",
      "path": "src/components/tk-input/interfaces.ts"
    },
    "src/components/tk-stepper/interfaces.ts::IStepClickDetail": {
      "declaration": "export interface IStepClickDetail {\n  index: number;\n  status: 'completed' | 'active' | 'inactive' | 'error' | 'disabled';\n}",
      "docstring": "",
      "path": "src/components/tk-stepper/interfaces.ts"
    },
    "src/components/tk-table/interfaces.ts::ITableColumn": {
      "declaration": "export interface ITableColumn {\n  /** Defines the field for the column */\n  field: string;\n  /** Defines heading for the column */\n  header: string;\n  /** Defines sub heading for the column */\n  subHeader?: string;\n  /** Defines width for the column */\n  width?: string;\n  /** Indicates if the column supports sorting */\n  sortable?: boolean;\n  /** Custom sort function for the column */\n  sorter?: Function;\n  /** Custom filter function for the column */\n  filter?: Function;\n  /** Indicates if the column is searchable */\n  searchable?: boolean;\n  /** Indicates if the column is editable */\n  editable?: boolean;\n  /** Specifies the input type for editable columns */\n  inputType?: string;\n  /** Indicates if the column contains selection checkboxes */\n  selectColumn?: boolean;\n  /** Indicates if the column acts as an expander */\n  expander?: boolean;\n  /** Custom rendering function for HTML content in the column */\n  html?: Function;\n  /** */\n  fixed?: 'left' | 'right';\n  /** Defines the filter type for this column (text, checkbox or radio) */\n  filterType?: 'text' | 'checkbox' | 'radio';\n  /** Defines options for checkbox or radio filter type */\n  filterOptions?: IFilterOption[];\n}",
      "docstring": "Defines the columns for the table",
      "path": "src/components/tk-table/interfaces.ts"
    },
    "src/components/tk-table/interfaces.ts::ITableRowCellStyleResponse": {
      "declaration": "export interface ITableRowCellStyleResponse {\n  background?: string;\n  color?: string;\n}",
      "docstring": "",
      "path": "src/components/tk-table/interfaces.ts"
    },
    "src/components/tk-table/interfaces.ts::ITableRequest": {
      "declaration": "export interface ITableRequest {\n  /** The current page number */\n  currentPage: number;\n  /** The total number of pages */\n  totalPages: number;\n  /** The starting index of the items on the current page */\n  startItem: number;\n  /** The ending index of the items on the current page */\n  endItem: number;\n  /** The number of rows per page */\n  rowsPerPage: number;\n  /** The field by which the table is sorted */\n  sortField: string;\n  /** The order of sorting: 'asc' or 'desc' */\n  sortOrder: string;\n  /** A list of filters applied to the table */\n  filters: ITableFilter[];\n}",
      "docstring": "It is the return type of the tkRequest event.",
      "path": "src/components/tk-table/interfaces.ts"
    },
    "src/components/tk-table/interfaces.ts::ITableCellEdit": {
      "declaration": "export interface ITableCellEdit {\n  /** The unique identifier of the row being edited. Contains the value of the dataKey prop in the edited row */\n  rowId: string;\n  /** The index of the row being edited */\n  rowIndex: number;\n  /** The field being edited */\n  field: string;\n  /** The new value for the field */\n  value: string;\n}",
      "docstring": "It is the return type of the tkCellEdit event.",
      "path": "src/components/tk-table/interfaces.ts"
    },
    "src/components/tk-table/interfaces.ts::ITableExportOptions": {
      "declaration": "export interface ITableExportOptions {\n  /** only works when type is `pdf`. Default value is `vertical` */\n  orientation?: 'horizontal' | 'vertical';\n  /** */\n  fileName?: string;\n  /** */\n  type?: 'csv' | 'pdf' | 'excel';\n  /** `all` working only client side pagination. Default value is `current-page` */\n  scope?: 'current-page' | 'selected' | 'all';\n  /** Ignore Columns Fields array for only excel export */\n  ignoreColumnsFields?: string[];\n  /** Columns for only excel export */\n  columns?: ITableExportExcelColumn[];\n  /** */\n  externalData?: any[];\n}",
      "docstring": "",
      "path": "src/components/tk-table/interfaces.ts"
    },
    "src/components/tk-table/interfaces.ts::ITableFilter": {
      "declaration": "export interface ITableFilter {\n  /** The value of the filter - string for text/radio filter, string array for checkbox filter */\n  value?: string | string[];\n  /** The field to which the filter is applied */\n  field: string;\n  /** The type of the filter (text, checkbox or radio) */\n  type?: 'text' | 'checkbox' | 'radio';\n}",
      "docstring": "Represents a filter applied to a table",
      "path": "src/components/tk-table/interfaces.ts"
    },
    "src/components/tk-tabs/interfaces.ts::ITabsIconOptions": {
      "declaration": "export interface ITabsIconOptions {\n  /**\n   * Material symbols icon name\n   */\n  name: string;\n  /**\n   * The color of the icon\n   */\n  color?: string;\n  /**\n   * The style of the icon\n   */\n  style?: 'outlined' | 'rounded' | 'sharp';\n  /**\n   * Indicates whether the icon should be filled\n   */\n  fill?: boolean;\n}",
      "docstring": "Defines the options for configuring icons in the Tabs Item component",
      "path": "src/components/tk-tabs/interfaces.ts"
    },
    "src/components/tk-timeline/interfaces.ts::TimelineItem": {
      "declaration": "export interface TimelineItem {\n  title: string;\n  description?: string;\n  date?: string;\n}",
      "docstring": "",
      "path": "src/components/tk-timeline/interfaces.ts"
    },
    "src/components/tk-table/interfaces.ts::IFilterOption": {
      "declaration": "export interface IFilterOption {\n  /** The value of the option */\n  value: string;\n  /** The display label of the option */\n  label?: string;\n}",
      "docstring": "Defines options for checkbox filter",
      "path": "src/components/tk-table/interfaces.ts"
    },
    "src/components/tk-table/interfaces.ts::ICustomElement": {
      "declaration": "export interface ICustomElement {\n  ref: HTMLElement;\n  element: HTMLElement;\n}",
      "docstring": "",
      "path": "src/components/tk-table/interfaces.ts"
    },
    "src/components/tk-table/interfaces.ts::ITableExportExcelColumn": {
      "declaration": "export interface ITableExportExcelColumn {\n  header: string;\n  field: string;\n  width: number;\n}",
      "docstring": "",
      "path": "src/components/tk-table/interfaces.ts"
    }
  }
}